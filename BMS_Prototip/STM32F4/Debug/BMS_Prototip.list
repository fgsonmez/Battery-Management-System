
BMS_Prototip.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005704  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08005890  08005890  00015890  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059b4  080059b4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080059b4  080059b4  000159b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059bc  080059bc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059bc  080059bc  000159bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080059c0  080059c0  000159c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080059c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  20000070  08005a34  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  08005a34  00020188  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d7fa  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b1b  00000000  00000000  0002d89a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d10  00000000  00000000  0002f3b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c38  00000000  00000000  000300c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002159d  00000000  00000000  00030d00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009615  00000000  00000000  0005229d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cb29b  00000000  00000000  0005b8b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00126b4d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f64  00000000  00000000  00126bc8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005874 	.word	0x08005874

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08005874 	.word	0x08005874

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2f>:
 8000ad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000adc:	bf24      	itt	cs
 8000ade:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ae2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ae6:	d90d      	bls.n	8000b04 <__aeabi_d2f+0x30>
 8000ae8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000af4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000af8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000afc:	bf08      	it	eq
 8000afe:	f020 0001 	biceq.w	r0, r0, #1
 8000b02:	4770      	bx	lr
 8000b04:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b08:	d121      	bne.n	8000b4e <__aeabi_d2f+0x7a>
 8000b0a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b0e:	bfbc      	itt	lt
 8000b10:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b14:	4770      	bxlt	lr
 8000b16:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b1a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b1e:	f1c2 0218 	rsb	r2, r2, #24
 8000b22:	f1c2 0c20 	rsb	ip, r2, #32
 8000b26:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b2a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b2e:	bf18      	it	ne
 8000b30:	f040 0001 	orrne.w	r0, r0, #1
 8000b34:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b38:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b3c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b40:	ea40 000c 	orr.w	r0, r0, ip
 8000b44:	fa23 f302 	lsr.w	r3, r3, r2
 8000b48:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b4c:	e7cc      	b.n	8000ae8 <__aeabi_d2f+0x14>
 8000b4e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b52:	d107      	bne.n	8000b64 <__aeabi_d2f+0x90>
 8000b54:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b58:	bf1e      	ittt	ne
 8000b5a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b5e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b62:	4770      	bxne	lr
 8000b64:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b68:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop

08000b74 <__aeabi_uldivmod>:
 8000b74:	b953      	cbnz	r3, 8000b8c <__aeabi_uldivmod+0x18>
 8000b76:	b94a      	cbnz	r2, 8000b8c <__aeabi_uldivmod+0x18>
 8000b78:	2900      	cmp	r1, #0
 8000b7a:	bf08      	it	eq
 8000b7c:	2800      	cmpeq	r0, #0
 8000b7e:	bf1c      	itt	ne
 8000b80:	f04f 31ff 	movne.w	r1, #4294967295
 8000b84:	f04f 30ff 	movne.w	r0, #4294967295
 8000b88:	f000 b972 	b.w	8000e70 <__aeabi_idiv0>
 8000b8c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b90:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b94:	f000 f806 	bl	8000ba4 <__udivmoddi4>
 8000b98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba0:	b004      	add	sp, #16
 8000ba2:	4770      	bx	lr

08000ba4 <__udivmoddi4>:
 8000ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba8:	9e08      	ldr	r6, [sp, #32]
 8000baa:	4604      	mov	r4, r0
 8000bac:	4688      	mov	r8, r1
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d14b      	bne.n	8000c4a <__udivmoddi4+0xa6>
 8000bb2:	428a      	cmp	r2, r1
 8000bb4:	4615      	mov	r5, r2
 8000bb6:	d967      	bls.n	8000c88 <__udivmoddi4+0xe4>
 8000bb8:	fab2 f282 	clz	r2, r2
 8000bbc:	b14a      	cbz	r2, 8000bd2 <__udivmoddi4+0x2e>
 8000bbe:	f1c2 0720 	rsb	r7, r2, #32
 8000bc2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bc6:	fa20 f707 	lsr.w	r7, r0, r7
 8000bca:	4095      	lsls	r5, r2
 8000bcc:	ea47 0803 	orr.w	r8, r7, r3
 8000bd0:	4094      	lsls	r4, r2
 8000bd2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bd6:	0c23      	lsrs	r3, r4, #16
 8000bd8:	fbb8 f7fe 	udiv	r7, r8, lr
 8000bdc:	fa1f fc85 	uxth.w	ip, r5
 8000be0:	fb0e 8817 	mls	r8, lr, r7, r8
 8000be4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000be8:	fb07 f10c 	mul.w	r1, r7, ip
 8000bec:	4299      	cmp	r1, r3
 8000bee:	d909      	bls.n	8000c04 <__udivmoddi4+0x60>
 8000bf0:	18eb      	adds	r3, r5, r3
 8000bf2:	f107 30ff 	add.w	r0, r7, #4294967295
 8000bf6:	f080 811b 	bcs.w	8000e30 <__udivmoddi4+0x28c>
 8000bfa:	4299      	cmp	r1, r3
 8000bfc:	f240 8118 	bls.w	8000e30 <__udivmoddi4+0x28c>
 8000c00:	3f02      	subs	r7, #2
 8000c02:	442b      	add	r3, r5
 8000c04:	1a5b      	subs	r3, r3, r1
 8000c06:	b2a4      	uxth	r4, r4
 8000c08:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c0c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c14:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c18:	45a4      	cmp	ip, r4
 8000c1a:	d909      	bls.n	8000c30 <__udivmoddi4+0x8c>
 8000c1c:	192c      	adds	r4, r5, r4
 8000c1e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c22:	f080 8107 	bcs.w	8000e34 <__udivmoddi4+0x290>
 8000c26:	45a4      	cmp	ip, r4
 8000c28:	f240 8104 	bls.w	8000e34 <__udivmoddi4+0x290>
 8000c2c:	3802      	subs	r0, #2
 8000c2e:	442c      	add	r4, r5
 8000c30:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c34:	eba4 040c 	sub.w	r4, r4, ip
 8000c38:	2700      	movs	r7, #0
 8000c3a:	b11e      	cbz	r6, 8000c44 <__udivmoddi4+0xa0>
 8000c3c:	40d4      	lsrs	r4, r2
 8000c3e:	2300      	movs	r3, #0
 8000c40:	e9c6 4300 	strd	r4, r3, [r6]
 8000c44:	4639      	mov	r1, r7
 8000c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4a:	428b      	cmp	r3, r1
 8000c4c:	d909      	bls.n	8000c62 <__udivmoddi4+0xbe>
 8000c4e:	2e00      	cmp	r6, #0
 8000c50:	f000 80eb 	beq.w	8000e2a <__udivmoddi4+0x286>
 8000c54:	2700      	movs	r7, #0
 8000c56:	e9c6 0100 	strd	r0, r1, [r6]
 8000c5a:	4638      	mov	r0, r7
 8000c5c:	4639      	mov	r1, r7
 8000c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c62:	fab3 f783 	clz	r7, r3
 8000c66:	2f00      	cmp	r7, #0
 8000c68:	d147      	bne.n	8000cfa <__udivmoddi4+0x156>
 8000c6a:	428b      	cmp	r3, r1
 8000c6c:	d302      	bcc.n	8000c74 <__udivmoddi4+0xd0>
 8000c6e:	4282      	cmp	r2, r0
 8000c70:	f200 80fa 	bhi.w	8000e68 <__udivmoddi4+0x2c4>
 8000c74:	1a84      	subs	r4, r0, r2
 8000c76:	eb61 0303 	sbc.w	r3, r1, r3
 8000c7a:	2001      	movs	r0, #1
 8000c7c:	4698      	mov	r8, r3
 8000c7e:	2e00      	cmp	r6, #0
 8000c80:	d0e0      	beq.n	8000c44 <__udivmoddi4+0xa0>
 8000c82:	e9c6 4800 	strd	r4, r8, [r6]
 8000c86:	e7dd      	b.n	8000c44 <__udivmoddi4+0xa0>
 8000c88:	b902      	cbnz	r2, 8000c8c <__udivmoddi4+0xe8>
 8000c8a:	deff      	udf	#255	; 0xff
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	2a00      	cmp	r2, #0
 8000c92:	f040 808f 	bne.w	8000db4 <__udivmoddi4+0x210>
 8000c96:	1b49      	subs	r1, r1, r5
 8000c98:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c9c:	fa1f f885 	uxth.w	r8, r5
 8000ca0:	2701      	movs	r7, #1
 8000ca2:	fbb1 fcfe 	udiv	ip, r1, lr
 8000ca6:	0c23      	lsrs	r3, r4, #16
 8000ca8:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cb0:	fb08 f10c 	mul.w	r1, r8, ip
 8000cb4:	4299      	cmp	r1, r3
 8000cb6:	d907      	bls.n	8000cc8 <__udivmoddi4+0x124>
 8000cb8:	18eb      	adds	r3, r5, r3
 8000cba:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cbe:	d202      	bcs.n	8000cc6 <__udivmoddi4+0x122>
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	f200 80cd 	bhi.w	8000e60 <__udivmoddi4+0x2bc>
 8000cc6:	4684      	mov	ip, r0
 8000cc8:	1a59      	subs	r1, r3, r1
 8000cca:	b2a3      	uxth	r3, r4
 8000ccc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd0:	fb0e 1410 	mls	r4, lr, r0, r1
 8000cd4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cd8:	fb08 f800 	mul.w	r8, r8, r0
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	d907      	bls.n	8000cf0 <__udivmoddi4+0x14c>
 8000ce0:	192c      	adds	r4, r5, r4
 8000ce2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ce6:	d202      	bcs.n	8000cee <__udivmoddi4+0x14a>
 8000ce8:	45a0      	cmp	r8, r4
 8000cea:	f200 80b6 	bhi.w	8000e5a <__udivmoddi4+0x2b6>
 8000cee:	4618      	mov	r0, r3
 8000cf0:	eba4 0408 	sub.w	r4, r4, r8
 8000cf4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cf8:	e79f      	b.n	8000c3a <__udivmoddi4+0x96>
 8000cfa:	f1c7 0c20 	rsb	ip, r7, #32
 8000cfe:	40bb      	lsls	r3, r7
 8000d00:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d04:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d08:	fa01 f407 	lsl.w	r4, r1, r7
 8000d0c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d10:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d14:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d18:	4325      	orrs	r5, r4
 8000d1a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d1e:	0c2c      	lsrs	r4, r5, #16
 8000d20:	fb08 3319 	mls	r3, r8, r9, r3
 8000d24:	fa1f fa8e 	uxth.w	sl, lr
 8000d28:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d2c:	fb09 f40a 	mul.w	r4, r9, sl
 8000d30:	429c      	cmp	r4, r3
 8000d32:	fa02 f207 	lsl.w	r2, r2, r7
 8000d36:	fa00 f107 	lsl.w	r1, r0, r7
 8000d3a:	d90b      	bls.n	8000d54 <__udivmoddi4+0x1b0>
 8000d3c:	eb1e 0303 	adds.w	r3, lr, r3
 8000d40:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d44:	f080 8087 	bcs.w	8000e56 <__udivmoddi4+0x2b2>
 8000d48:	429c      	cmp	r4, r3
 8000d4a:	f240 8084 	bls.w	8000e56 <__udivmoddi4+0x2b2>
 8000d4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000d52:	4473      	add	r3, lr
 8000d54:	1b1b      	subs	r3, r3, r4
 8000d56:	b2ad      	uxth	r5, r5
 8000d58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d5c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d60:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d64:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d68:	45a2      	cmp	sl, r4
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x1da>
 8000d6c:	eb1e 0404 	adds.w	r4, lr, r4
 8000d70:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d74:	d26b      	bcs.n	8000e4e <__udivmoddi4+0x2aa>
 8000d76:	45a2      	cmp	sl, r4
 8000d78:	d969      	bls.n	8000e4e <__udivmoddi4+0x2aa>
 8000d7a:	3802      	subs	r0, #2
 8000d7c:	4474      	add	r4, lr
 8000d7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d82:	fba0 8902 	umull	r8, r9, r0, r2
 8000d86:	eba4 040a 	sub.w	r4, r4, sl
 8000d8a:	454c      	cmp	r4, r9
 8000d8c:	46c2      	mov	sl, r8
 8000d8e:	464b      	mov	r3, r9
 8000d90:	d354      	bcc.n	8000e3c <__udivmoddi4+0x298>
 8000d92:	d051      	beq.n	8000e38 <__udivmoddi4+0x294>
 8000d94:	2e00      	cmp	r6, #0
 8000d96:	d069      	beq.n	8000e6c <__udivmoddi4+0x2c8>
 8000d98:	ebb1 050a 	subs.w	r5, r1, sl
 8000d9c:	eb64 0403 	sbc.w	r4, r4, r3
 8000da0:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000da4:	40fd      	lsrs	r5, r7
 8000da6:	40fc      	lsrs	r4, r7
 8000da8:	ea4c 0505 	orr.w	r5, ip, r5
 8000dac:	e9c6 5400 	strd	r5, r4, [r6]
 8000db0:	2700      	movs	r7, #0
 8000db2:	e747      	b.n	8000c44 <__udivmoddi4+0xa0>
 8000db4:	f1c2 0320 	rsb	r3, r2, #32
 8000db8:	fa20 f703 	lsr.w	r7, r0, r3
 8000dbc:	4095      	lsls	r5, r2
 8000dbe:	fa01 f002 	lsl.w	r0, r1, r2
 8000dc2:	fa21 f303 	lsr.w	r3, r1, r3
 8000dc6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dca:	4338      	orrs	r0, r7
 8000dcc:	0c01      	lsrs	r1, r0, #16
 8000dce:	fbb3 f7fe 	udiv	r7, r3, lr
 8000dd2:	fa1f f885 	uxth.w	r8, r5
 8000dd6:	fb0e 3317 	mls	r3, lr, r7, r3
 8000dda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dde:	fb07 f308 	mul.w	r3, r7, r8
 8000de2:	428b      	cmp	r3, r1
 8000de4:	fa04 f402 	lsl.w	r4, r4, r2
 8000de8:	d907      	bls.n	8000dfa <__udivmoddi4+0x256>
 8000dea:	1869      	adds	r1, r5, r1
 8000dec:	f107 3cff 	add.w	ip, r7, #4294967295
 8000df0:	d22f      	bcs.n	8000e52 <__udivmoddi4+0x2ae>
 8000df2:	428b      	cmp	r3, r1
 8000df4:	d92d      	bls.n	8000e52 <__udivmoddi4+0x2ae>
 8000df6:	3f02      	subs	r7, #2
 8000df8:	4429      	add	r1, r5
 8000dfa:	1acb      	subs	r3, r1, r3
 8000dfc:	b281      	uxth	r1, r0
 8000dfe:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e02:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e06:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e0a:	fb00 f308 	mul.w	r3, r0, r8
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x27e>
 8000e12:	1869      	adds	r1, r5, r1
 8000e14:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e18:	d217      	bcs.n	8000e4a <__udivmoddi4+0x2a6>
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d915      	bls.n	8000e4a <__udivmoddi4+0x2a6>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4429      	add	r1, r5
 8000e22:	1ac9      	subs	r1, r1, r3
 8000e24:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e28:	e73b      	b.n	8000ca2 <__udivmoddi4+0xfe>
 8000e2a:	4637      	mov	r7, r6
 8000e2c:	4630      	mov	r0, r6
 8000e2e:	e709      	b.n	8000c44 <__udivmoddi4+0xa0>
 8000e30:	4607      	mov	r7, r0
 8000e32:	e6e7      	b.n	8000c04 <__udivmoddi4+0x60>
 8000e34:	4618      	mov	r0, r3
 8000e36:	e6fb      	b.n	8000c30 <__udivmoddi4+0x8c>
 8000e38:	4541      	cmp	r1, r8
 8000e3a:	d2ab      	bcs.n	8000d94 <__udivmoddi4+0x1f0>
 8000e3c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e40:	eb69 020e 	sbc.w	r2, r9, lr
 8000e44:	3801      	subs	r0, #1
 8000e46:	4613      	mov	r3, r2
 8000e48:	e7a4      	b.n	8000d94 <__udivmoddi4+0x1f0>
 8000e4a:	4660      	mov	r0, ip
 8000e4c:	e7e9      	b.n	8000e22 <__udivmoddi4+0x27e>
 8000e4e:	4618      	mov	r0, r3
 8000e50:	e795      	b.n	8000d7e <__udivmoddi4+0x1da>
 8000e52:	4667      	mov	r7, ip
 8000e54:	e7d1      	b.n	8000dfa <__udivmoddi4+0x256>
 8000e56:	4681      	mov	r9, r0
 8000e58:	e77c      	b.n	8000d54 <__udivmoddi4+0x1b0>
 8000e5a:	3802      	subs	r0, #2
 8000e5c:	442c      	add	r4, r5
 8000e5e:	e747      	b.n	8000cf0 <__udivmoddi4+0x14c>
 8000e60:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e64:	442b      	add	r3, r5
 8000e66:	e72f      	b.n	8000cc8 <__udivmoddi4+0x124>
 8000e68:	4638      	mov	r0, r7
 8000e6a:	e708      	b.n	8000c7e <__udivmoddi4+0xda>
 8000e6c:	4637      	mov	r7, r6
 8000e6e:	e6e9      	b.n	8000c44 <__udivmoddi4+0xa0>

08000e70 <__aeabi_idiv0>:
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop

08000e74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e78:	f000 fcfc 	bl	8001874 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e7c:	f000 f81c 	bl	8000eb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e80:	f000 f928 	bl	80010d4 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000e84:	f000 f878 	bl	8000f78 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000e88:	f000 f8ae 	bl	8000fe8 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000e8c:	f000 f8f8 	bl	8001080 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000e90:	4807      	ldr	r0, [pc, #28]	; (8000eb0 <main+0x3c>)
 8000e92:	f002 f8ee 	bl	8003072 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  //Wait Until Timer Interrupt
	  while(!Tim_Int);
 8000e96:	bf00      	nop
 8000e98:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <main+0x40>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d0fb      	beq.n	8000e98 <main+0x24>

	  Recive_ADC_Value(Slave_No_1);
 8000ea0:	2001      	movs	r0, #1
 8000ea2:	f000 f997 	bl	80011d4 <Recive_ADC_Value>

	  Tim_Int = RESET;
 8000ea6:	4b03      	ldr	r3, [pc, #12]	; (8000eb4 <main+0x40>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	701a      	strb	r2, [r3, #0]
	  while(!Tim_Int);
 8000eac:	e7f3      	b.n	8000e96 <main+0x22>
 8000eae:	bf00      	nop
 8000eb0:	20000100 	.word	0x20000100
 8000eb4:	2000008c 	.word	0x2000008c

08000eb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b094      	sub	sp, #80	; 0x50
 8000ebc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ebe:	f107 0320 	add.w	r3, r7, #32
 8000ec2:	2230      	movs	r2, #48	; 0x30
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f003 f9ba 	bl	8004240 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ecc:	f107 030c 	add.w	r3, r7, #12
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000edc:	2300      	movs	r3, #0
 8000ede:	60bb      	str	r3, [r7, #8]
 8000ee0:	4b23      	ldr	r3, [pc, #140]	; (8000f70 <SystemClock_Config+0xb8>)
 8000ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee4:	4a22      	ldr	r2, [pc, #136]	; (8000f70 <SystemClock_Config+0xb8>)
 8000ee6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eea:	6413      	str	r3, [r2, #64]	; 0x40
 8000eec:	4b20      	ldr	r3, [pc, #128]	; (8000f70 <SystemClock_Config+0xb8>)
 8000eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ef4:	60bb      	str	r3, [r7, #8]
 8000ef6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ef8:	2300      	movs	r3, #0
 8000efa:	607b      	str	r3, [r7, #4]
 8000efc:	4b1d      	ldr	r3, [pc, #116]	; (8000f74 <SystemClock_Config+0xbc>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a1c      	ldr	r2, [pc, #112]	; (8000f74 <SystemClock_Config+0xbc>)
 8000f02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f06:	6013      	str	r3, [r2, #0]
 8000f08:	4b1a      	ldr	r3, [pc, #104]	; (8000f74 <SystemClock_Config+0xbc>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f10:	607b      	str	r3, [r7, #4]
 8000f12:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f14:	2302      	movs	r3, #2
 8000f16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f1c:	2310      	movs	r3, #16
 8000f1e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f20:	2300      	movs	r3, #0
 8000f22:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f24:	f107 0320 	add.w	r3, r7, #32
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f000 fff5 	bl	8001f18 <HAL_RCC_OscConfig>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000f34:	f000 fb14 	bl	8001560 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f38:	230f      	movs	r3, #15
 8000f3a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f40:	2300      	movs	r3, #0
 8000f42:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f44:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f48:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000f4a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f4e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f50:	f107 030c 	add.w	r3, r7, #12
 8000f54:	2100      	movs	r1, #0
 8000f56:	4618      	mov	r0, r3
 8000f58:	f001 fa4e 	bl	80023f8 <HAL_RCC_ClockConfig>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000f62:	f000 fafd 	bl	8001560 <Error_Handler>
  }
}
 8000f66:	bf00      	nop
 8000f68:	3750      	adds	r7, #80	; 0x50
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40023800 	.word	0x40023800
 8000f74:	40007000 	.word	0x40007000

08000f78 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000f7c:	4b18      	ldr	r3, [pc, #96]	; (8000fe0 <MX_SPI2_Init+0x68>)
 8000f7e:	4a19      	ldr	r2, [pc, #100]	; (8000fe4 <MX_SPI2_Init+0x6c>)
 8000f80:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f82:	4b17      	ldr	r3, [pc, #92]	; (8000fe0 <MX_SPI2_Init+0x68>)
 8000f84:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f88:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000f8a:	4b15      	ldr	r3, [pc, #84]	; (8000fe0 <MX_SPI2_Init+0x68>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8000f90:	4b13      	ldr	r3, [pc, #76]	; (8000fe0 <MX_SPI2_Init+0x68>)
 8000f92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f96:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f98:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <MX_SPI2_Init+0x68>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f9e:	4b10      	ldr	r3, [pc, #64]	; (8000fe0 <MX_SPI2_Init+0x68>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000fa4:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <MX_SPI2_Init+0x68>)
 8000fa6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000faa:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000fac:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <MX_SPI2_Init+0x68>)
 8000fae:	2210      	movs	r2, #16
 8000fb0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fb2:	4b0b      	ldr	r3, [pc, #44]	; (8000fe0 <MX_SPI2_Init+0x68>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fb8:	4b09      	ldr	r3, [pc, #36]	; (8000fe0 <MX_SPI2_Init+0x68>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fbe:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <MX_SPI2_Init+0x68>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000fc4:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <MX_SPI2_Init+0x68>)
 8000fc6:	220a      	movs	r2, #10
 8000fc8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000fca:	4805      	ldr	r0, [pc, #20]	; (8000fe0 <MX_SPI2_Init+0x68>)
 8000fcc:	f001 fc06 	bl	80027dc <HAL_SPI_Init>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8000fd6:	f000 fac3 	bl	8001560 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	2000009c 	.word	0x2000009c
 8000fe4:	40003800 	.word	0x40003800

08000fe8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fee:	f107 0308 	add.w	r3, r7, #8
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	605a      	str	r2, [r3, #4]
 8000ff8:	609a      	str	r2, [r3, #8]
 8000ffa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ffc:	463b      	mov	r3, r7
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001004:	4b1d      	ldr	r3, [pc, #116]	; (800107c <MX_TIM2_Init+0x94>)
 8001006:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800100a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 249;
 800100c:	4b1b      	ldr	r3, [pc, #108]	; (800107c <MX_TIM2_Init+0x94>)
 800100e:	22f9      	movs	r2, #249	; 0xf9
 8001010:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001012:	4b1a      	ldr	r3, [pc, #104]	; (800107c <MX_TIM2_Init+0x94>)
 8001014:	2200      	movs	r2, #0
 8001016:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 32000;
 8001018:	4b18      	ldr	r3, [pc, #96]	; (800107c <MX_TIM2_Init+0x94>)
 800101a:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 800101e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001020:	4b16      	ldr	r3, [pc, #88]	; (800107c <MX_TIM2_Init+0x94>)
 8001022:	2200      	movs	r2, #0
 8001024:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001026:	4b15      	ldr	r3, [pc, #84]	; (800107c <MX_TIM2_Init+0x94>)
 8001028:	2200      	movs	r2, #0
 800102a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800102c:	4813      	ldr	r0, [pc, #76]	; (800107c <MX_TIM2_Init+0x94>)
 800102e:	f001 fff5 	bl	800301c <HAL_TIM_Base_Init>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001038:	f000 fa92 	bl	8001560 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800103c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001040:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001042:	f107 0308 	add.w	r3, r7, #8
 8001046:	4619      	mov	r1, r3
 8001048:	480c      	ldr	r0, [pc, #48]	; (800107c <MX_TIM2_Init+0x94>)
 800104a:	f002 f93e 	bl	80032ca <HAL_TIM_ConfigClockSource>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001054:	f000 fa84 	bl	8001560 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001058:	2320      	movs	r3, #32
 800105a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800105c:	2300      	movs	r3, #0
 800105e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001060:	463b      	mov	r3, r7
 8001062:	4619      	mov	r1, r3
 8001064:	4805      	ldr	r0, [pc, #20]	; (800107c <MX_TIM2_Init+0x94>)
 8001066:	f002 fb49 	bl	80036fc <HAL_TIMEx_MasterConfigSynchronization>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001070:	f000 fa76 	bl	8001560 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001074:	bf00      	nop
 8001076:	3718      	adds	r7, #24
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	20000100 	.word	0x20000100

08001080 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001084:	4b11      	ldr	r3, [pc, #68]	; (80010cc <MX_USART2_UART_Init+0x4c>)
 8001086:	4a12      	ldr	r2, [pc, #72]	; (80010d0 <MX_USART2_UART_Init+0x50>)
 8001088:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800108a:	4b10      	ldr	r3, [pc, #64]	; (80010cc <MX_USART2_UART_Init+0x4c>)
 800108c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001090:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001092:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <MX_USART2_UART_Init+0x4c>)
 8001094:	2200      	movs	r2, #0
 8001096:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001098:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <MX_USART2_UART_Init+0x4c>)
 800109a:	2200      	movs	r2, #0
 800109c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800109e:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <MX_USART2_UART_Init+0x4c>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010a4:	4b09      	ldr	r3, [pc, #36]	; (80010cc <MX_USART2_UART_Init+0x4c>)
 80010a6:	220c      	movs	r2, #12
 80010a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010aa:	4b08      	ldr	r3, [pc, #32]	; (80010cc <MX_USART2_UART_Init+0x4c>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <MX_USART2_UART_Init+0x4c>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010b6:	4805      	ldr	r0, [pc, #20]	; (80010cc <MX_USART2_UART_Init+0x4c>)
 80010b8:	f002 fbb0 	bl	800381c <HAL_UART_Init>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010c2:	f000 fa4d 	bl	8001560 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20000140 	.word	0x20000140
 80010d0:	40004400 	.word	0x40004400

080010d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b088      	sub	sp, #32
 80010d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010da:	f107 030c 	add.w	r3, r7, #12
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	605a      	str	r2, [r3, #4]
 80010e4:	609a      	str	r2, [r3, #8]
 80010e6:	60da      	str	r2, [r3, #12]
 80010e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	60bb      	str	r3, [r7, #8]
 80010ee:	4b2c      	ldr	r3, [pc, #176]	; (80011a0 <MX_GPIO_Init+0xcc>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	4a2b      	ldr	r2, [pc, #172]	; (80011a0 <MX_GPIO_Init+0xcc>)
 80010f4:	f043 0301 	orr.w	r3, r3, #1
 80010f8:	6313      	str	r3, [r2, #48]	; 0x30
 80010fa:	4b29      	ldr	r3, [pc, #164]	; (80011a0 <MX_GPIO_Init+0xcc>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	60bb      	str	r3, [r7, #8]
 8001104:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	607b      	str	r3, [r7, #4]
 800110a:	4b25      	ldr	r3, [pc, #148]	; (80011a0 <MX_GPIO_Init+0xcc>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	4a24      	ldr	r2, [pc, #144]	; (80011a0 <MX_GPIO_Init+0xcc>)
 8001110:	f043 0302 	orr.w	r3, r3, #2
 8001114:	6313      	str	r3, [r2, #48]	; 0x30
 8001116:	4b22      	ldr	r3, [pc, #136]	; (80011a0 <MX_GPIO_Init+0xcc>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	f003 0302 	and.w	r3, r3, #2
 800111e:	607b      	str	r3, [r7, #4]
 8001120:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	603b      	str	r3, [r7, #0]
 8001126:	4b1e      	ldr	r3, [pc, #120]	; (80011a0 <MX_GPIO_Init+0xcc>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	4a1d      	ldr	r2, [pc, #116]	; (80011a0 <MX_GPIO_Init+0xcc>)
 800112c:	f043 0308 	orr.w	r3, r3, #8
 8001130:	6313      	str	r3, [r2, #48]	; 0x30
 8001132:	4b1b      	ldr	r3, [pc, #108]	; (80011a0 <MX_GPIO_Init+0xcc>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	f003 0308 	and.w	r3, r3, #8
 800113a:	603b      	str	r3, [r7, #0]
 800113c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800113e:	2200      	movs	r2, #0
 8001140:	21e0      	movs	r1, #224	; 0xe0
 8001142:	4818      	ldr	r0, [pc, #96]	; (80011a4 <MX_GPIO_Init+0xd0>)
 8001144:	f000 feb4 	bl	8001eb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8001148:	2200      	movs	r2, #0
 800114a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800114e:	4816      	ldr	r0, [pc, #88]	; (80011a8 <MX_GPIO_Init+0xd4>)
 8001150:	f000 feae 	bl	8001eb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001154:	23e0      	movs	r3, #224	; 0xe0
 8001156:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001158:	2301      	movs	r3, #1
 800115a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001160:	2300      	movs	r3, #0
 8001162:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001164:	f107 030c 	add.w	r3, r7, #12
 8001168:	4619      	mov	r1, r3
 800116a:	480e      	ldr	r0, [pc, #56]	; (80011a4 <MX_GPIO_Init+0xd0>)
 800116c:	f000 fd06 	bl	8001b7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001170:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001174:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001176:	2301      	movs	r3, #1
 8001178:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117e:	2300      	movs	r3, #0
 8001180:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001182:	f107 030c 	add.w	r3, r7, #12
 8001186:	4619      	mov	r1, r3
 8001188:	4807      	ldr	r0, [pc, #28]	; (80011a8 <MX_GPIO_Init+0xd4>)
 800118a:	f000 fcf7 	bl	8001b7c <HAL_GPIO_Init>


  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800118e:	2201      	movs	r2, #1
 8001190:	2120      	movs	r1, #32
 8001192:	4804      	ldr	r0, [pc, #16]	; (80011a4 <MX_GPIO_Init+0xd0>)
 8001194:	f000 fe8c 	bl	8001eb0 <HAL_GPIO_WritePin>

}
 8001198:	bf00      	nop
 800119a:	3720      	adds	r7, #32
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40023800 	.word	0x40023800
 80011a4:	40020000 	.word	0x40020000
 80011a8:	40020c00 	.word	0x40020c00

080011ac <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]

	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80011b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011b8:	4804      	ldr	r0, [pc, #16]	; (80011cc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80011ba:	f000 fe92 	bl	8001ee2 <HAL_GPIO_TogglePin>
	Tim_Int = SET;
 80011be:	4b04      	ldr	r3, [pc, #16]	; (80011d0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80011c0:	2201      	movs	r2, #1
 80011c2:	701a      	strb	r2, [r3, #0]
}
 80011c4:	bf00      	nop
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40020c00 	.word	0x40020c00
 80011d0:	2000008c 	.word	0x2000008c

080011d4 <Recive_ADC_Value>:

void Recive_ADC_Value(uint8_t SlvNo)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	71fb      	strb	r3, [r7, #7]
	if(SlvNo == 1)
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d116      	bne.n	8001212 <Recive_ADC_Value+0x3e>
	{
		  //Reset Slave Select for Slave1
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80011e4:	2200      	movs	r2, #0
 80011e6:	2120      	movs	r1, #32
 80011e8:	4828      	ldr	r0, [pc, #160]	; (800128c <Recive_ADC_Value+0xb8>)
 80011ea:	f000 fe61 	bl	8001eb0 <HAL_GPIO_WritePin>

		  //Start SPI Communication
		  if(HAL_SPI_Receive(&hspi2, (uint8_t*)ADC_Value , 6, HAL_MAX_DELAY) != HAL_OK)
 80011ee:	f04f 33ff 	mov.w	r3, #4294967295
 80011f2:	2206      	movs	r2, #6
 80011f4:	4926      	ldr	r1, [pc, #152]	; (8001290 <Recive_ADC_Value+0xbc>)
 80011f6:	4827      	ldr	r0, [pc, #156]	; (8001294 <Recive_ADC_Value+0xc0>)
 80011f8:	f001 fb54 	bl	80028a4 <HAL_SPI_Receive>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <Recive_ADC_Value+0x32>
		  {
			  Error_Handler();
 8001202:	f000 f9ad 	bl	8001560 <Error_Handler>
		  }

		  //Set Slave Select for Slave1
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001206:	2201      	movs	r2, #1
 8001208:	2120      	movs	r1, #32
 800120a:	4820      	ldr	r0, [pc, #128]	; (800128c <Recive_ADC_Value+0xb8>)
 800120c:	f000 fe50 	bl	8001eb0 <HAL_GPIO_WritePin>
 8001210:	e032      	b.n	8001278 <Recive_ADC_Value+0xa4>
	}
	else if(SlvNo == 2)
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	2b02      	cmp	r3, #2
 8001216:	d116      	bne.n	8001246 <Recive_ADC_Value+0x72>
	{
		  //Reset Slave Select for Slave1
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8001218:	2200      	movs	r2, #0
 800121a:	2140      	movs	r1, #64	; 0x40
 800121c:	481b      	ldr	r0, [pc, #108]	; (800128c <Recive_ADC_Value+0xb8>)
 800121e:	f000 fe47 	bl	8001eb0 <HAL_GPIO_WritePin>

		  //Start SPI Communication
		  if(HAL_SPI_Receive(&hspi2, (uint8_t*)ADC_Value , 6, HAL_MAX_DELAY) != HAL_OK)
 8001222:	f04f 33ff 	mov.w	r3, #4294967295
 8001226:	2206      	movs	r2, #6
 8001228:	4919      	ldr	r1, [pc, #100]	; (8001290 <Recive_ADC_Value+0xbc>)
 800122a:	481a      	ldr	r0, [pc, #104]	; (8001294 <Recive_ADC_Value+0xc0>)
 800122c:	f001 fb3a 	bl	80028a4 <HAL_SPI_Receive>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <Recive_ADC_Value+0x66>
		  {
			  Error_Handler();
 8001236:	f000 f993 	bl	8001560 <Error_Handler>
		  }

		  //Set Slave Select for Slave1
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 800123a:	2201      	movs	r2, #1
 800123c:	2140      	movs	r1, #64	; 0x40
 800123e:	4813      	ldr	r0, [pc, #76]	; (800128c <Recive_ADC_Value+0xb8>)
 8001240:	f000 fe36 	bl	8001eb0 <HAL_GPIO_WritePin>
 8001244:	e018      	b.n	8001278 <Recive_ADC_Value+0xa4>
	}
	else if(SlvNo == 3)
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	2b03      	cmp	r3, #3
 800124a:	d115      	bne.n	8001278 <Recive_ADC_Value+0xa4>
	{
		  //Reset Slave Select for Slave1
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 800124c:	2200      	movs	r2, #0
 800124e:	2180      	movs	r1, #128	; 0x80
 8001250:	480e      	ldr	r0, [pc, #56]	; (800128c <Recive_ADC_Value+0xb8>)
 8001252:	f000 fe2d 	bl	8001eb0 <HAL_GPIO_WritePin>

		  //Start SPI Communication
		  if(HAL_SPI_Receive(&hspi2, (uint8_t*)ADC_Value , 6, HAL_MAX_DELAY) != HAL_OK)
 8001256:	f04f 33ff 	mov.w	r3, #4294967295
 800125a:	2206      	movs	r2, #6
 800125c:	490c      	ldr	r1, [pc, #48]	; (8001290 <Recive_ADC_Value+0xbc>)
 800125e:	480d      	ldr	r0, [pc, #52]	; (8001294 <Recive_ADC_Value+0xc0>)
 8001260:	f001 fb20 	bl	80028a4 <HAL_SPI_Receive>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <Recive_ADC_Value+0x9a>
		  {
			  Error_Handler();
 800126a:	f000 f979 	bl	8001560 <Error_Handler>
		  }

		  //Set Slave Select for Slave1
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 800126e:	2201      	movs	r2, #1
 8001270:	2180      	movs	r1, #128	; 0x80
 8001272:	4806      	ldr	r0, [pc, #24]	; (800128c <Recive_ADC_Value+0xb8>)
 8001274:	f000 fe1c 	bl	8001eb0 <HAL_GPIO_WritePin>
	}

	  Send_Cell_Voltage(ADC_Value, SlvNo);
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	4619      	mov	r1, r3
 800127c:	4804      	ldr	r0, [pc, #16]	; (8001290 <Recive_ADC_Value+0xbc>)
 800127e:	f000 f80b 	bl	8001298 <Send_Cell_Voltage>
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40020000 	.word	0x40020000
 8001290:	200000f4 	.word	0x200000f4
 8001294:	2000009c 	.word	0x2000009c

08001298 <Send_Cell_Voltage>:



void Send_Cell_Voltage(uint16_t ADC_Value[], uint8_t SlvNo)
{
 8001298:	b590      	push	{r4, r7, lr}
 800129a:	b0a9      	sub	sp, #164	; 0xa4
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	460b      	mov	r3, r1
 80012a2:	70fb      	strb	r3, [r7, #3]
	float Voltage[6];
	int counter =0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	char UART_Data[100] ={0};
 80012aa:	f107 0314 	add.w	r3, r7, #20
 80012ae:	2264      	movs	r2, #100	; 0x64
 80012b0:	2100      	movs	r1, #0
 80012b2:	4618      	mov	r0, r3
 80012b4:	f002 ffc4 	bl	8004240 <memset>
	if(SlvNo == 1)
 80012b8:	78fb      	ldrb	r3, [r7, #3]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d12f      	bne.n	800131e <Send_Cell_Voltage+0x86>
	{
		UART_Data[counter] = '1';
 80012be:	f107 0214 	add.w	r2, r7, #20
 80012c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80012c6:	4413      	add	r3, r2
 80012c8:	2231      	movs	r2, #49	; 0x31
 80012ca:	701a      	strb	r2, [r3, #0]
		counter++;
 80012cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80012d0:	3301      	adds	r3, #1
 80012d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		UART_Data[counter] = '0';
 80012d6:	f107 0214 	add.w	r2, r7, #20
 80012da:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80012de:	4413      	add	r3, r2
 80012e0:	2230      	movs	r2, #48	; 0x30
 80012e2:	701a      	strb	r2, [r3, #0]
		counter++;
 80012e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80012e8:	3301      	adds	r3, #1
 80012ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		UART_Data[counter] = '1';
 80012ee:	f107 0214 	add.w	r2, r7, #20
 80012f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80012f6:	4413      	add	r3, r2
 80012f8:	2231      	movs	r2, #49	; 0x31
 80012fa:	701a      	strb	r2, [r3, #0]
		counter++;
 80012fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001300:	3301      	adds	r3, #1
 8001302:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		UART_Data[counter] = '[';
 8001306:	f107 0214 	add.w	r2, r7, #20
 800130a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800130e:	4413      	add	r3, r2
 8001310:	225b      	movs	r2, #91	; 0x5b
 8001312:	701a      	strb	r2, [r3, #0]
		counter++;
 8001314:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001318:	3301      	adds	r3, #1
 800131a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	}
	if(SlvNo == 2)
 800131e:	78fb      	ldrb	r3, [r7, #3]
 8001320:	2b02      	cmp	r3, #2
 8001322:	d12f      	bne.n	8001384 <Send_Cell_Voltage+0xec>
	{
		UART_Data[counter] = '1';
 8001324:	f107 0214 	add.w	r2, r7, #20
 8001328:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800132c:	4413      	add	r3, r2
 800132e:	2231      	movs	r2, #49	; 0x31
 8001330:	701a      	strb	r2, [r3, #0]
		counter++;
 8001332:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001336:	3301      	adds	r3, #1
 8001338:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		UART_Data[counter] = '0';
 800133c:	f107 0214 	add.w	r2, r7, #20
 8001340:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001344:	4413      	add	r3, r2
 8001346:	2230      	movs	r2, #48	; 0x30
 8001348:	701a      	strb	r2, [r3, #0]
		counter++;
 800134a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800134e:	3301      	adds	r3, #1
 8001350:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		UART_Data[counter] = '2';
 8001354:	f107 0214 	add.w	r2, r7, #20
 8001358:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800135c:	4413      	add	r3, r2
 800135e:	2232      	movs	r2, #50	; 0x32
 8001360:	701a      	strb	r2, [r3, #0]
		counter++;
 8001362:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001366:	3301      	adds	r3, #1
 8001368:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		UART_Data[counter] = '[';
 800136c:	f107 0214 	add.w	r2, r7, #20
 8001370:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001374:	4413      	add	r3, r2
 8001376:	225b      	movs	r2, #91	; 0x5b
 8001378:	701a      	strb	r2, [r3, #0]
		counter++;
 800137a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800137e:	3301      	adds	r3, #1
 8001380:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	}
	if(SlvNo == 3)
 8001384:	78fb      	ldrb	r3, [r7, #3]
 8001386:	2b03      	cmp	r3, #3
 8001388:	d12f      	bne.n	80013ea <Send_Cell_Voltage+0x152>
	{
		UART_Data[counter] = '1';
 800138a:	f107 0214 	add.w	r2, r7, #20
 800138e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001392:	4413      	add	r3, r2
 8001394:	2231      	movs	r2, #49	; 0x31
 8001396:	701a      	strb	r2, [r3, #0]
		counter++;
 8001398:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800139c:	3301      	adds	r3, #1
 800139e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		UART_Data[counter] = '0';
 80013a2:	f107 0214 	add.w	r2, r7, #20
 80013a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80013aa:	4413      	add	r3, r2
 80013ac:	2230      	movs	r2, #48	; 0x30
 80013ae:	701a      	strb	r2, [r3, #0]
		counter++;
 80013b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80013b4:	3301      	adds	r3, #1
 80013b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		UART_Data[counter] = '3';
 80013ba:	f107 0214 	add.w	r2, r7, #20
 80013be:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80013c2:	4413      	add	r3, r2
 80013c4:	2233      	movs	r2, #51	; 0x33
 80013c6:	701a      	strb	r2, [r3, #0]
		counter++;
 80013c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80013cc:	3301      	adds	r3, #1
 80013ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		UART_Data[counter] = '[';
 80013d2:	f107 0214 	add.w	r2, r7, #20
 80013d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80013da:	4413      	add	r3, r2
 80013dc:	225b      	movs	r2, #91	; 0x5b
 80013de:	701a      	strb	r2, [r3, #0]
		counter++;
 80013e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80013e4:	3301      	adds	r3, #1
 80013e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	}

	for(int i=0; i<6; i++)
 80013ea:	2300      	movs	r3, #0
 80013ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80013f0:	e02f      	b.n	8001452 <Send_Cell_Voltage+0x1ba>
	{
		Voltage[i] = (5.00/1024.00)*(float)ADC_Value[i] + 0.10;
 80013f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	687a      	ldr	r2, [r7, #4]
 80013fa:	4413      	add	r3, r2
 80013fc:	881b      	ldrh	r3, [r3, #0]
 80013fe:	ee07 3a90 	vmov	s15, r3
 8001402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001406:	ee17 0a90 	vmov	r0, s15
 800140a:	f7ff f849 	bl	80004a0 <__aeabi_f2d>
 800140e:	f04f 0200 	mov.w	r2, #0
 8001412:	4b51      	ldr	r3, [pc, #324]	; (8001558 <Send_Cell_Voltage+0x2c0>)
 8001414:	f7ff f89c 	bl	8000550 <__aeabi_dmul>
 8001418:	4603      	mov	r3, r0
 800141a:	460c      	mov	r4, r1
 800141c:	4618      	mov	r0, r3
 800141e:	4621      	mov	r1, r4
 8001420:	a34b      	add	r3, pc, #300	; (adr r3, 8001550 <Send_Cell_Voltage+0x2b8>)
 8001422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001426:	f7fe fedd 	bl	80001e4 <__adddf3>
 800142a:	4603      	mov	r3, r0
 800142c:	460c      	mov	r4, r1
 800142e:	4618      	mov	r0, r3
 8001430:	4621      	mov	r1, r4
 8001432:	f7ff fb4f 	bl	8000ad4 <__aeabi_d2f>
 8001436:	4602      	mov	r2, r0
 8001438:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8001442:	440b      	add	r3, r1
 8001444:	3b28      	subs	r3, #40	; 0x28
 8001446:	601a      	str	r2, [r3, #0]
	for(int i=0; i<6; i++)
 8001448:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800144c:	3301      	adds	r3, #1
 800144e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001452:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001456:	2b05      	cmp	r3, #5
 8001458:	ddcb      	ble.n	80013f2 <Send_Cell_Voltage+0x15a>
	}

	  for(int i=0; i<6; i++)
 800145a:	2300      	movs	r3, #0
 800145c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001460:	e058      	b.n	8001514 <Send_Cell_Voltage+0x27c>
	  {
		  char buf[5];
		  gcvtf(Voltage[i],4,buf);
 8001462:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800146c:	4413      	add	r3, r2
 800146e:	3b28      	subs	r3, #40	; 0x28
 8001470:	edd3 7a00 	vldr	s15, [r3]
 8001474:	f107 030c 	add.w	r3, r7, #12
 8001478:	4619      	mov	r1, r3
 800147a:	2004      	movs	r0, #4
 800147c:	eeb0 0a67 	vmov.f32	s0, s15
 8001480:	f002 fea4 	bl	80041cc <gcvtf>
		  for(int k=0; k<5;k++)
 8001484:	2300      	movs	r3, #0
 8001486:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800148a:	e016      	b.n	80014ba <Send_Cell_Voltage+0x222>
		  {
			  UART_Data[counter] = buf[k];
 800148c:	f107 020c 	add.w	r2, r7, #12
 8001490:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001494:	4413      	add	r3, r2
 8001496:	7819      	ldrb	r1, [r3, #0]
 8001498:	f107 0214 	add.w	r2, r7, #20
 800149c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80014a0:	4413      	add	r3, r2
 80014a2:	460a      	mov	r2, r1
 80014a4:	701a      	strb	r2, [r3, #0]
			  counter++;
 80014a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80014aa:	3301      	adds	r3, #1
 80014ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		  for(int k=0; k<5;k++)
 80014b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80014b4:	3301      	adds	r3, #1
 80014b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80014ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80014be:	2b04      	cmp	r3, #4
 80014c0:	dde4      	ble.n	800148c <Send_Cell_Voltage+0x1f4>
		  }
		  if(i == 5)
 80014c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80014c6:	2b05      	cmp	r3, #5
 80014c8:	d113      	bne.n	80014f2 <Send_Cell_Voltage+0x25a>
		  {
			  UART_Data[counter] = ']';
 80014ca:	f107 0214 	add.w	r2, r7, #20
 80014ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80014d2:	4413      	add	r3, r2
 80014d4:	225d      	movs	r2, #93	; 0x5d
 80014d6:	701a      	strb	r2, [r3, #0]
			  counter++;
 80014d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80014dc:	3301      	adds	r3, #1
 80014de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			  UART_Data[counter] = '\n';
 80014e2:	f107 0214 	add.w	r2, r7, #20
 80014e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80014ea:	4413      	add	r3, r2
 80014ec:	220a      	movs	r2, #10
 80014ee:	701a      	strb	r2, [r3, #0]
 80014f0:	e00b      	b.n	800150a <Send_Cell_Voltage+0x272>
		  }
		  else
		  {
			  UART_Data[counter] = ',';
 80014f2:	f107 0214 	add.w	r2, r7, #20
 80014f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80014fa:	4413      	add	r3, r2
 80014fc:	222c      	movs	r2, #44	; 0x2c
 80014fe:	701a      	strb	r2, [r3, #0]
			  counter ++;
 8001500:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001504:	3301      	adds	r3, #1
 8001506:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	  for(int i=0; i<6; i++)
 800150a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800150e:	3301      	adds	r3, #1
 8001510:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001514:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001518:	2b05      	cmp	r3, #5
 800151a:	dda2      	ble.n	8001462 <Send_Cell_Voltage+0x1ca>
		  }
	  }

	  if(HAL_UART_Transmit(&huart2, (uint8_t*)UART_Data, strlen(UART_Data), HAL_MAX_DELAY)!= HAL_OK)
 800151c:	f107 0314 	add.w	r3, r7, #20
 8001520:	4618      	mov	r0, r3
 8001522:	f7fe fe51 	bl	80001c8 <strlen>
 8001526:	4603      	mov	r3, r0
 8001528:	b29a      	uxth	r2, r3
 800152a:	f107 0114 	add.w	r1, r7, #20
 800152e:	f04f 33ff 	mov.w	r3, #4294967295
 8001532:	480a      	ldr	r0, [pc, #40]	; (800155c <Send_Cell_Voltage+0x2c4>)
 8001534:	f002 f9bf 	bl	80038b6 <HAL_UART_Transmit>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <Send_Cell_Voltage+0x2aa>
	  {
		  Error_Handler();
 800153e:	f000 f80f 	bl	8001560 <Error_Handler>
	  }
}
 8001542:	bf00      	nop
 8001544:	37a4      	adds	r7, #164	; 0xa4
 8001546:	46bd      	mov	sp, r7
 8001548:	bd90      	pop	{r4, r7, pc}
 800154a:	bf00      	nop
 800154c:	f3af 8000 	nop.w
 8001550:	9999999a 	.word	0x9999999a
 8001554:	3fb99999 	.word	0x3fb99999
 8001558:	3f740000 	.word	0x3f740000
 800155c:	20000140 	.word	0x20000140

08001560 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001564:	bf00      	nop
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
	...

08001570 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	607b      	str	r3, [r7, #4]
 800157a:	4b10      	ldr	r3, [pc, #64]	; (80015bc <HAL_MspInit+0x4c>)
 800157c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157e:	4a0f      	ldr	r2, [pc, #60]	; (80015bc <HAL_MspInit+0x4c>)
 8001580:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001584:	6453      	str	r3, [r2, #68]	; 0x44
 8001586:	4b0d      	ldr	r3, [pc, #52]	; (80015bc <HAL_MspInit+0x4c>)
 8001588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800158e:	607b      	str	r3, [r7, #4]
 8001590:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	603b      	str	r3, [r7, #0]
 8001596:	4b09      	ldr	r3, [pc, #36]	; (80015bc <HAL_MspInit+0x4c>)
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159a:	4a08      	ldr	r2, [pc, #32]	; (80015bc <HAL_MspInit+0x4c>)
 800159c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a0:	6413      	str	r3, [r2, #64]	; 0x40
 80015a2:	4b06      	ldr	r3, [pc, #24]	; (80015bc <HAL_MspInit+0x4c>)
 80015a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015aa:	603b      	str	r3, [r7, #0]
 80015ac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80015ae:	2007      	movs	r0, #7
 80015b0:	f000 faa2 	bl	8001af8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015b4:	bf00      	nop
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	40023800 	.word	0x40023800

080015c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b08a      	sub	sp, #40	; 0x28
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c8:	f107 0314 	add.w	r3, r7, #20
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	60da      	str	r2, [r3, #12]
 80015d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a19      	ldr	r2, [pc, #100]	; (8001644 <HAL_SPI_MspInit+0x84>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d12c      	bne.n	800163c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	613b      	str	r3, [r7, #16]
 80015e6:	4b18      	ldr	r3, [pc, #96]	; (8001648 <HAL_SPI_MspInit+0x88>)
 80015e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ea:	4a17      	ldr	r2, [pc, #92]	; (8001648 <HAL_SPI_MspInit+0x88>)
 80015ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015f0:	6413      	str	r3, [r2, #64]	; 0x40
 80015f2:	4b15      	ldr	r3, [pc, #84]	; (8001648 <HAL_SPI_MspInit+0x88>)
 80015f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015fa:	613b      	str	r3, [r7, #16]
 80015fc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	60fb      	str	r3, [r7, #12]
 8001602:	4b11      	ldr	r3, [pc, #68]	; (8001648 <HAL_SPI_MspInit+0x88>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	4a10      	ldr	r2, [pc, #64]	; (8001648 <HAL_SPI_MspInit+0x88>)
 8001608:	f043 0302 	orr.w	r3, r3, #2
 800160c:	6313      	str	r3, [r2, #48]	; 0x30
 800160e:	4b0e      	ldr	r3, [pc, #56]	; (8001648 <HAL_SPI_MspInit+0x88>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800161a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800161e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001620:	2302      	movs	r3, #2
 8001622:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001624:	2300      	movs	r3, #0
 8001626:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001628:	2303      	movs	r3, #3
 800162a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800162c:	2305      	movs	r3, #5
 800162e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001630:	f107 0314 	add.w	r3, r7, #20
 8001634:	4619      	mov	r1, r3
 8001636:	4805      	ldr	r0, [pc, #20]	; (800164c <HAL_SPI_MspInit+0x8c>)
 8001638:	f000 faa0 	bl	8001b7c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800163c:	bf00      	nop
 800163e:	3728      	adds	r7, #40	; 0x28
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40003800 	.word	0x40003800
 8001648:	40023800 	.word	0x40023800
 800164c:	40020400 	.word	0x40020400

08001650 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001660:	d115      	bne.n	800168e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	60fb      	str	r3, [r7, #12]
 8001666:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <HAL_TIM_Base_MspInit+0x48>)
 8001668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166a:	4a0b      	ldr	r2, [pc, #44]	; (8001698 <HAL_TIM_Base_MspInit+0x48>)
 800166c:	f043 0301 	orr.w	r3, r3, #1
 8001670:	6413      	str	r3, [r2, #64]	; 0x40
 8001672:	4b09      	ldr	r3, [pc, #36]	; (8001698 <HAL_TIM_Base_MspInit+0x48>)
 8001674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800167e:	2200      	movs	r2, #0
 8001680:	2100      	movs	r1, #0
 8001682:	201c      	movs	r0, #28
 8001684:	f000 fa43 	bl	8001b0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001688:	201c      	movs	r0, #28
 800168a:	f000 fa5c 	bl	8001b46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800168e:	bf00      	nop
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	40023800 	.word	0x40023800

0800169c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b08a      	sub	sp, #40	; 0x28
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a4:	f107 0314 	add.w	r3, r7, #20
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	605a      	str	r2, [r3, #4]
 80016ae:	609a      	str	r2, [r3, #8]
 80016b0:	60da      	str	r2, [r3, #12]
 80016b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a19      	ldr	r2, [pc, #100]	; (8001720 <HAL_UART_MspInit+0x84>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d12b      	bne.n	8001716 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	613b      	str	r3, [r7, #16]
 80016c2:	4b18      	ldr	r3, [pc, #96]	; (8001724 <HAL_UART_MspInit+0x88>)
 80016c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c6:	4a17      	ldr	r2, [pc, #92]	; (8001724 <HAL_UART_MspInit+0x88>)
 80016c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016cc:	6413      	str	r3, [r2, #64]	; 0x40
 80016ce:	4b15      	ldr	r3, [pc, #84]	; (8001724 <HAL_UART_MspInit+0x88>)
 80016d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d6:	613b      	str	r3, [r7, #16]
 80016d8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	60fb      	str	r3, [r7, #12]
 80016de:	4b11      	ldr	r3, [pc, #68]	; (8001724 <HAL_UART_MspInit+0x88>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	4a10      	ldr	r2, [pc, #64]	; (8001724 <HAL_UART_MspInit+0x88>)
 80016e4:	f043 0301 	orr.w	r3, r3, #1
 80016e8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ea:	4b0e      	ldr	r3, [pc, #56]	; (8001724 <HAL_UART_MspInit+0x88>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80016f6:	230c      	movs	r3, #12
 80016f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fa:	2302      	movs	r3, #2
 80016fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fe:	2300      	movs	r3, #0
 8001700:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001702:	2303      	movs	r3, #3
 8001704:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001706:	2307      	movs	r3, #7
 8001708:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170a:	f107 0314 	add.w	r3, r7, #20
 800170e:	4619      	mov	r1, r3
 8001710:	4805      	ldr	r0, [pc, #20]	; (8001728 <HAL_UART_MspInit+0x8c>)
 8001712:	f000 fa33 	bl	8001b7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001716:	bf00      	nop
 8001718:	3728      	adds	r7, #40	; 0x28
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40004400 	.word	0x40004400
 8001724:	40023800 	.word	0x40023800
 8001728:	40020000 	.word	0x40020000

0800172c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800173a:	b480      	push	{r7}
 800173c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800173e:	e7fe      	b.n	800173e <HardFault_Handler+0x4>

08001740 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001744:	e7fe      	b.n	8001744 <MemManage_Handler+0x4>

08001746 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001746:	b480      	push	{r7}
 8001748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800174a:	e7fe      	b.n	800174a <BusFault_Handler+0x4>

0800174c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001750:	e7fe      	b.n	8001750 <UsageFault_Handler+0x4>

08001752 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001752:	b480      	push	{r7}
 8001754:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr

0800176e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800176e:	b480      	push	{r7}
 8001770:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001780:	f000 f8ca 	bl	8001918 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001784:	bf00      	nop
 8001786:	bd80      	pop	{r7, pc}

08001788 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800178c:	4802      	ldr	r0, [pc, #8]	; (8001798 <TIM2_IRQHandler+0x10>)
 800178e:	f001 fc94 	bl	80030ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	20000100 	.word	0x20000100

0800179c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80017a4:	4b11      	ldr	r3, [pc, #68]	; (80017ec <_sbrk+0x50>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d102      	bne.n	80017b2 <_sbrk+0x16>
		heap_end = &end;
 80017ac:	4b0f      	ldr	r3, [pc, #60]	; (80017ec <_sbrk+0x50>)
 80017ae:	4a10      	ldr	r2, [pc, #64]	; (80017f0 <_sbrk+0x54>)
 80017b0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80017b2:	4b0e      	ldr	r3, [pc, #56]	; (80017ec <_sbrk+0x50>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80017b8:	4b0c      	ldr	r3, [pc, #48]	; (80017ec <_sbrk+0x50>)
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	4413      	add	r3, r2
 80017c0:	466a      	mov	r2, sp
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d907      	bls.n	80017d6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80017c6:	f002 fd11 	bl	80041ec <__errno>
 80017ca:	4602      	mov	r2, r0
 80017cc:	230c      	movs	r3, #12
 80017ce:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80017d0:	f04f 33ff 	mov.w	r3, #4294967295
 80017d4:	e006      	b.n	80017e4 <_sbrk+0x48>
	}

	heap_end += incr;
 80017d6:	4b05      	ldr	r3, [pc, #20]	; (80017ec <_sbrk+0x50>)
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4413      	add	r3, r2
 80017de:	4a03      	ldr	r2, [pc, #12]	; (80017ec <_sbrk+0x50>)
 80017e0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80017e2:	68fb      	ldr	r3, [r7, #12]
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3710      	adds	r7, #16
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	20000090 	.word	0x20000090
 80017f0:	20000188 	.word	0x20000188

080017f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017f8:	4b08      	ldr	r3, [pc, #32]	; (800181c <SystemInit+0x28>)
 80017fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017fe:	4a07      	ldr	r2, [pc, #28]	; (800181c <SystemInit+0x28>)
 8001800:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001804:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001808:	4b04      	ldr	r3, [pc, #16]	; (800181c <SystemInit+0x28>)
 800180a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800180e:	609a      	str	r2, [r3, #8]
#endif
}
 8001810:	bf00      	nop
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	e000ed00 	.word	0xe000ed00

08001820 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001820:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001858 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001824:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001826:	e003      	b.n	8001830 <LoopCopyDataInit>

08001828 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001828:	4b0c      	ldr	r3, [pc, #48]	; (800185c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800182a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800182c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800182e:	3104      	adds	r1, #4

08001830 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001830:	480b      	ldr	r0, [pc, #44]	; (8001860 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001832:	4b0c      	ldr	r3, [pc, #48]	; (8001864 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001834:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001836:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001838:	d3f6      	bcc.n	8001828 <CopyDataInit>
  ldr  r2, =_sbss
 800183a:	4a0b      	ldr	r2, [pc, #44]	; (8001868 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800183c:	e002      	b.n	8001844 <LoopFillZerobss>

0800183e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800183e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001840:	f842 3b04 	str.w	r3, [r2], #4

08001844 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001844:	4b09      	ldr	r3, [pc, #36]	; (800186c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001846:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001848:	d3f9      	bcc.n	800183e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800184a:	f7ff ffd3 	bl	80017f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800184e:	f002 fcd3 	bl	80041f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001852:	f7ff fb0f 	bl	8000e74 <main>
  bx  lr    
 8001856:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001858:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800185c:	080059c4 	.word	0x080059c4
  ldr  r0, =_sdata
 8001860:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001864:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8001868:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 800186c:	20000188 	.word	0x20000188

08001870 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001870:	e7fe      	b.n	8001870 <ADC_IRQHandler>
	...

08001874 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001878:	4b0e      	ldr	r3, [pc, #56]	; (80018b4 <HAL_Init+0x40>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a0d      	ldr	r2, [pc, #52]	; (80018b4 <HAL_Init+0x40>)
 800187e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001882:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001884:	4b0b      	ldr	r3, [pc, #44]	; (80018b4 <HAL_Init+0x40>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a0a      	ldr	r2, [pc, #40]	; (80018b4 <HAL_Init+0x40>)
 800188a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800188e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001890:	4b08      	ldr	r3, [pc, #32]	; (80018b4 <HAL_Init+0x40>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a07      	ldr	r2, [pc, #28]	; (80018b4 <HAL_Init+0x40>)
 8001896:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800189a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800189c:	2003      	movs	r0, #3
 800189e:	f000 f92b 	bl	8001af8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018a2:	2000      	movs	r0, #0
 80018a4:	f000 f808 	bl	80018b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018a8:	f7ff fe62 	bl	8001570 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	40023c00 	.word	0x40023c00

080018b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018c0:	4b12      	ldr	r3, [pc, #72]	; (800190c <HAL_InitTick+0x54>)
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	4b12      	ldr	r3, [pc, #72]	; (8001910 <HAL_InitTick+0x58>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	4619      	mov	r1, r3
 80018ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80018d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018d6:	4618      	mov	r0, r3
 80018d8:	f000 f943 	bl	8001b62 <HAL_SYSTICK_Config>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e00e      	b.n	8001904 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2b0f      	cmp	r3, #15
 80018ea:	d80a      	bhi.n	8001902 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018ec:	2200      	movs	r2, #0
 80018ee:	6879      	ldr	r1, [r7, #4]
 80018f0:	f04f 30ff 	mov.w	r0, #4294967295
 80018f4:	f000 f90b 	bl	8001b0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018f8:	4a06      	ldr	r2, [pc, #24]	; (8001914 <HAL_InitTick+0x5c>)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018fe:	2300      	movs	r3, #0
 8001900:	e000      	b.n	8001904 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
}
 8001904:	4618      	mov	r0, r3
 8001906:	3708      	adds	r7, #8
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	20000000 	.word	0x20000000
 8001910:	20000008 	.word	0x20000008
 8001914:	20000004 	.word	0x20000004

08001918 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800191c:	4b06      	ldr	r3, [pc, #24]	; (8001938 <HAL_IncTick+0x20>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	461a      	mov	r2, r3
 8001922:	4b06      	ldr	r3, [pc, #24]	; (800193c <HAL_IncTick+0x24>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4413      	add	r3, r2
 8001928:	4a04      	ldr	r2, [pc, #16]	; (800193c <HAL_IncTick+0x24>)
 800192a:	6013      	str	r3, [r2, #0]
}
 800192c:	bf00      	nop
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	20000008 	.word	0x20000008
 800193c:	20000180 	.word	0x20000180

08001940 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  return uwTick;
 8001944:	4b03      	ldr	r3, [pc, #12]	; (8001954 <HAL_GetTick+0x14>)
 8001946:	681b      	ldr	r3, [r3, #0]
}
 8001948:	4618      	mov	r0, r3
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	20000180 	.word	0x20000180

08001958 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f003 0307 	and.w	r3, r3, #7
 8001966:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001968:	4b0c      	ldr	r3, [pc, #48]	; (800199c <__NVIC_SetPriorityGrouping+0x44>)
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800196e:	68ba      	ldr	r2, [r7, #8]
 8001970:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001974:	4013      	ands	r3, r2
 8001976:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001980:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001984:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001988:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800198a:	4a04      	ldr	r2, [pc, #16]	; (800199c <__NVIC_SetPriorityGrouping+0x44>)
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	60d3      	str	r3, [r2, #12]
}
 8001990:	bf00      	nop
 8001992:	3714      	adds	r7, #20
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019a4:	4b04      	ldr	r3, [pc, #16]	; (80019b8 <__NVIC_GetPriorityGrouping+0x18>)
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	0a1b      	lsrs	r3, r3, #8
 80019aa:	f003 0307 	and.w	r3, r3, #7
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	e000ed00 	.word	0xe000ed00

080019bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	4603      	mov	r3, r0
 80019c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	db0b      	blt.n	80019e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ce:	79fb      	ldrb	r3, [r7, #7]
 80019d0:	f003 021f 	and.w	r2, r3, #31
 80019d4:	4907      	ldr	r1, [pc, #28]	; (80019f4 <__NVIC_EnableIRQ+0x38>)
 80019d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019da:	095b      	lsrs	r3, r3, #5
 80019dc:	2001      	movs	r0, #1
 80019de:	fa00 f202 	lsl.w	r2, r0, r2
 80019e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019e6:	bf00      	nop
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	e000e100 	.word	0xe000e100

080019f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	6039      	str	r1, [r7, #0]
 8001a02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	db0a      	blt.n	8001a22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	b2da      	uxtb	r2, r3
 8001a10:	490c      	ldr	r1, [pc, #48]	; (8001a44 <__NVIC_SetPriority+0x4c>)
 8001a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a16:	0112      	lsls	r2, r2, #4
 8001a18:	b2d2      	uxtb	r2, r2
 8001a1a:	440b      	add	r3, r1
 8001a1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a20:	e00a      	b.n	8001a38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	b2da      	uxtb	r2, r3
 8001a26:	4908      	ldr	r1, [pc, #32]	; (8001a48 <__NVIC_SetPriority+0x50>)
 8001a28:	79fb      	ldrb	r3, [r7, #7]
 8001a2a:	f003 030f 	and.w	r3, r3, #15
 8001a2e:	3b04      	subs	r3, #4
 8001a30:	0112      	lsls	r2, r2, #4
 8001a32:	b2d2      	uxtb	r2, r2
 8001a34:	440b      	add	r3, r1
 8001a36:	761a      	strb	r2, [r3, #24]
}
 8001a38:	bf00      	nop
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	e000e100 	.word	0xe000e100
 8001a48:	e000ed00 	.word	0xe000ed00

08001a4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b089      	sub	sp, #36	; 0x24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f003 0307 	and.w	r3, r3, #7
 8001a5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	f1c3 0307 	rsb	r3, r3, #7
 8001a66:	2b04      	cmp	r3, #4
 8001a68:	bf28      	it	cs
 8001a6a:	2304      	movcs	r3, #4
 8001a6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	3304      	adds	r3, #4
 8001a72:	2b06      	cmp	r3, #6
 8001a74:	d902      	bls.n	8001a7c <NVIC_EncodePriority+0x30>
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	3b03      	subs	r3, #3
 8001a7a:	e000      	b.n	8001a7e <NVIC_EncodePriority+0x32>
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a80:	f04f 32ff 	mov.w	r2, #4294967295
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8a:	43da      	mvns	r2, r3
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	401a      	ands	r2, r3
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a94:	f04f 31ff 	mov.w	r1, #4294967295
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a9e:	43d9      	mvns	r1, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa4:	4313      	orrs	r3, r2
         );
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3724      	adds	r7, #36	; 0x24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
	...

08001ab4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	3b01      	subs	r3, #1
 8001ac0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ac4:	d301      	bcc.n	8001aca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e00f      	b.n	8001aea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aca:	4a0a      	ldr	r2, [pc, #40]	; (8001af4 <SysTick_Config+0x40>)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ad2:	210f      	movs	r1, #15
 8001ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad8:	f7ff ff8e 	bl	80019f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001adc:	4b05      	ldr	r3, [pc, #20]	; (8001af4 <SysTick_Config+0x40>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ae2:	4b04      	ldr	r3, [pc, #16]	; (8001af4 <SysTick_Config+0x40>)
 8001ae4:	2207      	movs	r2, #7
 8001ae6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	e000e010 	.word	0xe000e010

08001af8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f7ff ff29 	bl	8001958 <__NVIC_SetPriorityGrouping>
}
 8001b06:	bf00      	nop
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b086      	sub	sp, #24
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	4603      	mov	r3, r0
 8001b16:	60b9      	str	r1, [r7, #8]
 8001b18:	607a      	str	r2, [r7, #4]
 8001b1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b20:	f7ff ff3e 	bl	80019a0 <__NVIC_GetPriorityGrouping>
 8001b24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	68b9      	ldr	r1, [r7, #8]
 8001b2a:	6978      	ldr	r0, [r7, #20]
 8001b2c:	f7ff ff8e 	bl	8001a4c <NVIC_EncodePriority>
 8001b30:	4602      	mov	r2, r0
 8001b32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b36:	4611      	mov	r1, r2
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff ff5d 	bl	80019f8 <__NVIC_SetPriority>
}
 8001b3e:	bf00      	nop
 8001b40:	3718      	adds	r7, #24
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b082      	sub	sp, #8
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff ff31 	bl	80019bc <__NVIC_EnableIRQ>
}
 8001b5a:	bf00      	nop
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b082      	sub	sp, #8
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f7ff ffa2 	bl	8001ab4 <SysTick_Config>
 8001b70:	4603      	mov	r3, r0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
	...

08001b7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b089      	sub	sp, #36	; 0x24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b86:	2300      	movs	r3, #0
 8001b88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b92:	2300      	movs	r3, #0
 8001b94:	61fb      	str	r3, [r7, #28]
 8001b96:	e16b      	b.n	8001e70 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b98:	2201      	movs	r2, #1
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	697a      	ldr	r2, [r7, #20]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bac:	693a      	ldr	r2, [r7, #16]
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	f040 815a 	bne.w	8001e6a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d00b      	beq.n	8001bd6 <HAL_GPIO_Init+0x5a>
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d007      	beq.n	8001bd6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bca:	2b11      	cmp	r3, #17
 8001bcc:	d003      	beq.n	8001bd6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	2b12      	cmp	r3, #18
 8001bd4:	d130      	bne.n	8001c38 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	2203      	movs	r2, #3
 8001be2:	fa02 f303 	lsl.w	r3, r2, r3
 8001be6:	43db      	mvns	r3, r3
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	4013      	ands	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	68da      	ldr	r2, [r3, #12]
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	69ba      	ldr	r2, [r7, #24]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	43db      	mvns	r3, r3
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	091b      	lsrs	r3, r3, #4
 8001c22:	f003 0201 	and.w	r2, r3, #1
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	2203      	movs	r2, #3
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	689a      	ldr	r2, [r3, #8]
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d003      	beq.n	8001c78 <HAL_GPIO_Init+0xfc>
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	2b12      	cmp	r3, #18
 8001c76:	d123      	bne.n	8001cc0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	08da      	lsrs	r2, r3, #3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	3208      	adds	r2, #8
 8001c80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	f003 0307 	and.w	r3, r3, #7
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	220f      	movs	r2, #15
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	43db      	mvns	r3, r3
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	4013      	ands	r3, r2
 8001c9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	691a      	ldr	r2, [r3, #16]
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	f003 0307 	and.w	r3, r3, #7
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	08da      	lsrs	r2, r3, #3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	3208      	adds	r2, #8
 8001cba:	69b9      	ldr	r1, [r7, #24]
 8001cbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	2203      	movs	r2, #3
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f003 0203 	and.w	r2, r3, #3
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	f000 80b4 	beq.w	8001e6a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d02:	2300      	movs	r3, #0
 8001d04:	60fb      	str	r3, [r7, #12]
 8001d06:	4b5f      	ldr	r3, [pc, #380]	; (8001e84 <HAL_GPIO_Init+0x308>)
 8001d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0a:	4a5e      	ldr	r2, [pc, #376]	; (8001e84 <HAL_GPIO_Init+0x308>)
 8001d0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d10:	6453      	str	r3, [r2, #68]	; 0x44
 8001d12:	4b5c      	ldr	r3, [pc, #368]	; (8001e84 <HAL_GPIO_Init+0x308>)
 8001d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d1a:	60fb      	str	r3, [r7, #12]
 8001d1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d1e:	4a5a      	ldr	r2, [pc, #360]	; (8001e88 <HAL_GPIO_Init+0x30c>)
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	089b      	lsrs	r3, r3, #2
 8001d24:	3302      	adds	r3, #2
 8001d26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	f003 0303 	and.w	r3, r3, #3
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	220f      	movs	r2, #15
 8001d36:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3a:	43db      	mvns	r3, r3
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a51      	ldr	r2, [pc, #324]	; (8001e8c <HAL_GPIO_Init+0x310>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d02b      	beq.n	8001da2 <HAL_GPIO_Init+0x226>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a50      	ldr	r2, [pc, #320]	; (8001e90 <HAL_GPIO_Init+0x314>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d025      	beq.n	8001d9e <HAL_GPIO_Init+0x222>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a4f      	ldr	r2, [pc, #316]	; (8001e94 <HAL_GPIO_Init+0x318>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d01f      	beq.n	8001d9a <HAL_GPIO_Init+0x21e>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a4e      	ldr	r2, [pc, #312]	; (8001e98 <HAL_GPIO_Init+0x31c>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d019      	beq.n	8001d96 <HAL_GPIO_Init+0x21a>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a4d      	ldr	r2, [pc, #308]	; (8001e9c <HAL_GPIO_Init+0x320>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d013      	beq.n	8001d92 <HAL_GPIO_Init+0x216>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a4c      	ldr	r2, [pc, #304]	; (8001ea0 <HAL_GPIO_Init+0x324>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d00d      	beq.n	8001d8e <HAL_GPIO_Init+0x212>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a4b      	ldr	r2, [pc, #300]	; (8001ea4 <HAL_GPIO_Init+0x328>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d007      	beq.n	8001d8a <HAL_GPIO_Init+0x20e>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a4a      	ldr	r2, [pc, #296]	; (8001ea8 <HAL_GPIO_Init+0x32c>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d101      	bne.n	8001d86 <HAL_GPIO_Init+0x20a>
 8001d82:	2307      	movs	r3, #7
 8001d84:	e00e      	b.n	8001da4 <HAL_GPIO_Init+0x228>
 8001d86:	2308      	movs	r3, #8
 8001d88:	e00c      	b.n	8001da4 <HAL_GPIO_Init+0x228>
 8001d8a:	2306      	movs	r3, #6
 8001d8c:	e00a      	b.n	8001da4 <HAL_GPIO_Init+0x228>
 8001d8e:	2305      	movs	r3, #5
 8001d90:	e008      	b.n	8001da4 <HAL_GPIO_Init+0x228>
 8001d92:	2304      	movs	r3, #4
 8001d94:	e006      	b.n	8001da4 <HAL_GPIO_Init+0x228>
 8001d96:	2303      	movs	r3, #3
 8001d98:	e004      	b.n	8001da4 <HAL_GPIO_Init+0x228>
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	e002      	b.n	8001da4 <HAL_GPIO_Init+0x228>
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e000      	b.n	8001da4 <HAL_GPIO_Init+0x228>
 8001da2:	2300      	movs	r3, #0
 8001da4:	69fa      	ldr	r2, [r7, #28]
 8001da6:	f002 0203 	and.w	r2, r2, #3
 8001daa:	0092      	lsls	r2, r2, #2
 8001dac:	4093      	lsls	r3, r2
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001db4:	4934      	ldr	r1, [pc, #208]	; (8001e88 <HAL_GPIO_Init+0x30c>)
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	089b      	lsrs	r3, r3, #2
 8001dba:	3302      	adds	r3, #2
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dc2:	4b3a      	ldr	r3, [pc, #232]	; (8001eac <HAL_GPIO_Init+0x330>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	43db      	mvns	r3, r3
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d003      	beq.n	8001de6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001de6:	4a31      	ldr	r2, [pc, #196]	; (8001eac <HAL_GPIO_Init+0x330>)
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001dec:	4b2f      	ldr	r3, [pc, #188]	; (8001eac <HAL_GPIO_Init+0x330>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	43db      	mvns	r3, r3
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d003      	beq.n	8001e10 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e10:	4a26      	ldr	r2, [pc, #152]	; (8001eac <HAL_GPIO_Init+0x330>)
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e16:	4b25      	ldr	r3, [pc, #148]	; (8001eac <HAL_GPIO_Init+0x330>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	43db      	mvns	r3, r3
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	4013      	ands	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d003      	beq.n	8001e3a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e3a:	4a1c      	ldr	r2, [pc, #112]	; (8001eac <HAL_GPIO_Init+0x330>)
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e40:	4b1a      	ldr	r3, [pc, #104]	; (8001eac <HAL_GPIO_Init+0x330>)
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d003      	beq.n	8001e64 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e64:	4a11      	ldr	r2, [pc, #68]	; (8001eac <HAL_GPIO_Init+0x330>)
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	61fb      	str	r3, [r7, #28]
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	2b0f      	cmp	r3, #15
 8001e74:	f67f ae90 	bls.w	8001b98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e78:	bf00      	nop
 8001e7a:	3724      	adds	r7, #36	; 0x24
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr
 8001e84:	40023800 	.word	0x40023800
 8001e88:	40013800 	.word	0x40013800
 8001e8c:	40020000 	.word	0x40020000
 8001e90:	40020400 	.word	0x40020400
 8001e94:	40020800 	.word	0x40020800
 8001e98:	40020c00 	.word	0x40020c00
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	40021400 	.word	0x40021400
 8001ea4:	40021800 	.word	0x40021800
 8001ea8:	40021c00 	.word	0x40021c00
 8001eac:	40013c00 	.word	0x40013c00

08001eb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	460b      	mov	r3, r1
 8001eba:	807b      	strh	r3, [r7, #2]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ec0:	787b      	ldrb	r3, [r7, #1]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d003      	beq.n	8001ece <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ec6:	887a      	ldrh	r2, [r7, #2]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ecc:	e003      	b.n	8001ed6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ece:	887b      	ldrh	r3, [r7, #2]
 8001ed0:	041a      	lsls	r2, r3, #16
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	619a      	str	r2, [r3, #24]
}
 8001ed6:	bf00      	nop
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr

08001ee2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	b083      	sub	sp, #12
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
 8001eea:	460b      	mov	r3, r1
 8001eec:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	695a      	ldr	r2, [r3, #20]
 8001ef2:	887b      	ldrh	r3, [r7, #2]
 8001ef4:	401a      	ands	r2, r3
 8001ef6:	887b      	ldrh	r3, [r7, #2]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d104      	bne.n	8001f06 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001efc:	887b      	ldrh	r3, [r7, #2]
 8001efe:	041a      	lsls	r2, r3, #16
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001f04:	e002      	b.n	8001f0c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001f06:	887a      	ldrh	r2, [r7, #2]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	619a      	str	r2, [r3, #24]
}
 8001f0c:	bf00      	nop
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b086      	sub	sp, #24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d101      	bne.n	8001f2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e25b      	b.n	80023e2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d075      	beq.n	8002022 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f36:	4ba3      	ldr	r3, [pc, #652]	; (80021c4 <HAL_RCC_OscConfig+0x2ac>)
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	f003 030c 	and.w	r3, r3, #12
 8001f3e:	2b04      	cmp	r3, #4
 8001f40:	d00c      	beq.n	8001f5c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f42:	4ba0      	ldr	r3, [pc, #640]	; (80021c4 <HAL_RCC_OscConfig+0x2ac>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f4a:	2b08      	cmp	r3, #8
 8001f4c:	d112      	bne.n	8001f74 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f4e:	4b9d      	ldr	r3, [pc, #628]	; (80021c4 <HAL_RCC_OscConfig+0x2ac>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f5a:	d10b      	bne.n	8001f74 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f5c:	4b99      	ldr	r3, [pc, #612]	; (80021c4 <HAL_RCC_OscConfig+0x2ac>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d05b      	beq.n	8002020 <HAL_RCC_OscConfig+0x108>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d157      	bne.n	8002020 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e236      	b.n	80023e2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f7c:	d106      	bne.n	8001f8c <HAL_RCC_OscConfig+0x74>
 8001f7e:	4b91      	ldr	r3, [pc, #580]	; (80021c4 <HAL_RCC_OscConfig+0x2ac>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a90      	ldr	r2, [pc, #576]	; (80021c4 <HAL_RCC_OscConfig+0x2ac>)
 8001f84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f88:	6013      	str	r3, [r2, #0]
 8001f8a:	e01d      	b.n	8001fc8 <HAL_RCC_OscConfig+0xb0>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f94:	d10c      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x98>
 8001f96:	4b8b      	ldr	r3, [pc, #556]	; (80021c4 <HAL_RCC_OscConfig+0x2ac>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a8a      	ldr	r2, [pc, #552]	; (80021c4 <HAL_RCC_OscConfig+0x2ac>)
 8001f9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fa0:	6013      	str	r3, [r2, #0]
 8001fa2:	4b88      	ldr	r3, [pc, #544]	; (80021c4 <HAL_RCC_OscConfig+0x2ac>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a87      	ldr	r2, [pc, #540]	; (80021c4 <HAL_RCC_OscConfig+0x2ac>)
 8001fa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fac:	6013      	str	r3, [r2, #0]
 8001fae:	e00b      	b.n	8001fc8 <HAL_RCC_OscConfig+0xb0>
 8001fb0:	4b84      	ldr	r3, [pc, #528]	; (80021c4 <HAL_RCC_OscConfig+0x2ac>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a83      	ldr	r2, [pc, #524]	; (80021c4 <HAL_RCC_OscConfig+0x2ac>)
 8001fb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fba:	6013      	str	r3, [r2, #0]
 8001fbc:	4b81      	ldr	r3, [pc, #516]	; (80021c4 <HAL_RCC_OscConfig+0x2ac>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a80      	ldr	r2, [pc, #512]	; (80021c4 <HAL_RCC_OscConfig+0x2ac>)
 8001fc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d013      	beq.n	8001ff8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd0:	f7ff fcb6 	bl	8001940 <HAL_GetTick>
 8001fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fd6:	e008      	b.n	8001fea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fd8:	f7ff fcb2 	bl	8001940 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b64      	cmp	r3, #100	; 0x64
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e1fb      	b.n	80023e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fea:	4b76      	ldr	r3, [pc, #472]	; (80021c4 <HAL_RCC_OscConfig+0x2ac>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d0f0      	beq.n	8001fd8 <HAL_RCC_OscConfig+0xc0>
 8001ff6:	e014      	b.n	8002022 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff8:	f7ff fca2 	bl	8001940 <HAL_GetTick>
 8001ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ffe:	e008      	b.n	8002012 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002000:	f7ff fc9e 	bl	8001940 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b64      	cmp	r3, #100	; 0x64
 800200c:	d901      	bls.n	8002012 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e1e7      	b.n	80023e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002012:	4b6c      	ldr	r3, [pc, #432]	; (80021c4 <HAL_RCC_OscConfig+0x2ac>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1f0      	bne.n	8002000 <HAL_RCC_OscConfig+0xe8>
 800201e:	e000      	b.n	8002022 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002020:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d063      	beq.n	80020f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800202e:	4b65      	ldr	r3, [pc, #404]	; (80021c4 <HAL_RCC_OscConfig+0x2ac>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f003 030c 	and.w	r3, r3, #12
 8002036:	2b00      	cmp	r3, #0
 8002038:	d00b      	beq.n	8002052 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800203a:	4b62      	ldr	r3, [pc, #392]	; (80021c4 <HAL_RCC_OscConfig+0x2ac>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002042:	2b08      	cmp	r3, #8
 8002044:	d11c      	bne.n	8002080 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002046:	4b5f      	ldr	r3, [pc, #380]	; (80021c4 <HAL_RCC_OscConfig+0x2ac>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d116      	bne.n	8002080 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002052:	4b5c      	ldr	r3, [pc, #368]	; (80021c4 <HAL_RCC_OscConfig+0x2ac>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d005      	beq.n	800206a <HAL_RCC_OscConfig+0x152>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d001      	beq.n	800206a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e1bb      	b.n	80023e2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800206a:	4b56      	ldr	r3, [pc, #344]	; (80021c4 <HAL_RCC_OscConfig+0x2ac>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	4952      	ldr	r1, [pc, #328]	; (80021c4 <HAL_RCC_OscConfig+0x2ac>)
 800207a:	4313      	orrs	r3, r2
 800207c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800207e:	e03a      	b.n	80020f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d020      	beq.n	80020ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002088:	4b4f      	ldr	r3, [pc, #316]	; (80021c8 <HAL_RCC_OscConfig+0x2b0>)
 800208a:	2201      	movs	r2, #1
 800208c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800208e:	f7ff fc57 	bl	8001940 <HAL_GetTick>
 8002092:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002094:	e008      	b.n	80020a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002096:	f7ff fc53 	bl	8001940 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d901      	bls.n	80020a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e19c      	b.n	80023e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020a8:	4b46      	ldr	r3, [pc, #280]	; (80021c4 <HAL_RCC_OscConfig+0x2ac>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0302 	and.w	r3, r3, #2
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d0f0      	beq.n	8002096 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020b4:	4b43      	ldr	r3, [pc, #268]	; (80021c4 <HAL_RCC_OscConfig+0x2ac>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	691b      	ldr	r3, [r3, #16]
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	4940      	ldr	r1, [pc, #256]	; (80021c4 <HAL_RCC_OscConfig+0x2ac>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	600b      	str	r3, [r1, #0]
 80020c8:	e015      	b.n	80020f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020ca:	4b3f      	ldr	r3, [pc, #252]	; (80021c8 <HAL_RCC_OscConfig+0x2b0>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d0:	f7ff fc36 	bl	8001940 <HAL_GetTick>
 80020d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020d6:	e008      	b.n	80020ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020d8:	f7ff fc32 	bl	8001940 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e17b      	b.n	80023e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ea:	4b36      	ldr	r3, [pc, #216]	; (80021c4 <HAL_RCC_OscConfig+0x2ac>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d1f0      	bne.n	80020d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0308 	and.w	r3, r3, #8
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d030      	beq.n	8002164 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	695b      	ldr	r3, [r3, #20]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d016      	beq.n	8002138 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800210a:	4b30      	ldr	r3, [pc, #192]	; (80021cc <HAL_RCC_OscConfig+0x2b4>)
 800210c:	2201      	movs	r2, #1
 800210e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002110:	f7ff fc16 	bl	8001940 <HAL_GetTick>
 8002114:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002116:	e008      	b.n	800212a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002118:	f7ff fc12 	bl	8001940 <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b02      	cmp	r3, #2
 8002124:	d901      	bls.n	800212a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e15b      	b.n	80023e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800212a:	4b26      	ldr	r3, [pc, #152]	; (80021c4 <HAL_RCC_OscConfig+0x2ac>)
 800212c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	2b00      	cmp	r3, #0
 8002134:	d0f0      	beq.n	8002118 <HAL_RCC_OscConfig+0x200>
 8002136:	e015      	b.n	8002164 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002138:	4b24      	ldr	r3, [pc, #144]	; (80021cc <HAL_RCC_OscConfig+0x2b4>)
 800213a:	2200      	movs	r2, #0
 800213c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800213e:	f7ff fbff 	bl	8001940 <HAL_GetTick>
 8002142:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002144:	e008      	b.n	8002158 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002146:	f7ff fbfb 	bl	8001940 <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	2b02      	cmp	r3, #2
 8002152:	d901      	bls.n	8002158 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e144      	b.n	80023e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002158:	4b1a      	ldr	r3, [pc, #104]	; (80021c4 <HAL_RCC_OscConfig+0x2ac>)
 800215a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800215c:	f003 0302 	and.w	r3, r3, #2
 8002160:	2b00      	cmp	r3, #0
 8002162:	d1f0      	bne.n	8002146 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0304 	and.w	r3, r3, #4
 800216c:	2b00      	cmp	r3, #0
 800216e:	f000 80a0 	beq.w	80022b2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002172:	2300      	movs	r3, #0
 8002174:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002176:	4b13      	ldr	r3, [pc, #76]	; (80021c4 <HAL_RCC_OscConfig+0x2ac>)
 8002178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d10f      	bne.n	80021a2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002182:	2300      	movs	r3, #0
 8002184:	60bb      	str	r3, [r7, #8]
 8002186:	4b0f      	ldr	r3, [pc, #60]	; (80021c4 <HAL_RCC_OscConfig+0x2ac>)
 8002188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218a:	4a0e      	ldr	r2, [pc, #56]	; (80021c4 <HAL_RCC_OscConfig+0x2ac>)
 800218c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002190:	6413      	str	r3, [r2, #64]	; 0x40
 8002192:	4b0c      	ldr	r3, [pc, #48]	; (80021c4 <HAL_RCC_OscConfig+0x2ac>)
 8002194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800219a:	60bb      	str	r3, [r7, #8]
 800219c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800219e:	2301      	movs	r3, #1
 80021a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021a2:	4b0b      	ldr	r3, [pc, #44]	; (80021d0 <HAL_RCC_OscConfig+0x2b8>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d121      	bne.n	80021f2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021ae:	4b08      	ldr	r3, [pc, #32]	; (80021d0 <HAL_RCC_OscConfig+0x2b8>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a07      	ldr	r2, [pc, #28]	; (80021d0 <HAL_RCC_OscConfig+0x2b8>)
 80021b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021ba:	f7ff fbc1 	bl	8001940 <HAL_GetTick>
 80021be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c0:	e011      	b.n	80021e6 <HAL_RCC_OscConfig+0x2ce>
 80021c2:	bf00      	nop
 80021c4:	40023800 	.word	0x40023800
 80021c8:	42470000 	.word	0x42470000
 80021cc:	42470e80 	.word	0x42470e80
 80021d0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021d4:	f7ff fbb4 	bl	8001940 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e0fd      	b.n	80023e2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021e6:	4b81      	ldr	r3, [pc, #516]	; (80023ec <HAL_RCC_OscConfig+0x4d4>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d0f0      	beq.n	80021d4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d106      	bne.n	8002208 <HAL_RCC_OscConfig+0x2f0>
 80021fa:	4b7d      	ldr	r3, [pc, #500]	; (80023f0 <HAL_RCC_OscConfig+0x4d8>)
 80021fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021fe:	4a7c      	ldr	r2, [pc, #496]	; (80023f0 <HAL_RCC_OscConfig+0x4d8>)
 8002200:	f043 0301 	orr.w	r3, r3, #1
 8002204:	6713      	str	r3, [r2, #112]	; 0x70
 8002206:	e01c      	b.n	8002242 <HAL_RCC_OscConfig+0x32a>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	2b05      	cmp	r3, #5
 800220e:	d10c      	bne.n	800222a <HAL_RCC_OscConfig+0x312>
 8002210:	4b77      	ldr	r3, [pc, #476]	; (80023f0 <HAL_RCC_OscConfig+0x4d8>)
 8002212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002214:	4a76      	ldr	r2, [pc, #472]	; (80023f0 <HAL_RCC_OscConfig+0x4d8>)
 8002216:	f043 0304 	orr.w	r3, r3, #4
 800221a:	6713      	str	r3, [r2, #112]	; 0x70
 800221c:	4b74      	ldr	r3, [pc, #464]	; (80023f0 <HAL_RCC_OscConfig+0x4d8>)
 800221e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002220:	4a73      	ldr	r2, [pc, #460]	; (80023f0 <HAL_RCC_OscConfig+0x4d8>)
 8002222:	f043 0301 	orr.w	r3, r3, #1
 8002226:	6713      	str	r3, [r2, #112]	; 0x70
 8002228:	e00b      	b.n	8002242 <HAL_RCC_OscConfig+0x32a>
 800222a:	4b71      	ldr	r3, [pc, #452]	; (80023f0 <HAL_RCC_OscConfig+0x4d8>)
 800222c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800222e:	4a70      	ldr	r2, [pc, #448]	; (80023f0 <HAL_RCC_OscConfig+0x4d8>)
 8002230:	f023 0301 	bic.w	r3, r3, #1
 8002234:	6713      	str	r3, [r2, #112]	; 0x70
 8002236:	4b6e      	ldr	r3, [pc, #440]	; (80023f0 <HAL_RCC_OscConfig+0x4d8>)
 8002238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800223a:	4a6d      	ldr	r2, [pc, #436]	; (80023f0 <HAL_RCC_OscConfig+0x4d8>)
 800223c:	f023 0304 	bic.w	r3, r3, #4
 8002240:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d015      	beq.n	8002276 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800224a:	f7ff fb79 	bl	8001940 <HAL_GetTick>
 800224e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002250:	e00a      	b.n	8002268 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002252:	f7ff fb75 	bl	8001940 <HAL_GetTick>
 8002256:	4602      	mov	r2, r0
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002260:	4293      	cmp	r3, r2
 8002262:	d901      	bls.n	8002268 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e0bc      	b.n	80023e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002268:	4b61      	ldr	r3, [pc, #388]	; (80023f0 <HAL_RCC_OscConfig+0x4d8>)
 800226a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800226c:	f003 0302 	and.w	r3, r3, #2
 8002270:	2b00      	cmp	r3, #0
 8002272:	d0ee      	beq.n	8002252 <HAL_RCC_OscConfig+0x33a>
 8002274:	e014      	b.n	80022a0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002276:	f7ff fb63 	bl	8001940 <HAL_GetTick>
 800227a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800227c:	e00a      	b.n	8002294 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800227e:	f7ff fb5f 	bl	8001940 <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	f241 3288 	movw	r2, #5000	; 0x1388
 800228c:	4293      	cmp	r3, r2
 800228e:	d901      	bls.n	8002294 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	e0a6      	b.n	80023e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002294:	4b56      	ldr	r3, [pc, #344]	; (80023f0 <HAL_RCC_OscConfig+0x4d8>)
 8002296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002298:	f003 0302 	and.w	r3, r3, #2
 800229c:	2b00      	cmp	r3, #0
 800229e:	d1ee      	bne.n	800227e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022a0:	7dfb      	ldrb	r3, [r7, #23]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d105      	bne.n	80022b2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022a6:	4b52      	ldr	r3, [pc, #328]	; (80023f0 <HAL_RCC_OscConfig+0x4d8>)
 80022a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022aa:	4a51      	ldr	r2, [pc, #324]	; (80023f0 <HAL_RCC_OscConfig+0x4d8>)
 80022ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	699b      	ldr	r3, [r3, #24]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	f000 8092 	beq.w	80023e0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022bc:	4b4c      	ldr	r3, [pc, #304]	; (80023f0 <HAL_RCC_OscConfig+0x4d8>)
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f003 030c 	and.w	r3, r3, #12
 80022c4:	2b08      	cmp	r3, #8
 80022c6:	d05c      	beq.n	8002382 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	699b      	ldr	r3, [r3, #24]
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d141      	bne.n	8002354 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022d0:	4b48      	ldr	r3, [pc, #288]	; (80023f4 <HAL_RCC_OscConfig+0x4dc>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d6:	f7ff fb33 	bl	8001940 <HAL_GetTick>
 80022da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022dc:	e008      	b.n	80022f0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022de:	f7ff fb2f 	bl	8001940 <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d901      	bls.n	80022f0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e078      	b.n	80023e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022f0:	4b3f      	ldr	r3, [pc, #252]	; (80023f0 <HAL_RCC_OscConfig+0x4d8>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d1f0      	bne.n	80022de <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	69da      	ldr	r2, [r3, #28]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a1b      	ldr	r3, [r3, #32]
 8002304:	431a      	orrs	r2, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230a:	019b      	lsls	r3, r3, #6
 800230c:	431a      	orrs	r2, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002312:	085b      	lsrs	r3, r3, #1
 8002314:	3b01      	subs	r3, #1
 8002316:	041b      	lsls	r3, r3, #16
 8002318:	431a      	orrs	r2, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800231e:	061b      	lsls	r3, r3, #24
 8002320:	4933      	ldr	r1, [pc, #204]	; (80023f0 <HAL_RCC_OscConfig+0x4d8>)
 8002322:	4313      	orrs	r3, r2
 8002324:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002326:	4b33      	ldr	r3, [pc, #204]	; (80023f4 <HAL_RCC_OscConfig+0x4dc>)
 8002328:	2201      	movs	r2, #1
 800232a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800232c:	f7ff fb08 	bl	8001940 <HAL_GetTick>
 8002330:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002332:	e008      	b.n	8002346 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002334:	f7ff fb04 	bl	8001940 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	2b02      	cmp	r3, #2
 8002340:	d901      	bls.n	8002346 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e04d      	b.n	80023e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002346:	4b2a      	ldr	r3, [pc, #168]	; (80023f0 <HAL_RCC_OscConfig+0x4d8>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d0f0      	beq.n	8002334 <HAL_RCC_OscConfig+0x41c>
 8002352:	e045      	b.n	80023e0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002354:	4b27      	ldr	r3, [pc, #156]	; (80023f4 <HAL_RCC_OscConfig+0x4dc>)
 8002356:	2200      	movs	r2, #0
 8002358:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800235a:	f7ff faf1 	bl	8001940 <HAL_GetTick>
 800235e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002360:	e008      	b.n	8002374 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002362:	f7ff faed 	bl	8001940 <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	2b02      	cmp	r3, #2
 800236e:	d901      	bls.n	8002374 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	e036      	b.n	80023e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002374:	4b1e      	ldr	r3, [pc, #120]	; (80023f0 <HAL_RCC_OscConfig+0x4d8>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d1f0      	bne.n	8002362 <HAL_RCC_OscConfig+0x44a>
 8002380:	e02e      	b.n	80023e0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d101      	bne.n	800238e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e029      	b.n	80023e2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800238e:	4b18      	ldr	r3, [pc, #96]	; (80023f0 <HAL_RCC_OscConfig+0x4d8>)
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	69db      	ldr	r3, [r3, #28]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d11c      	bne.n	80023dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d115      	bne.n	80023dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80023b0:	68fa      	ldr	r2, [r7, #12]
 80023b2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80023b6:	4013      	ands	r3, r2
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023bc:	4293      	cmp	r3, r2
 80023be:	d10d      	bne.n	80023dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d106      	bne.n	80023dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80023d8:	429a      	cmp	r2, r3
 80023da:	d001      	beq.n	80023e0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e000      	b.n	80023e2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3718      	adds	r7, #24
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	40007000 	.word	0x40007000
 80023f0:	40023800 	.word	0x40023800
 80023f4:	42470060 	.word	0x42470060

080023f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d101      	bne.n	800240c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e0cc      	b.n	80025a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800240c:	4b68      	ldr	r3, [pc, #416]	; (80025b0 <HAL_RCC_ClockConfig+0x1b8>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 030f 	and.w	r3, r3, #15
 8002414:	683a      	ldr	r2, [r7, #0]
 8002416:	429a      	cmp	r2, r3
 8002418:	d90c      	bls.n	8002434 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800241a:	4b65      	ldr	r3, [pc, #404]	; (80025b0 <HAL_RCC_ClockConfig+0x1b8>)
 800241c:	683a      	ldr	r2, [r7, #0]
 800241e:	b2d2      	uxtb	r2, r2
 8002420:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002422:	4b63      	ldr	r3, [pc, #396]	; (80025b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 030f 	and.w	r3, r3, #15
 800242a:	683a      	ldr	r2, [r7, #0]
 800242c:	429a      	cmp	r2, r3
 800242e:	d001      	beq.n	8002434 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e0b8      	b.n	80025a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d020      	beq.n	8002482 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0304 	and.w	r3, r3, #4
 8002448:	2b00      	cmp	r3, #0
 800244a:	d005      	beq.n	8002458 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800244c:	4b59      	ldr	r3, [pc, #356]	; (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	4a58      	ldr	r2, [pc, #352]	; (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002452:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002456:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0308 	and.w	r3, r3, #8
 8002460:	2b00      	cmp	r3, #0
 8002462:	d005      	beq.n	8002470 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002464:	4b53      	ldr	r3, [pc, #332]	; (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	4a52      	ldr	r2, [pc, #328]	; (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 800246a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800246e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002470:	4b50      	ldr	r3, [pc, #320]	; (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	494d      	ldr	r1, [pc, #308]	; (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 800247e:	4313      	orrs	r3, r2
 8002480:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	2b00      	cmp	r3, #0
 800248c:	d044      	beq.n	8002518 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	2b01      	cmp	r3, #1
 8002494:	d107      	bne.n	80024a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002496:	4b47      	ldr	r3, [pc, #284]	; (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d119      	bne.n	80024d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e07f      	b.n	80025a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d003      	beq.n	80024b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024b2:	2b03      	cmp	r3, #3
 80024b4:	d107      	bne.n	80024c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024b6:	4b3f      	ldr	r3, [pc, #252]	; (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d109      	bne.n	80024d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e06f      	b.n	80025a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024c6:	4b3b      	ldr	r3, [pc, #236]	; (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d101      	bne.n	80024d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e067      	b.n	80025a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024d6:	4b37      	ldr	r3, [pc, #220]	; (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f023 0203 	bic.w	r2, r3, #3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	4934      	ldr	r1, [pc, #208]	; (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024e8:	f7ff fa2a 	bl	8001940 <HAL_GetTick>
 80024ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ee:	e00a      	b.n	8002506 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024f0:	f7ff fa26 	bl	8001940 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80024fe:	4293      	cmp	r3, r2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e04f      	b.n	80025a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002506:	4b2b      	ldr	r3, [pc, #172]	; (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f003 020c 	and.w	r2, r3, #12
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	429a      	cmp	r2, r3
 8002516:	d1eb      	bne.n	80024f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002518:	4b25      	ldr	r3, [pc, #148]	; (80025b0 <HAL_RCC_ClockConfig+0x1b8>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 030f 	and.w	r3, r3, #15
 8002520:	683a      	ldr	r2, [r7, #0]
 8002522:	429a      	cmp	r2, r3
 8002524:	d20c      	bcs.n	8002540 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002526:	4b22      	ldr	r3, [pc, #136]	; (80025b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	b2d2      	uxtb	r2, r2
 800252c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800252e:	4b20      	ldr	r3, [pc, #128]	; (80025b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 030f 	and.w	r3, r3, #15
 8002536:	683a      	ldr	r2, [r7, #0]
 8002538:	429a      	cmp	r2, r3
 800253a:	d001      	beq.n	8002540 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e032      	b.n	80025a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0304 	and.w	r3, r3, #4
 8002548:	2b00      	cmp	r3, #0
 800254a:	d008      	beq.n	800255e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800254c:	4b19      	ldr	r3, [pc, #100]	; (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	4916      	ldr	r1, [pc, #88]	; (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 800255a:	4313      	orrs	r3, r2
 800255c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0308 	and.w	r3, r3, #8
 8002566:	2b00      	cmp	r3, #0
 8002568:	d009      	beq.n	800257e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800256a:	4b12      	ldr	r3, [pc, #72]	; (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	00db      	lsls	r3, r3, #3
 8002578:	490e      	ldr	r1, [pc, #56]	; (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 800257a:	4313      	orrs	r3, r2
 800257c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800257e:	f000 f821 	bl	80025c4 <HAL_RCC_GetSysClockFreq>
 8002582:	4601      	mov	r1, r0
 8002584:	4b0b      	ldr	r3, [pc, #44]	; (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	091b      	lsrs	r3, r3, #4
 800258a:	f003 030f 	and.w	r3, r3, #15
 800258e:	4a0a      	ldr	r2, [pc, #40]	; (80025b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002590:	5cd3      	ldrb	r3, [r2, r3]
 8002592:	fa21 f303 	lsr.w	r3, r1, r3
 8002596:	4a09      	ldr	r2, [pc, #36]	; (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 8002598:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800259a:	4b09      	ldr	r3, [pc, #36]	; (80025c0 <HAL_RCC_ClockConfig+0x1c8>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4618      	mov	r0, r3
 80025a0:	f7ff f98a 	bl	80018b8 <HAL_InitTick>

  return HAL_OK;
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	40023c00 	.word	0x40023c00
 80025b4:	40023800 	.word	0x40023800
 80025b8:	08005890 	.word	0x08005890
 80025bc:	20000000 	.word	0x20000000
 80025c0:	20000004 	.word	0x20000004

080025c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025c6:	b085      	sub	sp, #20
 80025c8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80025ca:	2300      	movs	r3, #0
 80025cc:	607b      	str	r3, [r7, #4]
 80025ce:	2300      	movs	r3, #0
 80025d0:	60fb      	str	r3, [r7, #12]
 80025d2:	2300      	movs	r3, #0
 80025d4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80025d6:	2300      	movs	r3, #0
 80025d8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025da:	4b63      	ldr	r3, [pc, #396]	; (8002768 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f003 030c 	and.w	r3, r3, #12
 80025e2:	2b04      	cmp	r3, #4
 80025e4:	d007      	beq.n	80025f6 <HAL_RCC_GetSysClockFreq+0x32>
 80025e6:	2b08      	cmp	r3, #8
 80025e8:	d008      	beq.n	80025fc <HAL_RCC_GetSysClockFreq+0x38>
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	f040 80b4 	bne.w	8002758 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025f0:	4b5e      	ldr	r3, [pc, #376]	; (800276c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80025f2:	60bb      	str	r3, [r7, #8]
       break;
 80025f4:	e0b3      	b.n	800275e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025f6:	4b5e      	ldr	r3, [pc, #376]	; (8002770 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80025f8:	60bb      	str	r3, [r7, #8]
      break;
 80025fa:	e0b0      	b.n	800275e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025fc:	4b5a      	ldr	r3, [pc, #360]	; (8002768 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002604:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002606:	4b58      	ldr	r3, [pc, #352]	; (8002768 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d04a      	beq.n	80026a8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002612:	4b55      	ldr	r3, [pc, #340]	; (8002768 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	099b      	lsrs	r3, r3, #6
 8002618:	f04f 0400 	mov.w	r4, #0
 800261c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002620:	f04f 0200 	mov.w	r2, #0
 8002624:	ea03 0501 	and.w	r5, r3, r1
 8002628:	ea04 0602 	and.w	r6, r4, r2
 800262c:	4629      	mov	r1, r5
 800262e:	4632      	mov	r2, r6
 8002630:	f04f 0300 	mov.w	r3, #0
 8002634:	f04f 0400 	mov.w	r4, #0
 8002638:	0154      	lsls	r4, r2, #5
 800263a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800263e:	014b      	lsls	r3, r1, #5
 8002640:	4619      	mov	r1, r3
 8002642:	4622      	mov	r2, r4
 8002644:	1b49      	subs	r1, r1, r5
 8002646:	eb62 0206 	sbc.w	r2, r2, r6
 800264a:	f04f 0300 	mov.w	r3, #0
 800264e:	f04f 0400 	mov.w	r4, #0
 8002652:	0194      	lsls	r4, r2, #6
 8002654:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002658:	018b      	lsls	r3, r1, #6
 800265a:	1a5b      	subs	r3, r3, r1
 800265c:	eb64 0402 	sbc.w	r4, r4, r2
 8002660:	f04f 0100 	mov.w	r1, #0
 8002664:	f04f 0200 	mov.w	r2, #0
 8002668:	00e2      	lsls	r2, r4, #3
 800266a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800266e:	00d9      	lsls	r1, r3, #3
 8002670:	460b      	mov	r3, r1
 8002672:	4614      	mov	r4, r2
 8002674:	195b      	adds	r3, r3, r5
 8002676:	eb44 0406 	adc.w	r4, r4, r6
 800267a:	f04f 0100 	mov.w	r1, #0
 800267e:	f04f 0200 	mov.w	r2, #0
 8002682:	0262      	lsls	r2, r4, #9
 8002684:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002688:	0259      	lsls	r1, r3, #9
 800268a:	460b      	mov	r3, r1
 800268c:	4614      	mov	r4, r2
 800268e:	4618      	mov	r0, r3
 8002690:	4621      	mov	r1, r4
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f04f 0400 	mov.w	r4, #0
 8002698:	461a      	mov	r2, r3
 800269a:	4623      	mov	r3, r4
 800269c:	f7fe fa6a 	bl	8000b74 <__aeabi_uldivmod>
 80026a0:	4603      	mov	r3, r0
 80026a2:	460c      	mov	r4, r1
 80026a4:	60fb      	str	r3, [r7, #12]
 80026a6:	e049      	b.n	800273c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026a8:	4b2f      	ldr	r3, [pc, #188]	; (8002768 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	099b      	lsrs	r3, r3, #6
 80026ae:	f04f 0400 	mov.w	r4, #0
 80026b2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80026b6:	f04f 0200 	mov.w	r2, #0
 80026ba:	ea03 0501 	and.w	r5, r3, r1
 80026be:	ea04 0602 	and.w	r6, r4, r2
 80026c2:	4629      	mov	r1, r5
 80026c4:	4632      	mov	r2, r6
 80026c6:	f04f 0300 	mov.w	r3, #0
 80026ca:	f04f 0400 	mov.w	r4, #0
 80026ce:	0154      	lsls	r4, r2, #5
 80026d0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80026d4:	014b      	lsls	r3, r1, #5
 80026d6:	4619      	mov	r1, r3
 80026d8:	4622      	mov	r2, r4
 80026da:	1b49      	subs	r1, r1, r5
 80026dc:	eb62 0206 	sbc.w	r2, r2, r6
 80026e0:	f04f 0300 	mov.w	r3, #0
 80026e4:	f04f 0400 	mov.w	r4, #0
 80026e8:	0194      	lsls	r4, r2, #6
 80026ea:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80026ee:	018b      	lsls	r3, r1, #6
 80026f0:	1a5b      	subs	r3, r3, r1
 80026f2:	eb64 0402 	sbc.w	r4, r4, r2
 80026f6:	f04f 0100 	mov.w	r1, #0
 80026fa:	f04f 0200 	mov.w	r2, #0
 80026fe:	00e2      	lsls	r2, r4, #3
 8002700:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002704:	00d9      	lsls	r1, r3, #3
 8002706:	460b      	mov	r3, r1
 8002708:	4614      	mov	r4, r2
 800270a:	195b      	adds	r3, r3, r5
 800270c:	eb44 0406 	adc.w	r4, r4, r6
 8002710:	f04f 0100 	mov.w	r1, #0
 8002714:	f04f 0200 	mov.w	r2, #0
 8002718:	02a2      	lsls	r2, r4, #10
 800271a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800271e:	0299      	lsls	r1, r3, #10
 8002720:	460b      	mov	r3, r1
 8002722:	4614      	mov	r4, r2
 8002724:	4618      	mov	r0, r3
 8002726:	4621      	mov	r1, r4
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f04f 0400 	mov.w	r4, #0
 800272e:	461a      	mov	r2, r3
 8002730:	4623      	mov	r3, r4
 8002732:	f7fe fa1f 	bl	8000b74 <__aeabi_uldivmod>
 8002736:	4603      	mov	r3, r0
 8002738:	460c      	mov	r4, r1
 800273a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800273c:	4b0a      	ldr	r3, [pc, #40]	; (8002768 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	0c1b      	lsrs	r3, r3, #16
 8002742:	f003 0303 	and.w	r3, r3, #3
 8002746:	3301      	adds	r3, #1
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800274c:	68fa      	ldr	r2, [r7, #12]
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	fbb2 f3f3 	udiv	r3, r2, r3
 8002754:	60bb      	str	r3, [r7, #8]
      break;
 8002756:	e002      	b.n	800275e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002758:	4b04      	ldr	r3, [pc, #16]	; (800276c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800275a:	60bb      	str	r3, [r7, #8]
      break;
 800275c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800275e:	68bb      	ldr	r3, [r7, #8]
}
 8002760:	4618      	mov	r0, r3
 8002762:	3714      	adds	r7, #20
 8002764:	46bd      	mov	sp, r7
 8002766:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002768:	40023800 	.word	0x40023800
 800276c:	00f42400 	.word	0x00f42400
 8002770:	007a1200 	.word	0x007a1200

08002774 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002778:	4b03      	ldr	r3, [pc, #12]	; (8002788 <HAL_RCC_GetHCLKFreq+0x14>)
 800277a:	681b      	ldr	r3, [r3, #0]
}
 800277c:	4618      	mov	r0, r3
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	20000000 	.word	0x20000000

0800278c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002790:	f7ff fff0 	bl	8002774 <HAL_RCC_GetHCLKFreq>
 8002794:	4601      	mov	r1, r0
 8002796:	4b05      	ldr	r3, [pc, #20]	; (80027ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	0a9b      	lsrs	r3, r3, #10
 800279c:	f003 0307 	and.w	r3, r3, #7
 80027a0:	4a03      	ldr	r2, [pc, #12]	; (80027b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027a2:	5cd3      	ldrb	r3, [r2, r3]
 80027a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	40023800 	.word	0x40023800
 80027b0:	080058a0 	.word	0x080058a0

080027b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80027b8:	f7ff ffdc 	bl	8002774 <HAL_RCC_GetHCLKFreq>
 80027bc:	4601      	mov	r1, r0
 80027be:	4b05      	ldr	r3, [pc, #20]	; (80027d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	0b5b      	lsrs	r3, r3, #13
 80027c4:	f003 0307 	and.w	r3, r3, #7
 80027c8:	4a03      	ldr	r2, [pc, #12]	; (80027d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027ca:	5cd3      	ldrb	r3, [r2, r3]
 80027cc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	40023800 	.word	0x40023800
 80027d8:	080058a0 	.word	0x080058a0

080027dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d101      	bne.n	80027ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e056      	b.n	800289c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d106      	bne.n	800280e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f7fe fed9 	bl	80015c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2202      	movs	r2, #2
 8002812:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002824:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685a      	ldr	r2, [r3, #4]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	431a      	orrs	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	431a      	orrs	r2, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	431a      	orrs	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	695b      	ldr	r3, [r3, #20]
 8002840:	431a      	orrs	r2, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	699b      	ldr	r3, [r3, #24]
 8002846:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800284a:	431a      	orrs	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	69db      	ldr	r3, [r3, #28]
 8002850:	431a      	orrs	r2, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a1b      	ldr	r3, [r3, #32]
 8002856:	ea42 0103 	orr.w	r1, r2, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	430a      	orrs	r2, r1
 8002864:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	699b      	ldr	r3, [r3, #24]
 800286a:	0c1b      	lsrs	r3, r3, #16
 800286c:	f003 0104 	and.w	r1, r3, #4
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	430a      	orrs	r2, r1
 800287a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	69da      	ldr	r2, [r3, #28]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800288a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2201      	movs	r2, #1
 8002896:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800289a:	2300      	movs	r3, #0
}
 800289c:	4618      	mov	r0, r3
 800289e:	3708      	adds	r7, #8
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b088      	sub	sp, #32
 80028a8:	af02      	add	r7, sp, #8
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	603b      	str	r3, [r7, #0]
 80028b0:	4613      	mov	r3, r2
 80028b2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80028b4:	2300      	movs	r3, #0
 80028b6:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028c0:	d112      	bne.n	80028e8 <HAL_SPI_Receive+0x44>
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d10e      	bne.n	80028e8 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2204      	movs	r2, #4
 80028ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80028d2:	88fa      	ldrh	r2, [r7, #6]
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	9300      	str	r3, [sp, #0]
 80028d8:	4613      	mov	r3, r2
 80028da:	68ba      	ldr	r2, [r7, #8]
 80028dc:	68b9      	ldr	r1, [r7, #8]
 80028de:	68f8      	ldr	r0, [r7, #12]
 80028e0:	f000 f8e9 	bl	8002ab6 <HAL_SPI_TransmitReceive>
 80028e4:	4603      	mov	r3, r0
 80028e6:	e0e2      	b.n	8002aae <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d101      	bne.n	80028f6 <HAL_SPI_Receive+0x52>
 80028f2:	2302      	movs	r3, #2
 80028f4:	e0db      	b.n	8002aae <HAL_SPI_Receive+0x20a>
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2201      	movs	r2, #1
 80028fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80028fe:	f7ff f81f 	bl	8001940 <HAL_GetTick>
 8002902:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800290a:	b2db      	uxtb	r3, r3
 800290c:	2b01      	cmp	r3, #1
 800290e:	d002      	beq.n	8002916 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002910:	2302      	movs	r3, #2
 8002912:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002914:	e0c2      	b.n	8002a9c <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d002      	beq.n	8002922 <HAL_SPI_Receive+0x7e>
 800291c:	88fb      	ldrh	r3, [r7, #6]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d102      	bne.n	8002928 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002926:	e0b9      	b.n	8002a9c <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2204      	movs	r2, #4
 800292c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2200      	movs	r2, #0
 8002934:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	68ba      	ldr	r2, [r7, #8]
 800293a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	88fa      	ldrh	r2, [r7, #6]
 8002940:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	88fa      	ldrh	r2, [r7, #6]
 8002946:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2200      	movs	r2, #0
 800294c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2200      	movs	r2, #0
 8002952:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2200      	movs	r2, #0
 8002958:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2200      	movs	r2, #0
 800295e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2200      	movs	r2, #0
 8002964:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800296e:	d107      	bne.n	8002980 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800297e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800298a:	2b40      	cmp	r3, #64	; 0x40
 800298c:	d007      	beq.n	800299e <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800299c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d162      	bne.n	8002a6c <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80029a6:	e02e      	b.n	8002a06 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d115      	bne.n	80029e2 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f103 020c 	add.w	r2, r3, #12
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c2:	7812      	ldrb	r2, [r2, #0]
 80029c4:	b2d2      	uxtb	r2, r2
 80029c6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029cc:	1c5a      	adds	r2, r3, #1
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	3b01      	subs	r3, #1
 80029da:	b29a      	uxth	r2, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	87da      	strh	r2, [r3, #62]	; 0x3e
 80029e0:	e011      	b.n	8002a06 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80029e2:	f7fe ffad 	bl	8001940 <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	683a      	ldr	r2, [r7, #0]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d803      	bhi.n	80029fa <HAL_SPI_Receive+0x156>
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029f8:	d102      	bne.n	8002a00 <HAL_SPI_Receive+0x15c>
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d102      	bne.n	8002a06 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002a04:	e04a      	b.n	8002a9c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d1cb      	bne.n	80029a8 <HAL_SPI_Receive+0x104>
 8002a10:	e031      	b.n	8002a76 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f003 0301 	and.w	r3, r3, #1
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d113      	bne.n	8002a48 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68da      	ldr	r2, [r3, #12]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a2a:	b292      	uxth	r2, r2
 8002a2c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a32:	1c9a      	adds	r2, r3, #2
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002a46:	e011      	b.n	8002a6c <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a48:	f7fe ff7a 	bl	8001940 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	683a      	ldr	r2, [r7, #0]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d803      	bhi.n	8002a60 <HAL_SPI_Receive+0x1bc>
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a5e:	d102      	bne.n	8002a66 <HAL_SPI_Receive+0x1c2>
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d102      	bne.n	8002a6c <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002a6a:	e017      	b.n	8002a9c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d1cd      	bne.n	8002a12 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	6839      	ldr	r1, [r7, #0]
 8002a7a:	68f8      	ldr	r0, [r7, #12]
 8002a7c:	f000 fa27 	bl	8002ece <SPI_EndRxTransaction>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d002      	beq.n	8002a8c <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2220      	movs	r2, #32
 8002a8a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d002      	beq.n	8002a9a <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	75fb      	strb	r3, [r7, #23]
 8002a98:	e000      	b.n	8002a9c <HAL_SPI_Receive+0x1f8>
  }

error :
 8002a9a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002aac:	7dfb      	ldrb	r3, [r7, #23]
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3718      	adds	r7, #24
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b08c      	sub	sp, #48	; 0x30
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	60f8      	str	r0, [r7, #12]
 8002abe:	60b9      	str	r1, [r7, #8]
 8002ac0:	607a      	str	r2, [r7, #4]
 8002ac2:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d101      	bne.n	8002adc <HAL_SPI_TransmitReceive+0x26>
 8002ad8:	2302      	movs	r3, #2
 8002ada:	e18a      	b.n	8002df2 <HAL_SPI_TransmitReceive+0x33c>
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ae4:	f7fe ff2c 	bl	8001940 <HAL_GetTick>
 8002ae8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002af0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002afa:	887b      	ldrh	r3, [r7, #2]
 8002afc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002afe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d00f      	beq.n	8002b26 <HAL_SPI_TransmitReceive+0x70>
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b0c:	d107      	bne.n	8002b1e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d103      	bne.n	8002b1e <HAL_SPI_TransmitReceive+0x68>
 8002b16:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002b1a:	2b04      	cmp	r3, #4
 8002b1c:	d003      	beq.n	8002b26 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002b1e:	2302      	movs	r3, #2
 8002b20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002b24:	e15b      	b.n	8002dde <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d005      	beq.n	8002b38 <HAL_SPI_TransmitReceive+0x82>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d002      	beq.n	8002b38 <HAL_SPI_TransmitReceive+0x82>
 8002b32:	887b      	ldrh	r3, [r7, #2]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d103      	bne.n	8002b40 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002b3e:	e14e      	b.n	8002dde <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	2b04      	cmp	r3, #4
 8002b4a:	d003      	beq.n	8002b54 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2205      	movs	r2, #5
 8002b50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2200      	movs	r2, #0
 8002b58:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	887a      	ldrh	r2, [r7, #2]
 8002b64:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	887a      	ldrh	r2, [r7, #2]
 8002b6a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	68ba      	ldr	r2, [r7, #8]
 8002b70:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	887a      	ldrh	r2, [r7, #2]
 8002b76:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	887a      	ldrh	r2, [r7, #2]
 8002b7c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2200      	movs	r2, #0
 8002b82:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2200      	movs	r2, #0
 8002b88:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b94:	2b40      	cmp	r3, #64	; 0x40
 8002b96:	d007      	beq.n	8002ba8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ba6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bb0:	d178      	bne.n	8002ca4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d002      	beq.n	8002bc0 <HAL_SPI_TransmitReceive+0x10a>
 8002bba:	8b7b      	ldrh	r3, [r7, #26]
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d166      	bne.n	8002c8e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc4:	881a      	ldrh	r2, [r3, #0]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd0:	1c9a      	adds	r2, r3, #2
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	3b01      	subs	r3, #1
 8002bde:	b29a      	uxth	r2, r3
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002be4:	e053      	b.n	8002c8e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f003 0302 	and.w	r3, r3, #2
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d11b      	bne.n	8002c2c <HAL_SPI_TransmitReceive+0x176>
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d016      	beq.n	8002c2c <HAL_SPI_TransmitReceive+0x176>
 8002bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d113      	bne.n	8002c2c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c08:	881a      	ldrh	r2, [r3, #0]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c14:	1c9a      	adds	r2, r3, #2
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	3b01      	subs	r3, #1
 8002c22:	b29a      	uxth	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f003 0301 	and.w	r3, r3, #1
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d119      	bne.n	8002c6e <HAL_SPI_TransmitReceive+0x1b8>
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d014      	beq.n	8002c6e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68da      	ldr	r2, [r3, #12]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c4e:	b292      	uxth	r2, r2
 8002c50:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c56:	1c9a      	adds	r2, r3, #2
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	3b01      	subs	r3, #1
 8002c64:	b29a      	uxth	r2, r3
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002c6e:	f7fe fe67 	bl	8001940 <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d807      	bhi.n	8002c8e <HAL_SPI_TransmitReceive+0x1d8>
 8002c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c84:	d003      	beq.n	8002c8e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002c8c:	e0a7      	b.n	8002dde <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d1a6      	bne.n	8002be6 <HAL_SPI_TransmitReceive+0x130>
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1a1      	bne.n	8002be6 <HAL_SPI_TransmitReceive+0x130>
 8002ca2:	e07c      	b.n	8002d9e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d002      	beq.n	8002cb2 <HAL_SPI_TransmitReceive+0x1fc>
 8002cac:	8b7b      	ldrh	r3, [r7, #26]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d16b      	bne.n	8002d8a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	330c      	adds	r3, #12
 8002cbc:	7812      	ldrb	r2, [r2, #0]
 8002cbe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc4:	1c5a      	adds	r2, r3, #1
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	b29a      	uxth	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002cd8:	e057      	b.n	8002d8a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f003 0302 	and.w	r3, r3, #2
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d11c      	bne.n	8002d22 <HAL_SPI_TransmitReceive+0x26c>
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d017      	beq.n	8002d22 <HAL_SPI_TransmitReceive+0x26c>
 8002cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d114      	bne.n	8002d22 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	330c      	adds	r3, #12
 8002d02:	7812      	ldrb	r2, [r2, #0]
 8002d04:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0a:	1c5a      	adds	r2, r3, #1
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	3b01      	subs	r3, #1
 8002d18:	b29a      	uxth	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f003 0301 	and.w	r3, r3, #1
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d119      	bne.n	8002d64 <HAL_SPI_TransmitReceive+0x2ae>
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d014      	beq.n	8002d64 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68da      	ldr	r2, [r3, #12]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d44:	b2d2      	uxtb	r2, r2
 8002d46:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d4c:	1c5a      	adds	r2, r3, #1
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	3b01      	subs	r3, #1
 8002d5a:	b29a      	uxth	r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002d60:	2301      	movs	r3, #1
 8002d62:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002d64:	f7fe fdec 	bl	8001940 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d803      	bhi.n	8002d7c <HAL_SPI_TransmitReceive+0x2c6>
 8002d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d7a:	d102      	bne.n	8002d82 <HAL_SPI_TransmitReceive+0x2cc>
 8002d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d103      	bne.n	8002d8a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002d88:	e029      	b.n	8002dde <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d1a2      	bne.n	8002cda <HAL_SPI_TransmitReceive+0x224>
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d19d      	bne.n	8002cda <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002da0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002da2:	68f8      	ldr	r0, [r7, #12]
 8002da4:	f000 f8f8 	bl	8002f98 <SPI_EndRxTxTransaction>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d006      	beq.n	8002dbc <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2220      	movs	r2, #32
 8002db8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002dba:	e010      	b.n	8002dde <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d10b      	bne.n	8002ddc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	617b      	str	r3, [r7, #20]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	617b      	str	r3, [r7, #20]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	617b      	str	r3, [r7, #20]
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	e000      	b.n	8002dde <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002ddc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2201      	movs	r2, #1
 8002de2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002dee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3730      	adds	r7, #48	; 0x30
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	b084      	sub	sp, #16
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	60f8      	str	r0, [r7, #12]
 8002e02:	60b9      	str	r1, [r7, #8]
 8002e04:	603b      	str	r3, [r7, #0]
 8002e06:	4613      	mov	r3, r2
 8002e08:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e0a:	e04c      	b.n	8002ea6 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e12:	d048      	beq.n	8002ea6 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002e14:	f7fe fd94 	bl	8001940 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	683a      	ldr	r2, [r7, #0]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d902      	bls.n	8002e2a <SPI_WaitFlagStateUntilTimeout+0x30>
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d13d      	bne.n	8002ea6 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	685a      	ldr	r2, [r3, #4]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002e38:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e42:	d111      	bne.n	8002e68 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e4c:	d004      	beq.n	8002e58 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e56:	d107      	bne.n	8002e68 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e66:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e70:	d10f      	bne.n	8002e92 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e80:	601a      	str	r2, [r3, #0]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e90:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2201      	movs	r2, #1
 8002e96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e00f      	b.n	8002ec6 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	689a      	ldr	r2, [r3, #8]
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	4013      	ands	r3, r2
 8002eb0:	68ba      	ldr	r2, [r7, #8]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	bf0c      	ite	eq
 8002eb6:	2301      	moveq	r3, #1
 8002eb8:	2300      	movne	r3, #0
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	79fb      	ldrb	r3, [r7, #7]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d1a3      	bne.n	8002e0c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3710      	adds	r7, #16
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b086      	sub	sp, #24
 8002ed2:	af02      	add	r7, sp, #8
 8002ed4:	60f8      	str	r0, [r7, #12]
 8002ed6:	60b9      	str	r1, [r7, #8]
 8002ed8:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ee2:	d111      	bne.n	8002f08 <SPI_EndRxTransaction+0x3a>
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002eec:	d004      	beq.n	8002ef8 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ef6:	d107      	bne.n	8002f08 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f06:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f10:	d12a      	bne.n	8002f68 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f1a:	d012      	beq.n	8002f42 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	9300      	str	r3, [sp, #0]
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	2200      	movs	r2, #0
 8002f24:	2180      	movs	r1, #128	; 0x80
 8002f26:	68f8      	ldr	r0, [r7, #12]
 8002f28:	f7ff ff67 	bl	8002dfa <SPI_WaitFlagStateUntilTimeout>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d02d      	beq.n	8002f8e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f36:	f043 0220 	orr.w	r2, r3, #32
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e026      	b.n	8002f90 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	9300      	str	r3, [sp, #0]
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	2101      	movs	r1, #1
 8002f4c:	68f8      	ldr	r0, [r7, #12]
 8002f4e:	f7ff ff54 	bl	8002dfa <SPI_WaitFlagStateUntilTimeout>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d01a      	beq.n	8002f8e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f5c:	f043 0220 	orr.w	r2, r3, #32
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e013      	b.n	8002f90 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	9300      	str	r3, [sp, #0]
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	2101      	movs	r1, #1
 8002f72:	68f8      	ldr	r0, [r7, #12]
 8002f74:	f7ff ff41 	bl	8002dfa <SPI_WaitFlagStateUntilTimeout>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d007      	beq.n	8002f8e <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f82:	f043 0220 	orr.w	r2, r3, #32
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e000      	b.n	8002f90 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3710      	adds	r7, #16
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b088      	sub	sp, #32
 8002f9c:	af02      	add	r7, sp, #8
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002fa4:	4b1b      	ldr	r3, [pc, #108]	; (8003014 <SPI_EndRxTxTransaction+0x7c>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a1b      	ldr	r2, [pc, #108]	; (8003018 <SPI_EndRxTxTransaction+0x80>)
 8002faa:	fba2 2303 	umull	r2, r3, r2, r3
 8002fae:	0d5b      	lsrs	r3, r3, #21
 8002fb0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002fb4:	fb02 f303 	mul.w	r3, r2, r3
 8002fb8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fc2:	d112      	bne.n	8002fea <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	9300      	str	r3, [sp, #0]
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	2180      	movs	r1, #128	; 0x80
 8002fce:	68f8      	ldr	r0, [r7, #12]
 8002fd0:	f7ff ff13 	bl	8002dfa <SPI_WaitFlagStateUntilTimeout>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d016      	beq.n	8003008 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fde:	f043 0220 	orr.w	r2, r3, #32
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e00f      	b.n	800300a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d00a      	beq.n	8003006 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003000:	2b80      	cmp	r3, #128	; 0x80
 8003002:	d0f2      	beq.n	8002fea <SPI_EndRxTxTransaction+0x52>
 8003004:	e000      	b.n	8003008 <SPI_EndRxTxTransaction+0x70>
        break;
 8003006:	bf00      	nop
  }

  return HAL_OK;
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	3718      	adds	r7, #24
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	20000000 	.word	0x20000000
 8003018:	165e9f81 	.word	0x165e9f81

0800301c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d101      	bne.n	800302e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e01d      	b.n	800306a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003034:	b2db      	uxtb	r3, r3
 8003036:	2b00      	cmp	r3, #0
 8003038:	d106      	bne.n	8003048 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f7fe fb04 	bl	8001650 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2202      	movs	r2, #2
 800304c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	3304      	adds	r3, #4
 8003058:	4619      	mov	r1, r3
 800305a:	4610      	mov	r0, r2
 800305c:	f000 fa14 	bl	8003488 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3708      	adds	r7, #8
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003072:	b480      	push	{r7}
 8003074:	b085      	sub	sp, #20
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	68da      	ldr	r2, [r3, #12]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f042 0201 	orr.w	r2, r2, #1
 8003088:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	f003 0307 	and.w	r3, r3, #7
 8003094:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2b06      	cmp	r3, #6
 800309a:	d007      	beq.n	80030ac <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f042 0201 	orr.w	r2, r2, #1
 80030aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3714      	adds	r7, #20
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr

080030ba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030ba:	b580      	push	{r7, lr}
 80030bc:	b082      	sub	sp, #8
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	691b      	ldr	r3, [r3, #16]
 80030c8:	f003 0302 	and.w	r3, r3, #2
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d122      	bne.n	8003116 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	f003 0302 	and.w	r3, r3, #2
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d11b      	bne.n	8003116 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f06f 0202 	mvn.w	r2, #2
 80030e6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	f003 0303 	and.w	r3, r3, #3
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d003      	beq.n	8003104 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f000 f9a5 	bl	800344c <HAL_TIM_IC_CaptureCallback>
 8003102:	e005      	b.n	8003110 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f000 f997 	bl	8003438 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 f9a8 	bl	8003460 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	691b      	ldr	r3, [r3, #16]
 800311c:	f003 0304 	and.w	r3, r3, #4
 8003120:	2b04      	cmp	r3, #4
 8003122:	d122      	bne.n	800316a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	f003 0304 	and.w	r3, r3, #4
 800312e:	2b04      	cmp	r3, #4
 8003130:	d11b      	bne.n	800316a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f06f 0204 	mvn.w	r2, #4
 800313a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2202      	movs	r2, #2
 8003140:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800314c:	2b00      	cmp	r3, #0
 800314e:	d003      	beq.n	8003158 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f000 f97b 	bl	800344c <HAL_TIM_IC_CaptureCallback>
 8003156:	e005      	b.n	8003164 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f000 f96d 	bl	8003438 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 f97e 	bl	8003460 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	691b      	ldr	r3, [r3, #16]
 8003170:	f003 0308 	and.w	r3, r3, #8
 8003174:	2b08      	cmp	r3, #8
 8003176:	d122      	bne.n	80031be <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	f003 0308 	and.w	r3, r3, #8
 8003182:	2b08      	cmp	r3, #8
 8003184:	d11b      	bne.n	80031be <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f06f 0208 	mvn.w	r2, #8
 800318e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2204      	movs	r2, #4
 8003194:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	69db      	ldr	r3, [r3, #28]
 800319c:	f003 0303 	and.w	r3, r3, #3
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d003      	beq.n	80031ac <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f000 f951 	bl	800344c <HAL_TIM_IC_CaptureCallback>
 80031aa:	e005      	b.n	80031b8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f000 f943 	bl	8003438 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 f954 	bl	8003460 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	691b      	ldr	r3, [r3, #16]
 80031c4:	f003 0310 	and.w	r3, r3, #16
 80031c8:	2b10      	cmp	r3, #16
 80031ca:	d122      	bne.n	8003212 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	f003 0310 	and.w	r3, r3, #16
 80031d6:	2b10      	cmp	r3, #16
 80031d8:	d11b      	bne.n	8003212 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f06f 0210 	mvn.w	r2, #16
 80031e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2208      	movs	r2, #8
 80031e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	69db      	ldr	r3, [r3, #28]
 80031f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d003      	beq.n	8003200 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f000 f927 	bl	800344c <HAL_TIM_IC_CaptureCallback>
 80031fe:	e005      	b.n	800320c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f000 f919 	bl	8003438 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 f92a 	bl	8003460 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	691b      	ldr	r3, [r3, #16]
 8003218:	f003 0301 	and.w	r3, r3, #1
 800321c:	2b01      	cmp	r3, #1
 800321e:	d10e      	bne.n	800323e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b01      	cmp	r3, #1
 800322c:	d107      	bne.n	800323e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f06f 0201 	mvn.w	r2, #1
 8003236:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f7fd ffb7 	bl	80011ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	691b      	ldr	r3, [r3, #16]
 8003244:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003248:	2b80      	cmp	r3, #128	; 0x80
 800324a:	d10e      	bne.n	800326a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003256:	2b80      	cmp	r3, #128	; 0x80
 8003258:	d107      	bne.n	800326a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003262:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f000 facf 	bl	8003808 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	691b      	ldr	r3, [r3, #16]
 8003270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003274:	2b40      	cmp	r3, #64	; 0x40
 8003276:	d10e      	bne.n	8003296 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003282:	2b40      	cmp	r3, #64	; 0x40
 8003284:	d107      	bne.n	8003296 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800328e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f000 f8ef 	bl	8003474 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	f003 0320 	and.w	r3, r3, #32
 80032a0:	2b20      	cmp	r3, #32
 80032a2:	d10e      	bne.n	80032c2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	f003 0320 	and.w	r3, r3, #32
 80032ae:	2b20      	cmp	r3, #32
 80032b0:	d107      	bne.n	80032c2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f06f 0220 	mvn.w	r2, #32
 80032ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f000 fa99 	bl	80037f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032c2:	bf00      	nop
 80032c4:	3708      	adds	r7, #8
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}

080032ca <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80032ca:	b580      	push	{r7, lr}
 80032cc:	b084      	sub	sp, #16
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
 80032d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d101      	bne.n	80032e2 <HAL_TIM_ConfigClockSource+0x18>
 80032de:	2302      	movs	r3, #2
 80032e0:	e0a6      	b.n	8003430 <HAL_TIM_ConfigClockSource+0x166>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2201      	movs	r2, #1
 80032e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2202      	movs	r2, #2
 80032ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003300:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003308:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	68fa      	ldr	r2, [r7, #12]
 8003310:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2b40      	cmp	r3, #64	; 0x40
 8003318:	d067      	beq.n	80033ea <HAL_TIM_ConfigClockSource+0x120>
 800331a:	2b40      	cmp	r3, #64	; 0x40
 800331c:	d80b      	bhi.n	8003336 <HAL_TIM_ConfigClockSource+0x6c>
 800331e:	2b10      	cmp	r3, #16
 8003320:	d073      	beq.n	800340a <HAL_TIM_ConfigClockSource+0x140>
 8003322:	2b10      	cmp	r3, #16
 8003324:	d802      	bhi.n	800332c <HAL_TIM_ConfigClockSource+0x62>
 8003326:	2b00      	cmp	r3, #0
 8003328:	d06f      	beq.n	800340a <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800332a:	e078      	b.n	800341e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800332c:	2b20      	cmp	r3, #32
 800332e:	d06c      	beq.n	800340a <HAL_TIM_ConfigClockSource+0x140>
 8003330:	2b30      	cmp	r3, #48	; 0x30
 8003332:	d06a      	beq.n	800340a <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003334:	e073      	b.n	800341e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003336:	2b70      	cmp	r3, #112	; 0x70
 8003338:	d00d      	beq.n	8003356 <HAL_TIM_ConfigClockSource+0x8c>
 800333a:	2b70      	cmp	r3, #112	; 0x70
 800333c:	d804      	bhi.n	8003348 <HAL_TIM_ConfigClockSource+0x7e>
 800333e:	2b50      	cmp	r3, #80	; 0x50
 8003340:	d033      	beq.n	80033aa <HAL_TIM_ConfigClockSource+0xe0>
 8003342:	2b60      	cmp	r3, #96	; 0x60
 8003344:	d041      	beq.n	80033ca <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003346:	e06a      	b.n	800341e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003348:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800334c:	d066      	beq.n	800341c <HAL_TIM_ConfigClockSource+0x152>
 800334e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003352:	d017      	beq.n	8003384 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003354:	e063      	b.n	800341e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6818      	ldr	r0, [r3, #0]
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	6899      	ldr	r1, [r3, #8]
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	685a      	ldr	r2, [r3, #4]
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	f000 f9a9 	bl	80036bc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003378:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	609a      	str	r2, [r3, #8]
      break;
 8003382:	e04c      	b.n	800341e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6818      	ldr	r0, [r3, #0]
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	6899      	ldr	r1, [r3, #8]
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	685a      	ldr	r2, [r3, #4]
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	f000 f992 	bl	80036bc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	689a      	ldr	r2, [r3, #8]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033a6:	609a      	str	r2, [r3, #8]
      break;
 80033a8:	e039      	b.n	800341e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6818      	ldr	r0, [r3, #0]
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	6859      	ldr	r1, [r3, #4]
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	461a      	mov	r2, r3
 80033b8:	f000 f906 	bl	80035c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2150      	movs	r1, #80	; 0x50
 80033c2:	4618      	mov	r0, r3
 80033c4:	f000 f95f 	bl	8003686 <TIM_ITRx_SetConfig>
      break;
 80033c8:	e029      	b.n	800341e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6818      	ldr	r0, [r3, #0]
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	6859      	ldr	r1, [r3, #4]
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	461a      	mov	r2, r3
 80033d8:	f000 f925 	bl	8003626 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2160      	movs	r1, #96	; 0x60
 80033e2:	4618      	mov	r0, r3
 80033e4:	f000 f94f 	bl	8003686 <TIM_ITRx_SetConfig>
      break;
 80033e8:	e019      	b.n	800341e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6818      	ldr	r0, [r3, #0]
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	6859      	ldr	r1, [r3, #4]
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	461a      	mov	r2, r3
 80033f8:	f000 f8e6 	bl	80035c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2140      	movs	r1, #64	; 0x40
 8003402:	4618      	mov	r0, r3
 8003404:	f000 f93f 	bl	8003686 <TIM_ITRx_SetConfig>
      break;
 8003408:	e009      	b.n	800341e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4619      	mov	r1, r3
 8003414:	4610      	mov	r0, r2
 8003416:	f000 f936 	bl	8003686 <TIM_ITRx_SetConfig>
      break;
 800341a:	e000      	b.n	800341e <HAL_TIM_ConfigClockSource+0x154>
      break;
 800341c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2201      	movs	r2, #1
 8003422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800342e:	2300      	movs	r3, #0
}
 8003430:	4618      	mov	r0, r3
 8003432:	3710      	adds	r7, #16
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003440:	bf00      	nop
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003454:	bf00      	nop
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr

08003460 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003468:	bf00      	nop
 800346a:	370c      	adds	r7, #12
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800347c:	bf00      	nop
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr

08003488 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003488:	b480      	push	{r7}
 800348a:	b085      	sub	sp, #20
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	4a40      	ldr	r2, [pc, #256]	; (800359c <TIM_Base_SetConfig+0x114>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d013      	beq.n	80034c8 <TIM_Base_SetConfig+0x40>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034a6:	d00f      	beq.n	80034c8 <TIM_Base_SetConfig+0x40>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4a3d      	ldr	r2, [pc, #244]	; (80035a0 <TIM_Base_SetConfig+0x118>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d00b      	beq.n	80034c8 <TIM_Base_SetConfig+0x40>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4a3c      	ldr	r2, [pc, #240]	; (80035a4 <TIM_Base_SetConfig+0x11c>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d007      	beq.n	80034c8 <TIM_Base_SetConfig+0x40>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4a3b      	ldr	r2, [pc, #236]	; (80035a8 <TIM_Base_SetConfig+0x120>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d003      	beq.n	80034c8 <TIM_Base_SetConfig+0x40>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	4a3a      	ldr	r2, [pc, #232]	; (80035ac <TIM_Base_SetConfig+0x124>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d108      	bne.n	80034da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	68fa      	ldr	r2, [r7, #12]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a2f      	ldr	r2, [pc, #188]	; (800359c <TIM_Base_SetConfig+0x114>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d02b      	beq.n	800353a <TIM_Base_SetConfig+0xb2>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034e8:	d027      	beq.n	800353a <TIM_Base_SetConfig+0xb2>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a2c      	ldr	r2, [pc, #176]	; (80035a0 <TIM_Base_SetConfig+0x118>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d023      	beq.n	800353a <TIM_Base_SetConfig+0xb2>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a2b      	ldr	r2, [pc, #172]	; (80035a4 <TIM_Base_SetConfig+0x11c>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d01f      	beq.n	800353a <TIM_Base_SetConfig+0xb2>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a2a      	ldr	r2, [pc, #168]	; (80035a8 <TIM_Base_SetConfig+0x120>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d01b      	beq.n	800353a <TIM_Base_SetConfig+0xb2>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a29      	ldr	r2, [pc, #164]	; (80035ac <TIM_Base_SetConfig+0x124>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d017      	beq.n	800353a <TIM_Base_SetConfig+0xb2>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a28      	ldr	r2, [pc, #160]	; (80035b0 <TIM_Base_SetConfig+0x128>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d013      	beq.n	800353a <TIM_Base_SetConfig+0xb2>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a27      	ldr	r2, [pc, #156]	; (80035b4 <TIM_Base_SetConfig+0x12c>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d00f      	beq.n	800353a <TIM_Base_SetConfig+0xb2>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a26      	ldr	r2, [pc, #152]	; (80035b8 <TIM_Base_SetConfig+0x130>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d00b      	beq.n	800353a <TIM_Base_SetConfig+0xb2>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a25      	ldr	r2, [pc, #148]	; (80035bc <TIM_Base_SetConfig+0x134>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d007      	beq.n	800353a <TIM_Base_SetConfig+0xb2>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a24      	ldr	r2, [pc, #144]	; (80035c0 <TIM_Base_SetConfig+0x138>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d003      	beq.n	800353a <TIM_Base_SetConfig+0xb2>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a23      	ldr	r2, [pc, #140]	; (80035c4 <TIM_Base_SetConfig+0x13c>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d108      	bne.n	800354c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003540:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	4313      	orrs	r3, r2
 800354a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	695b      	ldr	r3, [r3, #20]
 8003556:	4313      	orrs	r3, r2
 8003558:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	68fa      	ldr	r2, [r7, #12]
 800355e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	689a      	ldr	r2, [r3, #8]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4a0a      	ldr	r2, [pc, #40]	; (800359c <TIM_Base_SetConfig+0x114>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d003      	beq.n	8003580 <TIM_Base_SetConfig+0xf8>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4a0c      	ldr	r2, [pc, #48]	; (80035ac <TIM_Base_SetConfig+0x124>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d103      	bne.n	8003588 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	691a      	ldr	r2, [r3, #16]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	615a      	str	r2, [r3, #20]
}
 800358e:	bf00      	nop
 8003590:	3714      	adds	r7, #20
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop
 800359c:	40010000 	.word	0x40010000
 80035a0:	40000400 	.word	0x40000400
 80035a4:	40000800 	.word	0x40000800
 80035a8:	40000c00 	.word	0x40000c00
 80035ac:	40010400 	.word	0x40010400
 80035b0:	40014000 	.word	0x40014000
 80035b4:	40014400 	.word	0x40014400
 80035b8:	40014800 	.word	0x40014800
 80035bc:	40001800 	.word	0x40001800
 80035c0:	40001c00 	.word	0x40001c00
 80035c4:	40002000 	.word	0x40002000

080035c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b087      	sub	sp, #28
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6a1b      	ldr	r3, [r3, #32]
 80035d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6a1b      	ldr	r3, [r3, #32]
 80035de:	f023 0201 	bic.w	r2, r3, #1
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	699b      	ldr	r3, [r3, #24]
 80035ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	011b      	lsls	r3, r3, #4
 80035f8:	693a      	ldr	r2, [r7, #16]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	f023 030a 	bic.w	r3, r3, #10
 8003604:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003606:	697a      	ldr	r2, [r7, #20]
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	4313      	orrs	r3, r2
 800360c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	693a      	ldr	r2, [r7, #16]
 8003612:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	697a      	ldr	r2, [r7, #20]
 8003618:	621a      	str	r2, [r3, #32]
}
 800361a:	bf00      	nop
 800361c:	371c      	adds	r7, #28
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr

08003626 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003626:	b480      	push	{r7}
 8003628:	b087      	sub	sp, #28
 800362a:	af00      	add	r7, sp, #0
 800362c:	60f8      	str	r0, [r7, #12]
 800362e:	60b9      	str	r1, [r7, #8]
 8003630:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6a1b      	ldr	r3, [r3, #32]
 8003636:	f023 0210 	bic.w	r2, r3, #16
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6a1b      	ldr	r3, [r3, #32]
 8003648:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003650:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	031b      	lsls	r3, r3, #12
 8003656:	697a      	ldr	r2, [r7, #20]
 8003658:	4313      	orrs	r3, r2
 800365a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003662:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	011b      	lsls	r3, r3, #4
 8003668:	693a      	ldr	r2, [r7, #16]
 800366a:	4313      	orrs	r3, r2
 800366c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	697a      	ldr	r2, [r7, #20]
 8003672:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	693a      	ldr	r2, [r7, #16]
 8003678:	621a      	str	r2, [r3, #32]
}
 800367a:	bf00      	nop
 800367c:	371c      	adds	r7, #28
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr

08003686 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003686:	b480      	push	{r7}
 8003688:	b085      	sub	sp, #20
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
 800368e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800369c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800369e:	683a      	ldr	r2, [r7, #0]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	f043 0307 	orr.w	r3, r3, #7
 80036a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	68fa      	ldr	r2, [r7, #12]
 80036ae:	609a      	str	r2, [r3, #8]
}
 80036b0:	bf00      	nop
 80036b2:	3714      	adds	r7, #20
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036bc:	b480      	push	{r7}
 80036be:	b087      	sub	sp, #28
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	607a      	str	r2, [r7, #4]
 80036c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	021a      	lsls	r2, r3, #8
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	431a      	orrs	r2, r3
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	697a      	ldr	r2, [r7, #20]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	697a      	ldr	r2, [r7, #20]
 80036ee:	609a      	str	r2, [r3, #8]
}
 80036f0:	bf00      	nop
 80036f2:	371c      	adds	r7, #28
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b085      	sub	sp, #20
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800370c:	2b01      	cmp	r3, #1
 800370e:	d101      	bne.n	8003714 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003710:	2302      	movs	r3, #2
 8003712:	e05a      	b.n	80037ca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2202      	movs	r2, #2
 8003720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800373a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	68fa      	ldr	r2, [r7, #12]
 8003742:	4313      	orrs	r3, r2
 8003744:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	68fa      	ldr	r2, [r7, #12]
 800374c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a21      	ldr	r2, [pc, #132]	; (80037d8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d022      	beq.n	800379e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003760:	d01d      	beq.n	800379e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a1d      	ldr	r2, [pc, #116]	; (80037dc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d018      	beq.n	800379e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a1b      	ldr	r2, [pc, #108]	; (80037e0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d013      	beq.n	800379e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a1a      	ldr	r2, [pc, #104]	; (80037e4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d00e      	beq.n	800379e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a18      	ldr	r2, [pc, #96]	; (80037e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d009      	beq.n	800379e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a17      	ldr	r2, [pc, #92]	; (80037ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d004      	beq.n	800379e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a15      	ldr	r2, [pc, #84]	; (80037f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d10c      	bne.n	80037b8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	68ba      	ldr	r2, [r7, #8]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68ba      	ldr	r2, [r7, #8]
 80037b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3714      	adds	r7, #20
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop
 80037d8:	40010000 	.word	0x40010000
 80037dc:	40000400 	.word	0x40000400
 80037e0:	40000800 	.word	0x40000800
 80037e4:	40000c00 	.word	0x40000c00
 80037e8:	40010400 	.word	0x40010400
 80037ec:	40014000 	.word	0x40014000
 80037f0:	40001800 	.word	0x40001800

080037f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037fc:	bf00      	nop
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003810:	bf00      	nop
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d101      	bne.n	800382e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e03f      	b.n	80038ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003834:	b2db      	uxtb	r3, r3
 8003836:	2b00      	cmp	r3, #0
 8003838:	d106      	bne.n	8003848 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f7fd ff2a 	bl	800169c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2224      	movs	r2, #36	; 0x24
 800384c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68da      	ldr	r2, [r3, #12]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800385e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f000 f90b 	bl	8003a7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	691a      	ldr	r2, [r3, #16]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003874:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	695a      	ldr	r2, [r3, #20]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003884:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	68da      	ldr	r2, [r3, #12]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003894:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2220      	movs	r2, #32
 80038a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2220      	movs	r2, #32
 80038a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3708      	adds	r7, #8
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}

080038b6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038b6:	b580      	push	{r7, lr}
 80038b8:	b088      	sub	sp, #32
 80038ba:	af02      	add	r7, sp, #8
 80038bc:	60f8      	str	r0, [r7, #12]
 80038be:	60b9      	str	r1, [r7, #8]
 80038c0:	603b      	str	r3, [r7, #0]
 80038c2:	4613      	mov	r3, r2
 80038c4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80038c6:	2300      	movs	r3, #0
 80038c8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2b20      	cmp	r3, #32
 80038d4:	f040 8083 	bne.w	80039de <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d002      	beq.n	80038e4 <HAL_UART_Transmit+0x2e>
 80038de:	88fb      	ldrh	r3, [r7, #6]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d101      	bne.n	80038e8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e07b      	b.n	80039e0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d101      	bne.n	80038f6 <HAL_UART_Transmit+0x40>
 80038f2:	2302      	movs	r3, #2
 80038f4:	e074      	b.n	80039e0 <HAL_UART_Transmit+0x12a>
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2201      	movs	r2, #1
 80038fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2200      	movs	r2, #0
 8003902:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2221      	movs	r2, #33	; 0x21
 8003908:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800390c:	f7fe f818 	bl	8001940 <HAL_GetTick>
 8003910:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	88fa      	ldrh	r2, [r7, #6]
 8003916:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	88fa      	ldrh	r2, [r7, #6]
 800391c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003926:	e042      	b.n	80039ae <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800392c:	b29b      	uxth	r3, r3
 800392e:	3b01      	subs	r3, #1
 8003930:	b29a      	uxth	r2, r3
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800393e:	d122      	bne.n	8003986 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	9300      	str	r3, [sp, #0]
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	2200      	movs	r2, #0
 8003948:	2180      	movs	r1, #128	; 0x80
 800394a:	68f8      	ldr	r0, [r7, #12]
 800394c:	f000 f84c 	bl	80039e8 <UART_WaitOnFlagUntilTimeout>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d001      	beq.n	800395a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e042      	b.n	80039e0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	881b      	ldrh	r3, [r3, #0]
 8003962:	461a      	mov	r2, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800396c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d103      	bne.n	800397e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	3302      	adds	r3, #2
 800397a:	60bb      	str	r3, [r7, #8]
 800397c:	e017      	b.n	80039ae <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	3301      	adds	r3, #1
 8003982:	60bb      	str	r3, [r7, #8]
 8003984:	e013      	b.n	80039ae <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	9300      	str	r3, [sp, #0]
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	2200      	movs	r2, #0
 800398e:	2180      	movs	r1, #128	; 0x80
 8003990:	68f8      	ldr	r0, [r7, #12]
 8003992:	f000 f829 	bl	80039e8 <UART_WaitOnFlagUntilTimeout>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d001      	beq.n	80039a0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	e01f      	b.n	80039e0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	1c5a      	adds	r2, r3, #1
 80039a4:	60ba      	str	r2, [r7, #8]
 80039a6:	781a      	ldrb	r2, [r3, #0]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d1b7      	bne.n	8003928 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	9300      	str	r3, [sp, #0]
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	2200      	movs	r2, #0
 80039c0:	2140      	movs	r1, #64	; 0x40
 80039c2:	68f8      	ldr	r0, [r7, #12]
 80039c4:	f000 f810 	bl	80039e8 <UART_WaitOnFlagUntilTimeout>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d001      	beq.n	80039d2 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e006      	b.n	80039e0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2220      	movs	r2, #32
 80039d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80039da:	2300      	movs	r3, #0
 80039dc:	e000      	b.n	80039e0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80039de:	2302      	movs	r3, #2
  }
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3718      	adds	r7, #24
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	603b      	str	r3, [r7, #0]
 80039f4:	4613      	mov	r3, r2
 80039f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039f8:	e02c      	b.n	8003a54 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a00:	d028      	beq.n	8003a54 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003a02:	69bb      	ldr	r3, [r7, #24]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d007      	beq.n	8003a18 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a08:	f7fd ff9a 	bl	8001940 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	69ba      	ldr	r2, [r7, #24]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d21d      	bcs.n	8003a54 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	68da      	ldr	r2, [r3, #12]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003a26:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	695a      	ldr	r2, [r3, #20]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f022 0201 	bic.w	r2, r2, #1
 8003a36:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2220      	movs	r2, #32
 8003a3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2220      	movs	r2, #32
 8003a44:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e00f      	b.n	8003a74 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	68ba      	ldr	r2, [r7, #8]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	bf0c      	ite	eq
 8003a64:	2301      	moveq	r3, #1
 8003a66:	2300      	movne	r3, #0
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	79fb      	ldrb	r3, [r7, #7]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d0c3      	beq.n	80039fa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a72:	2300      	movs	r3, #0
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3710      	adds	r7, #16
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a80:	b085      	sub	sp, #20
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	691b      	ldr	r3, [r3, #16]
 8003a8c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	68da      	ldr	r2, [r3, #12]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	430a      	orrs	r2, r1
 8003a9a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	689a      	ldr	r2, [r3, #8]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	691b      	ldr	r3, [r3, #16]
 8003aa4:	431a      	orrs	r2, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	695b      	ldr	r3, [r3, #20]
 8003aaa:	431a      	orrs	r2, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	69db      	ldr	r3, [r3, #28]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003abe:	f023 030c 	bic.w	r3, r3, #12
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	6812      	ldr	r2, [r2, #0]
 8003ac6:	68f9      	ldr	r1, [r7, #12]
 8003ac8:	430b      	orrs	r3, r1
 8003aca:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	695b      	ldr	r3, [r3, #20]
 8003ad2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	699a      	ldr	r2, [r3, #24]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	430a      	orrs	r2, r1
 8003ae0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	69db      	ldr	r3, [r3, #28]
 8003ae6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003aea:	f040 818b 	bne.w	8003e04 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4ac1      	ldr	r2, [pc, #772]	; (8003df8 <UART_SetConfig+0x37c>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d005      	beq.n	8003b04 <UART_SetConfig+0x88>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4abf      	ldr	r2, [pc, #764]	; (8003dfc <UART_SetConfig+0x380>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	f040 80bd 	bne.w	8003c7e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b04:	f7fe fe56 	bl	80027b4 <HAL_RCC_GetPCLK2Freq>
 8003b08:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	461d      	mov	r5, r3
 8003b0e:	f04f 0600 	mov.w	r6, #0
 8003b12:	46a8      	mov	r8, r5
 8003b14:	46b1      	mov	r9, r6
 8003b16:	eb18 0308 	adds.w	r3, r8, r8
 8003b1a:	eb49 0409 	adc.w	r4, r9, r9
 8003b1e:	4698      	mov	r8, r3
 8003b20:	46a1      	mov	r9, r4
 8003b22:	eb18 0805 	adds.w	r8, r8, r5
 8003b26:	eb49 0906 	adc.w	r9, r9, r6
 8003b2a:	f04f 0100 	mov.w	r1, #0
 8003b2e:	f04f 0200 	mov.w	r2, #0
 8003b32:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003b36:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003b3a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003b3e:	4688      	mov	r8, r1
 8003b40:	4691      	mov	r9, r2
 8003b42:	eb18 0005 	adds.w	r0, r8, r5
 8003b46:	eb49 0106 	adc.w	r1, r9, r6
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	461d      	mov	r5, r3
 8003b50:	f04f 0600 	mov.w	r6, #0
 8003b54:	196b      	adds	r3, r5, r5
 8003b56:	eb46 0406 	adc.w	r4, r6, r6
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	4623      	mov	r3, r4
 8003b5e:	f7fd f809 	bl	8000b74 <__aeabi_uldivmod>
 8003b62:	4603      	mov	r3, r0
 8003b64:	460c      	mov	r4, r1
 8003b66:	461a      	mov	r2, r3
 8003b68:	4ba5      	ldr	r3, [pc, #660]	; (8003e00 <UART_SetConfig+0x384>)
 8003b6a:	fba3 2302 	umull	r2, r3, r3, r2
 8003b6e:	095b      	lsrs	r3, r3, #5
 8003b70:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	461d      	mov	r5, r3
 8003b78:	f04f 0600 	mov.w	r6, #0
 8003b7c:	46a9      	mov	r9, r5
 8003b7e:	46b2      	mov	sl, r6
 8003b80:	eb19 0309 	adds.w	r3, r9, r9
 8003b84:	eb4a 040a 	adc.w	r4, sl, sl
 8003b88:	4699      	mov	r9, r3
 8003b8a:	46a2      	mov	sl, r4
 8003b8c:	eb19 0905 	adds.w	r9, r9, r5
 8003b90:	eb4a 0a06 	adc.w	sl, sl, r6
 8003b94:	f04f 0100 	mov.w	r1, #0
 8003b98:	f04f 0200 	mov.w	r2, #0
 8003b9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ba0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003ba4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ba8:	4689      	mov	r9, r1
 8003baa:	4692      	mov	sl, r2
 8003bac:	eb19 0005 	adds.w	r0, r9, r5
 8003bb0:	eb4a 0106 	adc.w	r1, sl, r6
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	461d      	mov	r5, r3
 8003bba:	f04f 0600 	mov.w	r6, #0
 8003bbe:	196b      	adds	r3, r5, r5
 8003bc0:	eb46 0406 	adc.w	r4, r6, r6
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	4623      	mov	r3, r4
 8003bc8:	f7fc ffd4 	bl	8000b74 <__aeabi_uldivmod>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	460c      	mov	r4, r1
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	4b8b      	ldr	r3, [pc, #556]	; (8003e00 <UART_SetConfig+0x384>)
 8003bd4:	fba3 1302 	umull	r1, r3, r3, r2
 8003bd8:	095b      	lsrs	r3, r3, #5
 8003bda:	2164      	movs	r1, #100	; 0x64
 8003bdc:	fb01 f303 	mul.w	r3, r1, r3
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	00db      	lsls	r3, r3, #3
 8003be4:	3332      	adds	r3, #50	; 0x32
 8003be6:	4a86      	ldr	r2, [pc, #536]	; (8003e00 <UART_SetConfig+0x384>)
 8003be8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bec:	095b      	lsrs	r3, r3, #5
 8003bee:	005b      	lsls	r3, r3, #1
 8003bf0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003bf4:	4498      	add	r8, r3
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	461d      	mov	r5, r3
 8003bfa:	f04f 0600 	mov.w	r6, #0
 8003bfe:	46a9      	mov	r9, r5
 8003c00:	46b2      	mov	sl, r6
 8003c02:	eb19 0309 	adds.w	r3, r9, r9
 8003c06:	eb4a 040a 	adc.w	r4, sl, sl
 8003c0a:	4699      	mov	r9, r3
 8003c0c:	46a2      	mov	sl, r4
 8003c0e:	eb19 0905 	adds.w	r9, r9, r5
 8003c12:	eb4a 0a06 	adc.w	sl, sl, r6
 8003c16:	f04f 0100 	mov.w	r1, #0
 8003c1a:	f04f 0200 	mov.w	r2, #0
 8003c1e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c22:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c26:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c2a:	4689      	mov	r9, r1
 8003c2c:	4692      	mov	sl, r2
 8003c2e:	eb19 0005 	adds.w	r0, r9, r5
 8003c32:	eb4a 0106 	adc.w	r1, sl, r6
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	461d      	mov	r5, r3
 8003c3c:	f04f 0600 	mov.w	r6, #0
 8003c40:	196b      	adds	r3, r5, r5
 8003c42:	eb46 0406 	adc.w	r4, r6, r6
 8003c46:	461a      	mov	r2, r3
 8003c48:	4623      	mov	r3, r4
 8003c4a:	f7fc ff93 	bl	8000b74 <__aeabi_uldivmod>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	460c      	mov	r4, r1
 8003c52:	461a      	mov	r2, r3
 8003c54:	4b6a      	ldr	r3, [pc, #424]	; (8003e00 <UART_SetConfig+0x384>)
 8003c56:	fba3 1302 	umull	r1, r3, r3, r2
 8003c5a:	095b      	lsrs	r3, r3, #5
 8003c5c:	2164      	movs	r1, #100	; 0x64
 8003c5e:	fb01 f303 	mul.w	r3, r1, r3
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	00db      	lsls	r3, r3, #3
 8003c66:	3332      	adds	r3, #50	; 0x32
 8003c68:	4a65      	ldr	r2, [pc, #404]	; (8003e00 <UART_SetConfig+0x384>)
 8003c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c6e:	095b      	lsrs	r3, r3, #5
 8003c70:	f003 0207 	and.w	r2, r3, #7
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4442      	add	r2, r8
 8003c7a:	609a      	str	r2, [r3, #8]
 8003c7c:	e26f      	b.n	800415e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c7e:	f7fe fd85 	bl	800278c <HAL_RCC_GetPCLK1Freq>
 8003c82:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	461d      	mov	r5, r3
 8003c88:	f04f 0600 	mov.w	r6, #0
 8003c8c:	46a8      	mov	r8, r5
 8003c8e:	46b1      	mov	r9, r6
 8003c90:	eb18 0308 	adds.w	r3, r8, r8
 8003c94:	eb49 0409 	adc.w	r4, r9, r9
 8003c98:	4698      	mov	r8, r3
 8003c9a:	46a1      	mov	r9, r4
 8003c9c:	eb18 0805 	adds.w	r8, r8, r5
 8003ca0:	eb49 0906 	adc.w	r9, r9, r6
 8003ca4:	f04f 0100 	mov.w	r1, #0
 8003ca8:	f04f 0200 	mov.w	r2, #0
 8003cac:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003cb0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003cb4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003cb8:	4688      	mov	r8, r1
 8003cba:	4691      	mov	r9, r2
 8003cbc:	eb18 0005 	adds.w	r0, r8, r5
 8003cc0:	eb49 0106 	adc.w	r1, r9, r6
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	461d      	mov	r5, r3
 8003cca:	f04f 0600 	mov.w	r6, #0
 8003cce:	196b      	adds	r3, r5, r5
 8003cd0:	eb46 0406 	adc.w	r4, r6, r6
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	4623      	mov	r3, r4
 8003cd8:	f7fc ff4c 	bl	8000b74 <__aeabi_uldivmod>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	460c      	mov	r4, r1
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	4b47      	ldr	r3, [pc, #284]	; (8003e00 <UART_SetConfig+0x384>)
 8003ce4:	fba3 2302 	umull	r2, r3, r3, r2
 8003ce8:	095b      	lsrs	r3, r3, #5
 8003cea:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	461d      	mov	r5, r3
 8003cf2:	f04f 0600 	mov.w	r6, #0
 8003cf6:	46a9      	mov	r9, r5
 8003cf8:	46b2      	mov	sl, r6
 8003cfa:	eb19 0309 	adds.w	r3, r9, r9
 8003cfe:	eb4a 040a 	adc.w	r4, sl, sl
 8003d02:	4699      	mov	r9, r3
 8003d04:	46a2      	mov	sl, r4
 8003d06:	eb19 0905 	adds.w	r9, r9, r5
 8003d0a:	eb4a 0a06 	adc.w	sl, sl, r6
 8003d0e:	f04f 0100 	mov.w	r1, #0
 8003d12:	f04f 0200 	mov.w	r2, #0
 8003d16:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d1a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d1e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d22:	4689      	mov	r9, r1
 8003d24:	4692      	mov	sl, r2
 8003d26:	eb19 0005 	adds.w	r0, r9, r5
 8003d2a:	eb4a 0106 	adc.w	r1, sl, r6
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	461d      	mov	r5, r3
 8003d34:	f04f 0600 	mov.w	r6, #0
 8003d38:	196b      	adds	r3, r5, r5
 8003d3a:	eb46 0406 	adc.w	r4, r6, r6
 8003d3e:	461a      	mov	r2, r3
 8003d40:	4623      	mov	r3, r4
 8003d42:	f7fc ff17 	bl	8000b74 <__aeabi_uldivmod>
 8003d46:	4603      	mov	r3, r0
 8003d48:	460c      	mov	r4, r1
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	4b2c      	ldr	r3, [pc, #176]	; (8003e00 <UART_SetConfig+0x384>)
 8003d4e:	fba3 1302 	umull	r1, r3, r3, r2
 8003d52:	095b      	lsrs	r3, r3, #5
 8003d54:	2164      	movs	r1, #100	; 0x64
 8003d56:	fb01 f303 	mul.w	r3, r1, r3
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	00db      	lsls	r3, r3, #3
 8003d5e:	3332      	adds	r3, #50	; 0x32
 8003d60:	4a27      	ldr	r2, [pc, #156]	; (8003e00 <UART_SetConfig+0x384>)
 8003d62:	fba2 2303 	umull	r2, r3, r2, r3
 8003d66:	095b      	lsrs	r3, r3, #5
 8003d68:	005b      	lsls	r3, r3, #1
 8003d6a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003d6e:	4498      	add	r8, r3
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	461d      	mov	r5, r3
 8003d74:	f04f 0600 	mov.w	r6, #0
 8003d78:	46a9      	mov	r9, r5
 8003d7a:	46b2      	mov	sl, r6
 8003d7c:	eb19 0309 	adds.w	r3, r9, r9
 8003d80:	eb4a 040a 	adc.w	r4, sl, sl
 8003d84:	4699      	mov	r9, r3
 8003d86:	46a2      	mov	sl, r4
 8003d88:	eb19 0905 	adds.w	r9, r9, r5
 8003d8c:	eb4a 0a06 	adc.w	sl, sl, r6
 8003d90:	f04f 0100 	mov.w	r1, #0
 8003d94:	f04f 0200 	mov.w	r2, #0
 8003d98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d9c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003da0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003da4:	4689      	mov	r9, r1
 8003da6:	4692      	mov	sl, r2
 8003da8:	eb19 0005 	adds.w	r0, r9, r5
 8003dac:	eb4a 0106 	adc.w	r1, sl, r6
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	461d      	mov	r5, r3
 8003db6:	f04f 0600 	mov.w	r6, #0
 8003dba:	196b      	adds	r3, r5, r5
 8003dbc:	eb46 0406 	adc.w	r4, r6, r6
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	4623      	mov	r3, r4
 8003dc4:	f7fc fed6 	bl	8000b74 <__aeabi_uldivmod>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	460c      	mov	r4, r1
 8003dcc:	461a      	mov	r2, r3
 8003dce:	4b0c      	ldr	r3, [pc, #48]	; (8003e00 <UART_SetConfig+0x384>)
 8003dd0:	fba3 1302 	umull	r1, r3, r3, r2
 8003dd4:	095b      	lsrs	r3, r3, #5
 8003dd6:	2164      	movs	r1, #100	; 0x64
 8003dd8:	fb01 f303 	mul.w	r3, r1, r3
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	00db      	lsls	r3, r3, #3
 8003de0:	3332      	adds	r3, #50	; 0x32
 8003de2:	4a07      	ldr	r2, [pc, #28]	; (8003e00 <UART_SetConfig+0x384>)
 8003de4:	fba2 2303 	umull	r2, r3, r2, r3
 8003de8:	095b      	lsrs	r3, r3, #5
 8003dea:	f003 0207 	and.w	r2, r3, #7
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4442      	add	r2, r8
 8003df4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003df6:	e1b2      	b.n	800415e <UART_SetConfig+0x6e2>
 8003df8:	40011000 	.word	0x40011000
 8003dfc:	40011400 	.word	0x40011400
 8003e00:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4ad7      	ldr	r2, [pc, #860]	; (8004168 <UART_SetConfig+0x6ec>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d005      	beq.n	8003e1a <UART_SetConfig+0x39e>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4ad6      	ldr	r2, [pc, #856]	; (800416c <UART_SetConfig+0x6f0>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	f040 80d1 	bne.w	8003fbc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e1a:	f7fe fccb 	bl	80027b4 <HAL_RCC_GetPCLK2Freq>
 8003e1e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	469a      	mov	sl, r3
 8003e24:	f04f 0b00 	mov.w	fp, #0
 8003e28:	46d0      	mov	r8, sl
 8003e2a:	46d9      	mov	r9, fp
 8003e2c:	eb18 0308 	adds.w	r3, r8, r8
 8003e30:	eb49 0409 	adc.w	r4, r9, r9
 8003e34:	4698      	mov	r8, r3
 8003e36:	46a1      	mov	r9, r4
 8003e38:	eb18 080a 	adds.w	r8, r8, sl
 8003e3c:	eb49 090b 	adc.w	r9, r9, fp
 8003e40:	f04f 0100 	mov.w	r1, #0
 8003e44:	f04f 0200 	mov.w	r2, #0
 8003e48:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003e4c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003e50:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003e54:	4688      	mov	r8, r1
 8003e56:	4691      	mov	r9, r2
 8003e58:	eb1a 0508 	adds.w	r5, sl, r8
 8003e5c:	eb4b 0609 	adc.w	r6, fp, r9
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	4619      	mov	r1, r3
 8003e66:	f04f 0200 	mov.w	r2, #0
 8003e6a:	f04f 0300 	mov.w	r3, #0
 8003e6e:	f04f 0400 	mov.w	r4, #0
 8003e72:	0094      	lsls	r4, r2, #2
 8003e74:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003e78:	008b      	lsls	r3, r1, #2
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	4623      	mov	r3, r4
 8003e7e:	4628      	mov	r0, r5
 8003e80:	4631      	mov	r1, r6
 8003e82:	f7fc fe77 	bl	8000b74 <__aeabi_uldivmod>
 8003e86:	4603      	mov	r3, r0
 8003e88:	460c      	mov	r4, r1
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	4bb8      	ldr	r3, [pc, #736]	; (8004170 <UART_SetConfig+0x6f4>)
 8003e8e:	fba3 2302 	umull	r2, r3, r3, r2
 8003e92:	095b      	lsrs	r3, r3, #5
 8003e94:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	469b      	mov	fp, r3
 8003e9c:	f04f 0c00 	mov.w	ip, #0
 8003ea0:	46d9      	mov	r9, fp
 8003ea2:	46e2      	mov	sl, ip
 8003ea4:	eb19 0309 	adds.w	r3, r9, r9
 8003ea8:	eb4a 040a 	adc.w	r4, sl, sl
 8003eac:	4699      	mov	r9, r3
 8003eae:	46a2      	mov	sl, r4
 8003eb0:	eb19 090b 	adds.w	r9, r9, fp
 8003eb4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003eb8:	f04f 0100 	mov.w	r1, #0
 8003ebc:	f04f 0200 	mov.w	r2, #0
 8003ec0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ec4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003ec8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ecc:	4689      	mov	r9, r1
 8003ece:	4692      	mov	sl, r2
 8003ed0:	eb1b 0509 	adds.w	r5, fp, r9
 8003ed4:	eb4c 060a 	adc.w	r6, ip, sl
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	4619      	mov	r1, r3
 8003ede:	f04f 0200 	mov.w	r2, #0
 8003ee2:	f04f 0300 	mov.w	r3, #0
 8003ee6:	f04f 0400 	mov.w	r4, #0
 8003eea:	0094      	lsls	r4, r2, #2
 8003eec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003ef0:	008b      	lsls	r3, r1, #2
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	4623      	mov	r3, r4
 8003ef6:	4628      	mov	r0, r5
 8003ef8:	4631      	mov	r1, r6
 8003efa:	f7fc fe3b 	bl	8000b74 <__aeabi_uldivmod>
 8003efe:	4603      	mov	r3, r0
 8003f00:	460c      	mov	r4, r1
 8003f02:	461a      	mov	r2, r3
 8003f04:	4b9a      	ldr	r3, [pc, #616]	; (8004170 <UART_SetConfig+0x6f4>)
 8003f06:	fba3 1302 	umull	r1, r3, r3, r2
 8003f0a:	095b      	lsrs	r3, r3, #5
 8003f0c:	2164      	movs	r1, #100	; 0x64
 8003f0e:	fb01 f303 	mul.w	r3, r1, r3
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	011b      	lsls	r3, r3, #4
 8003f16:	3332      	adds	r3, #50	; 0x32
 8003f18:	4a95      	ldr	r2, [pc, #596]	; (8004170 <UART_SetConfig+0x6f4>)
 8003f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f1e:	095b      	lsrs	r3, r3, #5
 8003f20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f24:	4498      	add	r8, r3
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	469b      	mov	fp, r3
 8003f2a:	f04f 0c00 	mov.w	ip, #0
 8003f2e:	46d9      	mov	r9, fp
 8003f30:	46e2      	mov	sl, ip
 8003f32:	eb19 0309 	adds.w	r3, r9, r9
 8003f36:	eb4a 040a 	adc.w	r4, sl, sl
 8003f3a:	4699      	mov	r9, r3
 8003f3c:	46a2      	mov	sl, r4
 8003f3e:	eb19 090b 	adds.w	r9, r9, fp
 8003f42:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003f46:	f04f 0100 	mov.w	r1, #0
 8003f4a:	f04f 0200 	mov.w	r2, #0
 8003f4e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f52:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f56:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f5a:	4689      	mov	r9, r1
 8003f5c:	4692      	mov	sl, r2
 8003f5e:	eb1b 0509 	adds.w	r5, fp, r9
 8003f62:	eb4c 060a 	adc.w	r6, ip, sl
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	4619      	mov	r1, r3
 8003f6c:	f04f 0200 	mov.w	r2, #0
 8003f70:	f04f 0300 	mov.w	r3, #0
 8003f74:	f04f 0400 	mov.w	r4, #0
 8003f78:	0094      	lsls	r4, r2, #2
 8003f7a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f7e:	008b      	lsls	r3, r1, #2
 8003f80:	461a      	mov	r2, r3
 8003f82:	4623      	mov	r3, r4
 8003f84:	4628      	mov	r0, r5
 8003f86:	4631      	mov	r1, r6
 8003f88:	f7fc fdf4 	bl	8000b74 <__aeabi_uldivmod>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	460c      	mov	r4, r1
 8003f90:	461a      	mov	r2, r3
 8003f92:	4b77      	ldr	r3, [pc, #476]	; (8004170 <UART_SetConfig+0x6f4>)
 8003f94:	fba3 1302 	umull	r1, r3, r3, r2
 8003f98:	095b      	lsrs	r3, r3, #5
 8003f9a:	2164      	movs	r1, #100	; 0x64
 8003f9c:	fb01 f303 	mul.w	r3, r1, r3
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	011b      	lsls	r3, r3, #4
 8003fa4:	3332      	adds	r3, #50	; 0x32
 8003fa6:	4a72      	ldr	r2, [pc, #456]	; (8004170 <UART_SetConfig+0x6f4>)
 8003fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fac:	095b      	lsrs	r3, r3, #5
 8003fae:	f003 020f 	and.w	r2, r3, #15
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4442      	add	r2, r8
 8003fb8:	609a      	str	r2, [r3, #8]
 8003fba:	e0d0      	b.n	800415e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003fbc:	f7fe fbe6 	bl	800278c <HAL_RCC_GetPCLK1Freq>
 8003fc0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	469a      	mov	sl, r3
 8003fc6:	f04f 0b00 	mov.w	fp, #0
 8003fca:	46d0      	mov	r8, sl
 8003fcc:	46d9      	mov	r9, fp
 8003fce:	eb18 0308 	adds.w	r3, r8, r8
 8003fd2:	eb49 0409 	adc.w	r4, r9, r9
 8003fd6:	4698      	mov	r8, r3
 8003fd8:	46a1      	mov	r9, r4
 8003fda:	eb18 080a 	adds.w	r8, r8, sl
 8003fde:	eb49 090b 	adc.w	r9, r9, fp
 8003fe2:	f04f 0100 	mov.w	r1, #0
 8003fe6:	f04f 0200 	mov.w	r2, #0
 8003fea:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003fee:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003ff2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003ff6:	4688      	mov	r8, r1
 8003ff8:	4691      	mov	r9, r2
 8003ffa:	eb1a 0508 	adds.w	r5, sl, r8
 8003ffe:	eb4b 0609 	adc.w	r6, fp, r9
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	4619      	mov	r1, r3
 8004008:	f04f 0200 	mov.w	r2, #0
 800400c:	f04f 0300 	mov.w	r3, #0
 8004010:	f04f 0400 	mov.w	r4, #0
 8004014:	0094      	lsls	r4, r2, #2
 8004016:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800401a:	008b      	lsls	r3, r1, #2
 800401c:	461a      	mov	r2, r3
 800401e:	4623      	mov	r3, r4
 8004020:	4628      	mov	r0, r5
 8004022:	4631      	mov	r1, r6
 8004024:	f7fc fda6 	bl	8000b74 <__aeabi_uldivmod>
 8004028:	4603      	mov	r3, r0
 800402a:	460c      	mov	r4, r1
 800402c:	461a      	mov	r2, r3
 800402e:	4b50      	ldr	r3, [pc, #320]	; (8004170 <UART_SetConfig+0x6f4>)
 8004030:	fba3 2302 	umull	r2, r3, r3, r2
 8004034:	095b      	lsrs	r3, r3, #5
 8004036:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	469b      	mov	fp, r3
 800403e:	f04f 0c00 	mov.w	ip, #0
 8004042:	46d9      	mov	r9, fp
 8004044:	46e2      	mov	sl, ip
 8004046:	eb19 0309 	adds.w	r3, r9, r9
 800404a:	eb4a 040a 	adc.w	r4, sl, sl
 800404e:	4699      	mov	r9, r3
 8004050:	46a2      	mov	sl, r4
 8004052:	eb19 090b 	adds.w	r9, r9, fp
 8004056:	eb4a 0a0c 	adc.w	sl, sl, ip
 800405a:	f04f 0100 	mov.w	r1, #0
 800405e:	f04f 0200 	mov.w	r2, #0
 8004062:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004066:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800406a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800406e:	4689      	mov	r9, r1
 8004070:	4692      	mov	sl, r2
 8004072:	eb1b 0509 	adds.w	r5, fp, r9
 8004076:	eb4c 060a 	adc.w	r6, ip, sl
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	4619      	mov	r1, r3
 8004080:	f04f 0200 	mov.w	r2, #0
 8004084:	f04f 0300 	mov.w	r3, #0
 8004088:	f04f 0400 	mov.w	r4, #0
 800408c:	0094      	lsls	r4, r2, #2
 800408e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004092:	008b      	lsls	r3, r1, #2
 8004094:	461a      	mov	r2, r3
 8004096:	4623      	mov	r3, r4
 8004098:	4628      	mov	r0, r5
 800409a:	4631      	mov	r1, r6
 800409c:	f7fc fd6a 	bl	8000b74 <__aeabi_uldivmod>
 80040a0:	4603      	mov	r3, r0
 80040a2:	460c      	mov	r4, r1
 80040a4:	461a      	mov	r2, r3
 80040a6:	4b32      	ldr	r3, [pc, #200]	; (8004170 <UART_SetConfig+0x6f4>)
 80040a8:	fba3 1302 	umull	r1, r3, r3, r2
 80040ac:	095b      	lsrs	r3, r3, #5
 80040ae:	2164      	movs	r1, #100	; 0x64
 80040b0:	fb01 f303 	mul.w	r3, r1, r3
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	011b      	lsls	r3, r3, #4
 80040b8:	3332      	adds	r3, #50	; 0x32
 80040ba:	4a2d      	ldr	r2, [pc, #180]	; (8004170 <UART_SetConfig+0x6f4>)
 80040bc:	fba2 2303 	umull	r2, r3, r2, r3
 80040c0:	095b      	lsrs	r3, r3, #5
 80040c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040c6:	4498      	add	r8, r3
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	469b      	mov	fp, r3
 80040cc:	f04f 0c00 	mov.w	ip, #0
 80040d0:	46d9      	mov	r9, fp
 80040d2:	46e2      	mov	sl, ip
 80040d4:	eb19 0309 	adds.w	r3, r9, r9
 80040d8:	eb4a 040a 	adc.w	r4, sl, sl
 80040dc:	4699      	mov	r9, r3
 80040de:	46a2      	mov	sl, r4
 80040e0:	eb19 090b 	adds.w	r9, r9, fp
 80040e4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80040e8:	f04f 0100 	mov.w	r1, #0
 80040ec:	f04f 0200 	mov.w	r2, #0
 80040f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040f4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80040f8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80040fc:	4689      	mov	r9, r1
 80040fe:	4692      	mov	sl, r2
 8004100:	eb1b 0509 	adds.w	r5, fp, r9
 8004104:	eb4c 060a 	adc.w	r6, ip, sl
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	4619      	mov	r1, r3
 800410e:	f04f 0200 	mov.w	r2, #0
 8004112:	f04f 0300 	mov.w	r3, #0
 8004116:	f04f 0400 	mov.w	r4, #0
 800411a:	0094      	lsls	r4, r2, #2
 800411c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004120:	008b      	lsls	r3, r1, #2
 8004122:	461a      	mov	r2, r3
 8004124:	4623      	mov	r3, r4
 8004126:	4628      	mov	r0, r5
 8004128:	4631      	mov	r1, r6
 800412a:	f7fc fd23 	bl	8000b74 <__aeabi_uldivmod>
 800412e:	4603      	mov	r3, r0
 8004130:	460c      	mov	r4, r1
 8004132:	461a      	mov	r2, r3
 8004134:	4b0e      	ldr	r3, [pc, #56]	; (8004170 <UART_SetConfig+0x6f4>)
 8004136:	fba3 1302 	umull	r1, r3, r3, r2
 800413a:	095b      	lsrs	r3, r3, #5
 800413c:	2164      	movs	r1, #100	; 0x64
 800413e:	fb01 f303 	mul.w	r3, r1, r3
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	011b      	lsls	r3, r3, #4
 8004146:	3332      	adds	r3, #50	; 0x32
 8004148:	4a09      	ldr	r2, [pc, #36]	; (8004170 <UART_SetConfig+0x6f4>)
 800414a:	fba2 2303 	umull	r2, r3, r2, r3
 800414e:	095b      	lsrs	r3, r3, #5
 8004150:	f003 020f 	and.w	r2, r3, #15
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4442      	add	r2, r8
 800415a:	609a      	str	r2, [r3, #8]
}
 800415c:	e7ff      	b.n	800415e <UART_SetConfig+0x6e2>
 800415e:	bf00      	nop
 8004160:	3714      	adds	r7, #20
 8004162:	46bd      	mov	sp, r7
 8004164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004168:	40011000 	.word	0x40011000
 800416c:	40011400 	.word	0x40011400
 8004170:	51eb851f 	.word	0x51eb851f

08004174 <gcvt>:
 8004174:	b530      	push	{r4, r5, lr}
 8004176:	ed2d 8b02 	vpush	{d8}
 800417a:	eeb0 8a40 	vmov.f32	s16, s0
 800417e:	eef0 8a60 	vmov.f32	s17, s1
 8004182:	460c      	mov	r4, r1
 8004184:	2200      	movs	r2, #0
 8004186:	b083      	sub	sp, #12
 8004188:	4605      	mov	r5, r0
 800418a:	2300      	movs	r3, #0
 800418c:	ec51 0b10 	vmov	r0, r1, d0
 8004190:	f7fc fc50 	bl	8000a34 <__aeabi_dcmplt>
 8004194:	4622      	mov	r2, r4
 8004196:	b118      	cbz	r0, 80041a0 <gcvt+0x2c>
 8004198:	232d      	movs	r3, #45	; 0x2d
 800419a:	f802 3b01 	strb.w	r3, [r2], #1
 800419e:	3d01      	subs	r5, #1
 80041a0:	2300      	movs	r3, #0
 80041a2:	4809      	ldr	r0, [pc, #36]	; (80041c8 <gcvt+0x54>)
 80041a4:	9300      	str	r3, [sp, #0]
 80041a6:	4629      	mov	r1, r5
 80041a8:	2367      	movs	r3, #103	; 0x67
 80041aa:	eeb0 0a48 	vmov.f32	s0, s16
 80041ae:	eef0 0a68 	vmov.f32	s1, s17
 80041b2:	6800      	ldr	r0, [r0, #0]
 80041b4:	f000 f8c0 	bl	8004338 <_gcvt>
 80041b8:	2800      	cmp	r0, #0
 80041ba:	bf14      	ite	ne
 80041bc:	4620      	movne	r0, r4
 80041be:	2000      	moveq	r0, #0
 80041c0:	b003      	add	sp, #12
 80041c2:	ecbd 8b02 	vpop	{d8}
 80041c6:	bd30      	pop	{r4, r5, pc}
 80041c8:	2000000c 	.word	0x2000000c

080041cc <gcvtf>:
 80041cc:	b538      	push	{r3, r4, r5, lr}
 80041ce:	4604      	mov	r4, r0
 80041d0:	ee10 0a10 	vmov	r0, s0
 80041d4:	460d      	mov	r5, r1
 80041d6:	f7fc f963 	bl	80004a0 <__aeabi_f2d>
 80041da:	ec41 0b10 	vmov	d0, r0, r1
 80041de:	4629      	mov	r1, r5
 80041e0:	4620      	mov	r0, r4
 80041e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80041e6:	f7ff bfc5 	b.w	8004174 <gcvt>
	...

080041ec <__errno>:
 80041ec:	4b01      	ldr	r3, [pc, #4]	; (80041f4 <__errno+0x8>)
 80041ee:	6818      	ldr	r0, [r3, #0]
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	2000000c 	.word	0x2000000c

080041f8 <__libc_init_array>:
 80041f8:	b570      	push	{r4, r5, r6, lr}
 80041fa:	4e0d      	ldr	r6, [pc, #52]	; (8004230 <__libc_init_array+0x38>)
 80041fc:	4c0d      	ldr	r4, [pc, #52]	; (8004234 <__libc_init_array+0x3c>)
 80041fe:	1ba4      	subs	r4, r4, r6
 8004200:	10a4      	asrs	r4, r4, #2
 8004202:	2500      	movs	r5, #0
 8004204:	42a5      	cmp	r5, r4
 8004206:	d109      	bne.n	800421c <__libc_init_array+0x24>
 8004208:	4e0b      	ldr	r6, [pc, #44]	; (8004238 <__libc_init_array+0x40>)
 800420a:	4c0c      	ldr	r4, [pc, #48]	; (800423c <__libc_init_array+0x44>)
 800420c:	f001 fb32 	bl	8005874 <_init>
 8004210:	1ba4      	subs	r4, r4, r6
 8004212:	10a4      	asrs	r4, r4, #2
 8004214:	2500      	movs	r5, #0
 8004216:	42a5      	cmp	r5, r4
 8004218:	d105      	bne.n	8004226 <__libc_init_array+0x2e>
 800421a:	bd70      	pop	{r4, r5, r6, pc}
 800421c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004220:	4798      	blx	r3
 8004222:	3501      	adds	r5, #1
 8004224:	e7ee      	b.n	8004204 <__libc_init_array+0xc>
 8004226:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800422a:	4798      	blx	r3
 800422c:	3501      	adds	r5, #1
 800422e:	e7f2      	b.n	8004216 <__libc_init_array+0x1e>
 8004230:	080059bc 	.word	0x080059bc
 8004234:	080059bc 	.word	0x080059bc
 8004238:	080059bc 	.word	0x080059bc
 800423c:	080059c0 	.word	0x080059c0

08004240 <memset>:
 8004240:	4402      	add	r2, r0
 8004242:	4603      	mov	r3, r0
 8004244:	4293      	cmp	r3, r2
 8004246:	d100      	bne.n	800424a <memset+0xa>
 8004248:	4770      	bx	lr
 800424a:	f803 1b01 	strb.w	r1, [r3], #1
 800424e:	e7f9      	b.n	8004244 <memset+0x4>

08004250 <print_e>:
 8004250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004252:	b087      	sub	sp, #28
 8004254:	ec43 2b10 	vmov	d0, r2, r3
 8004258:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800425a:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 800425e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8004260:	ab04      	add	r3, sp, #16
 8004262:	9301      	str	r3, [sp, #4]
 8004264:	ab03      	add	r3, sp, #12
 8004266:	9300      	str	r3, [sp, #0]
 8004268:	460f      	mov	r7, r1
 800426a:	ab05      	add	r3, sp, #20
 800426c:	2102      	movs	r1, #2
 800426e:	1c62      	adds	r2, r4, #1
 8004270:	f000 fd32 	bl	8004cd8 <_dtoa_r>
 8004274:	4601      	mov	r1, r0
 8004276:	9805      	ldr	r0, [sp, #20]
 8004278:	f242 730f 	movw	r3, #9999	; 0x270f
 800427c:	4298      	cmp	r0, r3
 800427e:	d104      	bne.n	800428a <print_e+0x3a>
 8004280:	4638      	mov	r0, r7
 8004282:	f000 fc95 	bl	8004bb0 <strcpy>
 8004286:	b007      	add	sp, #28
 8004288:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800428a:	780b      	ldrb	r3, [r1, #0]
 800428c:	703b      	strb	r3, [r7, #0]
 800428e:	2d00      	cmp	r5, #0
 8004290:	d143      	bne.n	800431a <print_e+0xca>
 8004292:	2c00      	cmp	r4, #0
 8004294:	d141      	bne.n	800431a <print_e+0xca>
 8004296:	1c7b      	adds	r3, r7, #1
 8004298:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800429c:	b10a      	cbz	r2, 80042a2 <print_e+0x52>
 800429e:	2c00      	cmp	r4, #0
 80042a0:	dc3f      	bgt.n	8004322 <print_e+0xd2>
 80042a2:	2e67      	cmp	r6, #103	; 0x67
 80042a4:	d044      	beq.n	8004330 <print_e+0xe0>
 80042a6:	2e47      	cmp	r6, #71	; 0x47
 80042a8:	d044      	beq.n	8004334 <print_e+0xe4>
 80042aa:	461a      	mov	r2, r3
 80042ac:	191d      	adds	r5, r3, r4
 80042ae:	2730      	movs	r7, #48	; 0x30
 80042b0:	1aa9      	subs	r1, r5, r2
 80042b2:	2900      	cmp	r1, #0
 80042b4:	dc39      	bgt.n	800432a <print_e+0xda>
 80042b6:	2c00      	cmp	r4, #0
 80042b8:	bfa8      	it	ge
 80042ba:	191b      	addge	r3, r3, r4
 80042bc:	1e41      	subs	r1, r0, #1
 80042be:	2900      	cmp	r1, #0
 80042c0:	bfb8      	it	lt
 80042c2:	f1c0 0001 	rsblt	r0, r0, #1
 80042c6:	9105      	str	r1, [sp, #20]
 80042c8:	bfb8      	it	lt
 80042ca:	9005      	strlt	r0, [sp, #20]
 80042cc:	461a      	mov	r2, r3
 80042ce:	9805      	ldr	r0, [sp, #20]
 80042d0:	f802 6b02 	strb.w	r6, [r2], #2
 80042d4:	bfb5      	itete	lt
 80042d6:	212d      	movlt	r1, #45	; 0x2d
 80042d8:	212b      	movge	r1, #43	; 0x2b
 80042da:	7059      	strblt	r1, [r3, #1]
 80042dc:	7059      	strbge	r1, [r3, #1]
 80042de:	2863      	cmp	r0, #99	; 0x63
 80042e0:	dd0b      	ble.n	80042fa <print_e+0xaa>
 80042e2:	2164      	movs	r1, #100	; 0x64
 80042e4:	fb90 f1f1 	sdiv	r1, r0, r1
 80042e8:	f101 0430 	add.w	r4, r1, #48	; 0x30
 80042ec:	1cda      	adds	r2, r3, #3
 80042ee:	709c      	strb	r4, [r3, #2]
 80042f0:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80042f4:	fb03 0101 	mla	r1, r3, r1, r0
 80042f8:	9105      	str	r1, [sp, #20]
 80042fa:	9905      	ldr	r1, [sp, #20]
 80042fc:	230a      	movs	r3, #10
 80042fe:	fb91 f3f3 	sdiv	r3, r1, r3
 8004302:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8004306:	7010      	strb	r0, [r2, #0]
 8004308:	f06f 0009 	mvn.w	r0, #9
 800430c:	fb00 1303 	mla	r3, r0, r3, r1
 8004310:	3330      	adds	r3, #48	; 0x30
 8004312:	7053      	strb	r3, [r2, #1]
 8004314:	2300      	movs	r3, #0
 8004316:	7093      	strb	r3, [r2, #2]
 8004318:	e7b5      	b.n	8004286 <print_e+0x36>
 800431a:	222e      	movs	r2, #46	; 0x2e
 800431c:	1cbb      	adds	r3, r7, #2
 800431e:	707a      	strb	r2, [r7, #1]
 8004320:	e7ba      	b.n	8004298 <print_e+0x48>
 8004322:	f803 2b01 	strb.w	r2, [r3], #1
 8004326:	3c01      	subs	r4, #1
 8004328:	e7b6      	b.n	8004298 <print_e+0x48>
 800432a:	f802 7b01 	strb.w	r7, [r2], #1
 800432e:	e7bf      	b.n	80042b0 <print_e+0x60>
 8004330:	2665      	movs	r6, #101	; 0x65
 8004332:	e7c3      	b.n	80042bc <print_e+0x6c>
 8004334:	2645      	movs	r6, #69	; 0x45
 8004336:	e7c1      	b.n	80042bc <print_e+0x6c>

08004338 <_gcvt>:
 8004338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800433c:	ec55 4b10 	vmov	r4, r5, d0
 8004340:	b088      	sub	sp, #32
 8004342:	4681      	mov	r9, r0
 8004344:	460f      	mov	r7, r1
 8004346:	4616      	mov	r6, r2
 8004348:	469a      	mov	sl, r3
 800434a:	2200      	movs	r2, #0
 800434c:	2300      	movs	r3, #0
 800434e:	ee10 0a10 	vmov	r0, s0
 8004352:	4629      	mov	r1, r5
 8004354:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8004358:	f7fc fb6c 	bl	8000a34 <__aeabi_dcmplt>
 800435c:	b110      	cbz	r0, 8004364 <_gcvt+0x2c>
 800435e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004362:	461d      	mov	r5, r3
 8004364:	2200      	movs	r2, #0
 8004366:	2300      	movs	r3, #0
 8004368:	4620      	mov	r0, r4
 800436a:	4629      	mov	r1, r5
 800436c:	f7fc fb58 	bl	8000a20 <__aeabi_dcmpeq>
 8004370:	b138      	cbz	r0, 8004382 <_gcvt+0x4a>
 8004372:	2330      	movs	r3, #48	; 0x30
 8004374:	7033      	strb	r3, [r6, #0]
 8004376:	2300      	movs	r3, #0
 8004378:	7073      	strb	r3, [r6, #1]
 800437a:	4630      	mov	r0, r6
 800437c:	b008      	add	sp, #32
 800437e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004382:	a350      	add	r3, pc, #320	; (adr r3, 80044c4 <_gcvt+0x18c>)
 8004384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004388:	4620      	mov	r0, r4
 800438a:	4629      	mov	r1, r5
 800438c:	f7fc fb5c 	bl	8000a48 <__aeabi_dcmple>
 8004390:	b150      	cbz	r0, 80043a8 <_gcvt+0x70>
 8004392:	3f01      	subs	r7, #1
 8004394:	e9cd a801 	strd	sl, r8, [sp, #4]
 8004398:	9700      	str	r7, [sp, #0]
 800439a:	4622      	mov	r2, r4
 800439c:	462b      	mov	r3, r5
 800439e:	4631      	mov	r1, r6
 80043a0:	4648      	mov	r0, r9
 80043a2:	f7ff ff55 	bl	8004250 <print_e>
 80043a6:	e7e8      	b.n	800437a <_gcvt+0x42>
 80043a8:	4638      	mov	r0, r7
 80043aa:	f000 fb6b 	bl	8004a84 <_mprec_log10>
 80043ae:	4622      	mov	r2, r4
 80043b0:	462b      	mov	r3, r5
 80043b2:	ec51 0b10 	vmov	r0, r1, d0
 80043b6:	f7fc fb47 	bl	8000a48 <__aeabi_dcmple>
 80043ba:	2800      	cmp	r0, #0
 80043bc:	d1e9      	bne.n	8004392 <_gcvt+0x5a>
 80043be:	2200      	movs	r2, #0
 80043c0:	4b3f      	ldr	r3, [pc, #252]	; (80044c0 <_gcvt+0x188>)
 80043c2:	4620      	mov	r0, r4
 80043c4:	4629      	mov	r1, r5
 80043c6:	f7fc fb35 	bl	8000a34 <__aeabi_dcmplt>
 80043ca:	aa07      	add	r2, sp, #28
 80043cc:	ab06      	add	r3, sp, #24
 80043ce:	e9cd 3200 	strd	r3, r2, [sp]
 80043d2:	ab05      	add	r3, sp, #20
 80043d4:	463a      	mov	r2, r7
 80043d6:	b360      	cbz	r0, 8004432 <_gcvt+0xfa>
 80043d8:	2103      	movs	r1, #3
 80043da:	ec45 4b10 	vmov	d0, r4, r5
 80043de:	4648      	mov	r0, r9
 80043e0:	f000 fc7a 	bl	8004cd8 <_dtoa_r>
 80043e4:	9a05      	ldr	r2, [sp, #20]
 80043e6:	f242 730f 	movw	r3, #9999	; 0x270f
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d023      	beq.n	8004436 <_gcvt+0xfe>
 80043ee:	4633      	mov	r3, r6
 80043f0:	4437      	add	r7, r6
 80043f2:	4601      	mov	r1, r0
 80043f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80043f8:	9d05      	ldr	r5, [sp, #20]
 80043fa:	1afc      	subs	r4, r7, r3
 80043fc:	b32a      	cbz	r2, 800444a <_gcvt+0x112>
 80043fe:	2d00      	cmp	r5, #0
 8004400:	dc1e      	bgt.n	8004440 <_gcvt+0x108>
 8004402:	f1b8 0f00 	cmp.w	r8, #0
 8004406:	d102      	bne.n	800440e <_gcvt+0xd6>
 8004408:	780a      	ldrb	r2, [r1, #0]
 800440a:	2a00      	cmp	r2, #0
 800440c:	d045      	beq.n	800449a <_gcvt+0x162>
 800440e:	429e      	cmp	r6, r3
 8004410:	bf02      	ittt	eq
 8004412:	1c73      	addeq	r3, r6, #1
 8004414:	2230      	moveq	r2, #48	; 0x30
 8004416:	7032      	strbeq	r2, [r6, #0]
 8004418:	222e      	movs	r2, #46	; 0x2e
 800441a:	701a      	strb	r2, [r3, #0]
 800441c:	9a05      	ldr	r2, [sp, #20]
 800441e:	3301      	adds	r3, #1
 8004420:	2000      	movs	r0, #0
 8004422:	2730      	movs	r7, #48	; 0x30
 8004424:	2a00      	cmp	r2, #0
 8004426:	4615      	mov	r5, r2
 8004428:	db24      	blt.n	8004474 <_gcvt+0x13c>
 800442a:	b100      	cbz	r0, 800442e <_gcvt+0xf6>
 800442c:	9205      	str	r2, [sp, #20]
 800442e:	1e4a      	subs	r2, r1, #1
 8004430:	e02b      	b.n	800448a <_gcvt+0x152>
 8004432:	2102      	movs	r1, #2
 8004434:	e7d1      	b.n	80043da <_gcvt+0xa2>
 8004436:	4601      	mov	r1, r0
 8004438:	4630      	mov	r0, r6
 800443a:	f000 fbb9 	bl	8004bb0 <strcpy>
 800443e:	e79c      	b.n	800437a <_gcvt+0x42>
 8004440:	3d01      	subs	r5, #1
 8004442:	f803 2b01 	strb.w	r2, [r3], #1
 8004446:	9505      	str	r5, [sp, #20]
 8004448:	e7d3      	b.n	80043f2 <_gcvt+0xba>
 800444a:	1b2d      	subs	r5, r5, r4
 800444c:	2730      	movs	r7, #48	; 0x30
 800444e:	e005      	b.n	800445c <_gcvt+0x124>
 8004450:	2c00      	cmp	r4, #0
 8004452:	dd06      	ble.n	8004462 <_gcvt+0x12a>
 8004454:	f803 7b01 	strb.w	r7, [r3], #1
 8004458:	3c01      	subs	r4, #1
 800445a:	2201      	movs	r2, #1
 800445c:	1928      	adds	r0, r5, r4
 800445e:	2800      	cmp	r0, #0
 8004460:	dcf6      	bgt.n	8004450 <_gcvt+0x118>
 8004462:	2a00      	cmp	r2, #0
 8004464:	d0cd      	beq.n	8004402 <_gcvt+0xca>
 8004466:	9005      	str	r0, [sp, #20]
 8004468:	e7cb      	b.n	8004402 <_gcvt+0xca>
 800446a:	f803 7b01 	strb.w	r7, [r3], #1
 800446e:	3c01      	subs	r4, #1
 8004470:	2001      	movs	r0, #1
 8004472:	e7d7      	b.n	8004424 <_gcvt+0xec>
 8004474:	2c00      	cmp	r4, #0
 8004476:	f102 0201 	add.w	r2, r2, #1
 800447a:	dcf6      	bgt.n	800446a <_gcvt+0x132>
 800447c:	2800      	cmp	r0, #0
 800447e:	d0d6      	beq.n	800442e <_gcvt+0xf6>
 8004480:	9505      	str	r5, [sp, #20]
 8004482:	e7d4      	b.n	800442e <_gcvt+0xf6>
 8004484:	f803 1b01 	strb.w	r1, [r3], #1
 8004488:	3c01      	subs	r4, #1
 800448a:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800448e:	b109      	cbz	r1, 8004494 <_gcvt+0x15c>
 8004490:	2c00      	cmp	r4, #0
 8004492:	dcf7      	bgt.n	8004484 <_gcvt+0x14c>
 8004494:	f1b8 0f00 	cmp.w	r8, #0
 8004498:	d10b      	bne.n	80044b2 <_gcvt+0x17a>
 800449a:	2200      	movs	r2, #0
 800449c:	701a      	strb	r2, [r3, #0]
 800449e:	e76c      	b.n	800437a <_gcvt+0x42>
 80044a0:	f802 5b01 	strb.w	r5, [r2], #1
 80044a4:	1a81      	subs	r1, r0, r2
 80044a6:	2900      	cmp	r1, #0
 80044a8:	dcfa      	bgt.n	80044a0 <_gcvt+0x168>
 80044aa:	2c00      	cmp	r4, #0
 80044ac:	bfa8      	it	ge
 80044ae:	191b      	addge	r3, r3, r4
 80044b0:	e7f3      	b.n	800449a <_gcvt+0x162>
 80044b2:	461a      	mov	r2, r3
 80044b4:	1918      	adds	r0, r3, r4
 80044b6:	2530      	movs	r5, #48	; 0x30
 80044b8:	e7f4      	b.n	80044a4 <_gcvt+0x16c>
 80044ba:	bf00      	nop
 80044bc:	f3af 8000 	nop.w
 80044c0:	3ff00000 	.word	0x3ff00000
 80044c4:	eb1c432d 	.word	0xeb1c432d
 80044c8:	3f1a36e2 	.word	0x3f1a36e2

080044cc <_Balloc>:
 80044cc:	b570      	push	{r4, r5, r6, lr}
 80044ce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80044d0:	4604      	mov	r4, r0
 80044d2:	460e      	mov	r6, r1
 80044d4:	b93d      	cbnz	r5, 80044e6 <_Balloc+0x1a>
 80044d6:	2010      	movs	r0, #16
 80044d8:	f001 f9b6 	bl	8005848 <malloc>
 80044dc:	6260      	str	r0, [r4, #36]	; 0x24
 80044de:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80044e2:	6005      	str	r5, [r0, #0]
 80044e4:	60c5      	str	r5, [r0, #12]
 80044e6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80044e8:	68eb      	ldr	r3, [r5, #12]
 80044ea:	b183      	cbz	r3, 800450e <_Balloc+0x42>
 80044ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80044f4:	b9b8      	cbnz	r0, 8004526 <_Balloc+0x5a>
 80044f6:	2101      	movs	r1, #1
 80044f8:	fa01 f506 	lsl.w	r5, r1, r6
 80044fc:	1d6a      	adds	r2, r5, #5
 80044fe:	0092      	lsls	r2, r2, #2
 8004500:	4620      	mov	r0, r4
 8004502:	f000 fadd 	bl	8004ac0 <_calloc_r>
 8004506:	b160      	cbz	r0, 8004522 <_Balloc+0x56>
 8004508:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800450c:	e00e      	b.n	800452c <_Balloc+0x60>
 800450e:	2221      	movs	r2, #33	; 0x21
 8004510:	2104      	movs	r1, #4
 8004512:	4620      	mov	r0, r4
 8004514:	f000 fad4 	bl	8004ac0 <_calloc_r>
 8004518:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800451a:	60e8      	str	r0, [r5, #12]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d1e4      	bne.n	80044ec <_Balloc+0x20>
 8004522:	2000      	movs	r0, #0
 8004524:	bd70      	pop	{r4, r5, r6, pc}
 8004526:	6802      	ldr	r2, [r0, #0]
 8004528:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800452c:	2300      	movs	r3, #0
 800452e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004532:	e7f7      	b.n	8004524 <_Balloc+0x58>

08004534 <_Bfree>:
 8004534:	b570      	push	{r4, r5, r6, lr}
 8004536:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004538:	4606      	mov	r6, r0
 800453a:	460d      	mov	r5, r1
 800453c:	b93c      	cbnz	r4, 800454e <_Bfree+0x1a>
 800453e:	2010      	movs	r0, #16
 8004540:	f001 f982 	bl	8005848 <malloc>
 8004544:	6270      	str	r0, [r6, #36]	; 0x24
 8004546:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800454a:	6004      	str	r4, [r0, #0]
 800454c:	60c4      	str	r4, [r0, #12]
 800454e:	b13d      	cbz	r5, 8004560 <_Bfree+0x2c>
 8004550:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004552:	686a      	ldr	r2, [r5, #4]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800455a:	6029      	str	r1, [r5, #0]
 800455c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8004560:	bd70      	pop	{r4, r5, r6, pc}

08004562 <__multadd>:
 8004562:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004566:	690d      	ldr	r5, [r1, #16]
 8004568:	461f      	mov	r7, r3
 800456a:	4606      	mov	r6, r0
 800456c:	460c      	mov	r4, r1
 800456e:	f101 0c14 	add.w	ip, r1, #20
 8004572:	2300      	movs	r3, #0
 8004574:	f8dc 0000 	ldr.w	r0, [ip]
 8004578:	b281      	uxth	r1, r0
 800457a:	fb02 7101 	mla	r1, r2, r1, r7
 800457e:	0c0f      	lsrs	r7, r1, #16
 8004580:	0c00      	lsrs	r0, r0, #16
 8004582:	fb02 7000 	mla	r0, r2, r0, r7
 8004586:	b289      	uxth	r1, r1
 8004588:	3301      	adds	r3, #1
 800458a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800458e:	429d      	cmp	r5, r3
 8004590:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8004594:	f84c 1b04 	str.w	r1, [ip], #4
 8004598:	dcec      	bgt.n	8004574 <__multadd+0x12>
 800459a:	b1d7      	cbz	r7, 80045d2 <__multadd+0x70>
 800459c:	68a3      	ldr	r3, [r4, #8]
 800459e:	42ab      	cmp	r3, r5
 80045a0:	dc12      	bgt.n	80045c8 <__multadd+0x66>
 80045a2:	6861      	ldr	r1, [r4, #4]
 80045a4:	4630      	mov	r0, r6
 80045a6:	3101      	adds	r1, #1
 80045a8:	f7ff ff90 	bl	80044cc <_Balloc>
 80045ac:	6922      	ldr	r2, [r4, #16]
 80045ae:	3202      	adds	r2, #2
 80045b0:	f104 010c 	add.w	r1, r4, #12
 80045b4:	4680      	mov	r8, r0
 80045b6:	0092      	lsls	r2, r2, #2
 80045b8:	300c      	adds	r0, #12
 80045ba:	f001 f94d 	bl	8005858 <memcpy>
 80045be:	4621      	mov	r1, r4
 80045c0:	4630      	mov	r0, r6
 80045c2:	f7ff ffb7 	bl	8004534 <_Bfree>
 80045c6:	4644      	mov	r4, r8
 80045c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80045cc:	3501      	adds	r5, #1
 80045ce:	615f      	str	r7, [r3, #20]
 80045d0:	6125      	str	r5, [r4, #16]
 80045d2:	4620      	mov	r0, r4
 80045d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080045d8 <__hi0bits>:
 80045d8:	0c02      	lsrs	r2, r0, #16
 80045da:	0412      	lsls	r2, r2, #16
 80045dc:	4603      	mov	r3, r0
 80045de:	b9b2      	cbnz	r2, 800460e <__hi0bits+0x36>
 80045e0:	0403      	lsls	r3, r0, #16
 80045e2:	2010      	movs	r0, #16
 80045e4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80045e8:	bf04      	itt	eq
 80045ea:	021b      	lsleq	r3, r3, #8
 80045ec:	3008      	addeq	r0, #8
 80045ee:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80045f2:	bf04      	itt	eq
 80045f4:	011b      	lsleq	r3, r3, #4
 80045f6:	3004      	addeq	r0, #4
 80045f8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80045fc:	bf04      	itt	eq
 80045fe:	009b      	lsleq	r3, r3, #2
 8004600:	3002      	addeq	r0, #2
 8004602:	2b00      	cmp	r3, #0
 8004604:	db06      	blt.n	8004614 <__hi0bits+0x3c>
 8004606:	005b      	lsls	r3, r3, #1
 8004608:	d503      	bpl.n	8004612 <__hi0bits+0x3a>
 800460a:	3001      	adds	r0, #1
 800460c:	4770      	bx	lr
 800460e:	2000      	movs	r0, #0
 8004610:	e7e8      	b.n	80045e4 <__hi0bits+0xc>
 8004612:	2020      	movs	r0, #32
 8004614:	4770      	bx	lr

08004616 <__lo0bits>:
 8004616:	6803      	ldr	r3, [r0, #0]
 8004618:	f013 0207 	ands.w	r2, r3, #7
 800461c:	4601      	mov	r1, r0
 800461e:	d00b      	beq.n	8004638 <__lo0bits+0x22>
 8004620:	07da      	lsls	r2, r3, #31
 8004622:	d423      	bmi.n	800466c <__lo0bits+0x56>
 8004624:	0798      	lsls	r0, r3, #30
 8004626:	bf49      	itett	mi
 8004628:	085b      	lsrmi	r3, r3, #1
 800462a:	089b      	lsrpl	r3, r3, #2
 800462c:	2001      	movmi	r0, #1
 800462e:	600b      	strmi	r3, [r1, #0]
 8004630:	bf5c      	itt	pl
 8004632:	600b      	strpl	r3, [r1, #0]
 8004634:	2002      	movpl	r0, #2
 8004636:	4770      	bx	lr
 8004638:	b298      	uxth	r0, r3
 800463a:	b9a8      	cbnz	r0, 8004668 <__lo0bits+0x52>
 800463c:	0c1b      	lsrs	r3, r3, #16
 800463e:	2010      	movs	r0, #16
 8004640:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004644:	bf04      	itt	eq
 8004646:	0a1b      	lsreq	r3, r3, #8
 8004648:	3008      	addeq	r0, #8
 800464a:	071a      	lsls	r2, r3, #28
 800464c:	bf04      	itt	eq
 800464e:	091b      	lsreq	r3, r3, #4
 8004650:	3004      	addeq	r0, #4
 8004652:	079a      	lsls	r2, r3, #30
 8004654:	bf04      	itt	eq
 8004656:	089b      	lsreq	r3, r3, #2
 8004658:	3002      	addeq	r0, #2
 800465a:	07da      	lsls	r2, r3, #31
 800465c:	d402      	bmi.n	8004664 <__lo0bits+0x4e>
 800465e:	085b      	lsrs	r3, r3, #1
 8004660:	d006      	beq.n	8004670 <__lo0bits+0x5a>
 8004662:	3001      	adds	r0, #1
 8004664:	600b      	str	r3, [r1, #0]
 8004666:	4770      	bx	lr
 8004668:	4610      	mov	r0, r2
 800466a:	e7e9      	b.n	8004640 <__lo0bits+0x2a>
 800466c:	2000      	movs	r0, #0
 800466e:	4770      	bx	lr
 8004670:	2020      	movs	r0, #32
 8004672:	4770      	bx	lr

08004674 <__i2b>:
 8004674:	b510      	push	{r4, lr}
 8004676:	460c      	mov	r4, r1
 8004678:	2101      	movs	r1, #1
 800467a:	f7ff ff27 	bl	80044cc <_Balloc>
 800467e:	2201      	movs	r2, #1
 8004680:	6144      	str	r4, [r0, #20]
 8004682:	6102      	str	r2, [r0, #16]
 8004684:	bd10      	pop	{r4, pc}

08004686 <__multiply>:
 8004686:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800468a:	4614      	mov	r4, r2
 800468c:	690a      	ldr	r2, [r1, #16]
 800468e:	6923      	ldr	r3, [r4, #16]
 8004690:	429a      	cmp	r2, r3
 8004692:	bfb8      	it	lt
 8004694:	460b      	movlt	r3, r1
 8004696:	4688      	mov	r8, r1
 8004698:	bfbc      	itt	lt
 800469a:	46a0      	movlt	r8, r4
 800469c:	461c      	movlt	r4, r3
 800469e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80046a2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80046a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80046aa:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80046ae:	eb07 0609 	add.w	r6, r7, r9
 80046b2:	42b3      	cmp	r3, r6
 80046b4:	bfb8      	it	lt
 80046b6:	3101      	addlt	r1, #1
 80046b8:	f7ff ff08 	bl	80044cc <_Balloc>
 80046bc:	f100 0514 	add.w	r5, r0, #20
 80046c0:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80046c4:	462b      	mov	r3, r5
 80046c6:	2200      	movs	r2, #0
 80046c8:	4573      	cmp	r3, lr
 80046ca:	d316      	bcc.n	80046fa <__multiply+0x74>
 80046cc:	f104 0214 	add.w	r2, r4, #20
 80046d0:	f108 0114 	add.w	r1, r8, #20
 80046d4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80046d8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80046dc:	9300      	str	r3, [sp, #0]
 80046de:	9b00      	ldr	r3, [sp, #0]
 80046e0:	9201      	str	r2, [sp, #4]
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d80c      	bhi.n	8004700 <__multiply+0x7a>
 80046e6:	2e00      	cmp	r6, #0
 80046e8:	dd03      	ble.n	80046f2 <__multiply+0x6c>
 80046ea:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d05d      	beq.n	80047ae <__multiply+0x128>
 80046f2:	6106      	str	r6, [r0, #16]
 80046f4:	b003      	add	sp, #12
 80046f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046fa:	f843 2b04 	str.w	r2, [r3], #4
 80046fe:	e7e3      	b.n	80046c8 <__multiply+0x42>
 8004700:	f8b2 b000 	ldrh.w	fp, [r2]
 8004704:	f1bb 0f00 	cmp.w	fp, #0
 8004708:	d023      	beq.n	8004752 <__multiply+0xcc>
 800470a:	4689      	mov	r9, r1
 800470c:	46ac      	mov	ip, r5
 800470e:	f04f 0800 	mov.w	r8, #0
 8004712:	f859 4b04 	ldr.w	r4, [r9], #4
 8004716:	f8dc a000 	ldr.w	sl, [ip]
 800471a:	b2a3      	uxth	r3, r4
 800471c:	fa1f fa8a 	uxth.w	sl, sl
 8004720:	fb0b a303 	mla	r3, fp, r3, sl
 8004724:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8004728:	f8dc 4000 	ldr.w	r4, [ip]
 800472c:	4443      	add	r3, r8
 800472e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8004732:	fb0b 840a 	mla	r4, fp, sl, r8
 8004736:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800473a:	46e2      	mov	sl, ip
 800473c:	b29b      	uxth	r3, r3
 800473e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004742:	454f      	cmp	r7, r9
 8004744:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8004748:	f84a 3b04 	str.w	r3, [sl], #4
 800474c:	d82b      	bhi.n	80047a6 <__multiply+0x120>
 800474e:	f8cc 8004 	str.w	r8, [ip, #4]
 8004752:	9b01      	ldr	r3, [sp, #4]
 8004754:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8004758:	3204      	adds	r2, #4
 800475a:	f1ba 0f00 	cmp.w	sl, #0
 800475e:	d020      	beq.n	80047a2 <__multiply+0x11c>
 8004760:	682b      	ldr	r3, [r5, #0]
 8004762:	4689      	mov	r9, r1
 8004764:	46a8      	mov	r8, r5
 8004766:	f04f 0b00 	mov.w	fp, #0
 800476a:	f8b9 c000 	ldrh.w	ip, [r9]
 800476e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8004772:	fb0a 440c 	mla	r4, sl, ip, r4
 8004776:	445c      	add	r4, fp
 8004778:	46c4      	mov	ip, r8
 800477a:	b29b      	uxth	r3, r3
 800477c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004780:	f84c 3b04 	str.w	r3, [ip], #4
 8004784:	f859 3b04 	ldr.w	r3, [r9], #4
 8004788:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800478c:	0c1b      	lsrs	r3, r3, #16
 800478e:	fb0a b303 	mla	r3, sl, r3, fp
 8004792:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8004796:	454f      	cmp	r7, r9
 8004798:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800479c:	d805      	bhi.n	80047aa <__multiply+0x124>
 800479e:	f8c8 3004 	str.w	r3, [r8, #4]
 80047a2:	3504      	adds	r5, #4
 80047a4:	e79b      	b.n	80046de <__multiply+0x58>
 80047a6:	46d4      	mov	ip, sl
 80047a8:	e7b3      	b.n	8004712 <__multiply+0x8c>
 80047aa:	46e0      	mov	r8, ip
 80047ac:	e7dd      	b.n	800476a <__multiply+0xe4>
 80047ae:	3e01      	subs	r6, #1
 80047b0:	e799      	b.n	80046e6 <__multiply+0x60>
	...

080047b4 <__pow5mult>:
 80047b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047b8:	4615      	mov	r5, r2
 80047ba:	f012 0203 	ands.w	r2, r2, #3
 80047be:	4606      	mov	r6, r0
 80047c0:	460f      	mov	r7, r1
 80047c2:	d007      	beq.n	80047d4 <__pow5mult+0x20>
 80047c4:	3a01      	subs	r2, #1
 80047c6:	4c21      	ldr	r4, [pc, #132]	; (800484c <__pow5mult+0x98>)
 80047c8:	2300      	movs	r3, #0
 80047ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80047ce:	f7ff fec8 	bl	8004562 <__multadd>
 80047d2:	4607      	mov	r7, r0
 80047d4:	10ad      	asrs	r5, r5, #2
 80047d6:	d035      	beq.n	8004844 <__pow5mult+0x90>
 80047d8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80047da:	b93c      	cbnz	r4, 80047ec <__pow5mult+0x38>
 80047dc:	2010      	movs	r0, #16
 80047de:	f001 f833 	bl	8005848 <malloc>
 80047e2:	6270      	str	r0, [r6, #36]	; 0x24
 80047e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80047e8:	6004      	str	r4, [r0, #0]
 80047ea:	60c4      	str	r4, [r0, #12]
 80047ec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80047f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80047f4:	b94c      	cbnz	r4, 800480a <__pow5mult+0x56>
 80047f6:	f240 2171 	movw	r1, #625	; 0x271
 80047fa:	4630      	mov	r0, r6
 80047fc:	f7ff ff3a 	bl	8004674 <__i2b>
 8004800:	2300      	movs	r3, #0
 8004802:	f8c8 0008 	str.w	r0, [r8, #8]
 8004806:	4604      	mov	r4, r0
 8004808:	6003      	str	r3, [r0, #0]
 800480a:	f04f 0800 	mov.w	r8, #0
 800480e:	07eb      	lsls	r3, r5, #31
 8004810:	d50a      	bpl.n	8004828 <__pow5mult+0x74>
 8004812:	4639      	mov	r1, r7
 8004814:	4622      	mov	r2, r4
 8004816:	4630      	mov	r0, r6
 8004818:	f7ff ff35 	bl	8004686 <__multiply>
 800481c:	4639      	mov	r1, r7
 800481e:	4681      	mov	r9, r0
 8004820:	4630      	mov	r0, r6
 8004822:	f7ff fe87 	bl	8004534 <_Bfree>
 8004826:	464f      	mov	r7, r9
 8004828:	106d      	asrs	r5, r5, #1
 800482a:	d00b      	beq.n	8004844 <__pow5mult+0x90>
 800482c:	6820      	ldr	r0, [r4, #0]
 800482e:	b938      	cbnz	r0, 8004840 <__pow5mult+0x8c>
 8004830:	4622      	mov	r2, r4
 8004832:	4621      	mov	r1, r4
 8004834:	4630      	mov	r0, r6
 8004836:	f7ff ff26 	bl	8004686 <__multiply>
 800483a:	6020      	str	r0, [r4, #0]
 800483c:	f8c0 8000 	str.w	r8, [r0]
 8004840:	4604      	mov	r4, r0
 8004842:	e7e4      	b.n	800480e <__pow5mult+0x5a>
 8004844:	4638      	mov	r0, r7
 8004846:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800484a:	bf00      	nop
 800484c:	08005998 	.word	0x08005998

08004850 <__lshift>:
 8004850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004854:	460c      	mov	r4, r1
 8004856:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800485a:	6923      	ldr	r3, [r4, #16]
 800485c:	6849      	ldr	r1, [r1, #4]
 800485e:	eb0a 0903 	add.w	r9, sl, r3
 8004862:	68a3      	ldr	r3, [r4, #8]
 8004864:	4607      	mov	r7, r0
 8004866:	4616      	mov	r6, r2
 8004868:	f109 0501 	add.w	r5, r9, #1
 800486c:	42ab      	cmp	r3, r5
 800486e:	db32      	blt.n	80048d6 <__lshift+0x86>
 8004870:	4638      	mov	r0, r7
 8004872:	f7ff fe2b 	bl	80044cc <_Balloc>
 8004876:	2300      	movs	r3, #0
 8004878:	4680      	mov	r8, r0
 800487a:	f100 0114 	add.w	r1, r0, #20
 800487e:	461a      	mov	r2, r3
 8004880:	4553      	cmp	r3, sl
 8004882:	db2b      	blt.n	80048dc <__lshift+0x8c>
 8004884:	6920      	ldr	r0, [r4, #16]
 8004886:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800488a:	f104 0314 	add.w	r3, r4, #20
 800488e:	f016 021f 	ands.w	r2, r6, #31
 8004892:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004896:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800489a:	d025      	beq.n	80048e8 <__lshift+0x98>
 800489c:	f1c2 0e20 	rsb	lr, r2, #32
 80048a0:	2000      	movs	r0, #0
 80048a2:	681e      	ldr	r6, [r3, #0]
 80048a4:	468a      	mov	sl, r1
 80048a6:	4096      	lsls	r6, r2
 80048a8:	4330      	orrs	r0, r6
 80048aa:	f84a 0b04 	str.w	r0, [sl], #4
 80048ae:	f853 0b04 	ldr.w	r0, [r3], #4
 80048b2:	459c      	cmp	ip, r3
 80048b4:	fa20 f00e 	lsr.w	r0, r0, lr
 80048b8:	d814      	bhi.n	80048e4 <__lshift+0x94>
 80048ba:	6048      	str	r0, [r1, #4]
 80048bc:	b108      	cbz	r0, 80048c2 <__lshift+0x72>
 80048be:	f109 0502 	add.w	r5, r9, #2
 80048c2:	3d01      	subs	r5, #1
 80048c4:	4638      	mov	r0, r7
 80048c6:	f8c8 5010 	str.w	r5, [r8, #16]
 80048ca:	4621      	mov	r1, r4
 80048cc:	f7ff fe32 	bl	8004534 <_Bfree>
 80048d0:	4640      	mov	r0, r8
 80048d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048d6:	3101      	adds	r1, #1
 80048d8:	005b      	lsls	r3, r3, #1
 80048da:	e7c7      	b.n	800486c <__lshift+0x1c>
 80048dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80048e0:	3301      	adds	r3, #1
 80048e2:	e7cd      	b.n	8004880 <__lshift+0x30>
 80048e4:	4651      	mov	r1, sl
 80048e6:	e7dc      	b.n	80048a2 <__lshift+0x52>
 80048e8:	3904      	subs	r1, #4
 80048ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80048ee:	f841 2f04 	str.w	r2, [r1, #4]!
 80048f2:	459c      	cmp	ip, r3
 80048f4:	d8f9      	bhi.n	80048ea <__lshift+0x9a>
 80048f6:	e7e4      	b.n	80048c2 <__lshift+0x72>

080048f8 <__mcmp>:
 80048f8:	6903      	ldr	r3, [r0, #16]
 80048fa:	690a      	ldr	r2, [r1, #16]
 80048fc:	1a9b      	subs	r3, r3, r2
 80048fe:	b530      	push	{r4, r5, lr}
 8004900:	d10c      	bne.n	800491c <__mcmp+0x24>
 8004902:	0092      	lsls	r2, r2, #2
 8004904:	3014      	adds	r0, #20
 8004906:	3114      	adds	r1, #20
 8004908:	1884      	adds	r4, r0, r2
 800490a:	4411      	add	r1, r2
 800490c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004910:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004914:	4295      	cmp	r5, r2
 8004916:	d003      	beq.n	8004920 <__mcmp+0x28>
 8004918:	d305      	bcc.n	8004926 <__mcmp+0x2e>
 800491a:	2301      	movs	r3, #1
 800491c:	4618      	mov	r0, r3
 800491e:	bd30      	pop	{r4, r5, pc}
 8004920:	42a0      	cmp	r0, r4
 8004922:	d3f3      	bcc.n	800490c <__mcmp+0x14>
 8004924:	e7fa      	b.n	800491c <__mcmp+0x24>
 8004926:	f04f 33ff 	mov.w	r3, #4294967295
 800492a:	e7f7      	b.n	800491c <__mcmp+0x24>

0800492c <__mdiff>:
 800492c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004930:	460d      	mov	r5, r1
 8004932:	4607      	mov	r7, r0
 8004934:	4611      	mov	r1, r2
 8004936:	4628      	mov	r0, r5
 8004938:	4614      	mov	r4, r2
 800493a:	f7ff ffdd 	bl	80048f8 <__mcmp>
 800493e:	1e06      	subs	r6, r0, #0
 8004940:	d108      	bne.n	8004954 <__mdiff+0x28>
 8004942:	4631      	mov	r1, r6
 8004944:	4638      	mov	r0, r7
 8004946:	f7ff fdc1 	bl	80044cc <_Balloc>
 800494a:	2301      	movs	r3, #1
 800494c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8004950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004954:	bfa4      	itt	ge
 8004956:	4623      	movge	r3, r4
 8004958:	462c      	movge	r4, r5
 800495a:	4638      	mov	r0, r7
 800495c:	6861      	ldr	r1, [r4, #4]
 800495e:	bfa6      	itte	ge
 8004960:	461d      	movge	r5, r3
 8004962:	2600      	movge	r6, #0
 8004964:	2601      	movlt	r6, #1
 8004966:	f7ff fdb1 	bl	80044cc <_Balloc>
 800496a:	692b      	ldr	r3, [r5, #16]
 800496c:	60c6      	str	r6, [r0, #12]
 800496e:	6926      	ldr	r6, [r4, #16]
 8004970:	f105 0914 	add.w	r9, r5, #20
 8004974:	f104 0214 	add.w	r2, r4, #20
 8004978:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800497c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8004980:	f100 0514 	add.w	r5, r0, #20
 8004984:	f04f 0e00 	mov.w	lr, #0
 8004988:	f852 ab04 	ldr.w	sl, [r2], #4
 800498c:	f859 4b04 	ldr.w	r4, [r9], #4
 8004990:	fa1e f18a 	uxtah	r1, lr, sl
 8004994:	b2a3      	uxth	r3, r4
 8004996:	1ac9      	subs	r1, r1, r3
 8004998:	0c23      	lsrs	r3, r4, #16
 800499a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800499e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80049a2:	b289      	uxth	r1, r1
 80049a4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80049a8:	45c8      	cmp	r8, r9
 80049aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80049ae:	4694      	mov	ip, r2
 80049b0:	f845 3b04 	str.w	r3, [r5], #4
 80049b4:	d8e8      	bhi.n	8004988 <__mdiff+0x5c>
 80049b6:	45bc      	cmp	ip, r7
 80049b8:	d304      	bcc.n	80049c4 <__mdiff+0x98>
 80049ba:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80049be:	b183      	cbz	r3, 80049e2 <__mdiff+0xb6>
 80049c0:	6106      	str	r6, [r0, #16]
 80049c2:	e7c5      	b.n	8004950 <__mdiff+0x24>
 80049c4:	f85c 1b04 	ldr.w	r1, [ip], #4
 80049c8:	fa1e f381 	uxtah	r3, lr, r1
 80049cc:	141a      	asrs	r2, r3, #16
 80049ce:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80049d8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80049dc:	f845 3b04 	str.w	r3, [r5], #4
 80049e0:	e7e9      	b.n	80049b6 <__mdiff+0x8a>
 80049e2:	3e01      	subs	r6, #1
 80049e4:	e7e9      	b.n	80049ba <__mdiff+0x8e>

080049e6 <__d2b>:
 80049e6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80049ea:	460e      	mov	r6, r1
 80049ec:	2101      	movs	r1, #1
 80049ee:	ec59 8b10 	vmov	r8, r9, d0
 80049f2:	4615      	mov	r5, r2
 80049f4:	f7ff fd6a 	bl	80044cc <_Balloc>
 80049f8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80049fc:	4607      	mov	r7, r0
 80049fe:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004a02:	bb34      	cbnz	r4, 8004a52 <__d2b+0x6c>
 8004a04:	9301      	str	r3, [sp, #4]
 8004a06:	f1b8 0300 	subs.w	r3, r8, #0
 8004a0a:	d027      	beq.n	8004a5c <__d2b+0x76>
 8004a0c:	a802      	add	r0, sp, #8
 8004a0e:	f840 3d08 	str.w	r3, [r0, #-8]!
 8004a12:	f7ff fe00 	bl	8004616 <__lo0bits>
 8004a16:	9900      	ldr	r1, [sp, #0]
 8004a18:	b1f0      	cbz	r0, 8004a58 <__d2b+0x72>
 8004a1a:	9a01      	ldr	r2, [sp, #4]
 8004a1c:	f1c0 0320 	rsb	r3, r0, #32
 8004a20:	fa02 f303 	lsl.w	r3, r2, r3
 8004a24:	430b      	orrs	r3, r1
 8004a26:	40c2      	lsrs	r2, r0
 8004a28:	617b      	str	r3, [r7, #20]
 8004a2a:	9201      	str	r2, [sp, #4]
 8004a2c:	9b01      	ldr	r3, [sp, #4]
 8004a2e:	61bb      	str	r3, [r7, #24]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	bf14      	ite	ne
 8004a34:	2102      	movne	r1, #2
 8004a36:	2101      	moveq	r1, #1
 8004a38:	6139      	str	r1, [r7, #16]
 8004a3a:	b1c4      	cbz	r4, 8004a6e <__d2b+0x88>
 8004a3c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8004a40:	4404      	add	r4, r0
 8004a42:	6034      	str	r4, [r6, #0]
 8004a44:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004a48:	6028      	str	r0, [r5, #0]
 8004a4a:	4638      	mov	r0, r7
 8004a4c:	b003      	add	sp, #12
 8004a4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004a52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a56:	e7d5      	b.n	8004a04 <__d2b+0x1e>
 8004a58:	6179      	str	r1, [r7, #20]
 8004a5a:	e7e7      	b.n	8004a2c <__d2b+0x46>
 8004a5c:	a801      	add	r0, sp, #4
 8004a5e:	f7ff fdda 	bl	8004616 <__lo0bits>
 8004a62:	9b01      	ldr	r3, [sp, #4]
 8004a64:	617b      	str	r3, [r7, #20]
 8004a66:	2101      	movs	r1, #1
 8004a68:	6139      	str	r1, [r7, #16]
 8004a6a:	3020      	adds	r0, #32
 8004a6c:	e7e5      	b.n	8004a3a <__d2b+0x54>
 8004a6e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8004a72:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004a76:	6030      	str	r0, [r6, #0]
 8004a78:	6918      	ldr	r0, [r3, #16]
 8004a7a:	f7ff fdad 	bl	80045d8 <__hi0bits>
 8004a7e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8004a82:	e7e1      	b.n	8004a48 <__d2b+0x62>

08004a84 <_mprec_log10>:
 8004a84:	2817      	cmp	r0, #23
 8004a86:	b5d0      	push	{r4, r6, r7, lr}
 8004a88:	4604      	mov	r4, r0
 8004a8a:	dc07      	bgt.n	8004a9c <_mprec_log10+0x18>
 8004a8c:	4b09      	ldr	r3, [pc, #36]	; (8004ab4 <_mprec_log10+0x30>)
 8004a8e:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
 8004a92:	e9d4 0100 	ldrd	r0, r1, [r4]
 8004a96:	ec41 0b10 	vmov	d0, r0, r1
 8004a9a:	bdd0      	pop	{r4, r6, r7, pc}
 8004a9c:	4906      	ldr	r1, [pc, #24]	; (8004ab8 <_mprec_log10+0x34>)
 8004a9e:	4f07      	ldr	r7, [pc, #28]	; (8004abc <_mprec_log10+0x38>)
 8004aa0:	2000      	movs	r0, #0
 8004aa2:	2600      	movs	r6, #0
 8004aa4:	4632      	mov	r2, r6
 8004aa6:	463b      	mov	r3, r7
 8004aa8:	f7fb fd52 	bl	8000550 <__aeabi_dmul>
 8004aac:	3c01      	subs	r4, #1
 8004aae:	d1f9      	bne.n	8004aa4 <_mprec_log10+0x20>
 8004ab0:	e7f1      	b.n	8004a96 <_mprec_log10+0x12>
 8004ab2:	bf00      	nop
 8004ab4:	080058d0 	.word	0x080058d0
 8004ab8:	3ff00000 	.word	0x3ff00000
 8004abc:	40240000 	.word	0x40240000

08004ac0 <_calloc_r>:
 8004ac0:	b538      	push	{r3, r4, r5, lr}
 8004ac2:	fb02 f401 	mul.w	r4, r2, r1
 8004ac6:	4621      	mov	r1, r4
 8004ac8:	f000 f808 	bl	8004adc <_malloc_r>
 8004acc:	4605      	mov	r5, r0
 8004ace:	b118      	cbz	r0, 8004ad8 <_calloc_r+0x18>
 8004ad0:	4622      	mov	r2, r4
 8004ad2:	2100      	movs	r1, #0
 8004ad4:	f7ff fbb4 	bl	8004240 <memset>
 8004ad8:	4628      	mov	r0, r5
 8004ada:	bd38      	pop	{r3, r4, r5, pc}

08004adc <_malloc_r>:
 8004adc:	b570      	push	{r4, r5, r6, lr}
 8004ade:	1ccd      	adds	r5, r1, #3
 8004ae0:	f025 0503 	bic.w	r5, r5, #3
 8004ae4:	3508      	adds	r5, #8
 8004ae6:	2d0c      	cmp	r5, #12
 8004ae8:	bf38      	it	cc
 8004aea:	250c      	movcc	r5, #12
 8004aec:	2d00      	cmp	r5, #0
 8004aee:	4606      	mov	r6, r0
 8004af0:	db01      	blt.n	8004af6 <_malloc_r+0x1a>
 8004af2:	42a9      	cmp	r1, r5
 8004af4:	d903      	bls.n	8004afe <_malloc_r+0x22>
 8004af6:	230c      	movs	r3, #12
 8004af8:	6033      	str	r3, [r6, #0]
 8004afa:	2000      	movs	r0, #0
 8004afc:	bd70      	pop	{r4, r5, r6, pc}
 8004afe:	f000 feb6 	bl	800586e <__malloc_lock>
 8004b02:	4a21      	ldr	r2, [pc, #132]	; (8004b88 <_malloc_r+0xac>)
 8004b04:	6814      	ldr	r4, [r2, #0]
 8004b06:	4621      	mov	r1, r4
 8004b08:	b991      	cbnz	r1, 8004b30 <_malloc_r+0x54>
 8004b0a:	4c20      	ldr	r4, [pc, #128]	; (8004b8c <_malloc_r+0xb0>)
 8004b0c:	6823      	ldr	r3, [r4, #0]
 8004b0e:	b91b      	cbnz	r3, 8004b18 <_malloc_r+0x3c>
 8004b10:	4630      	mov	r0, r6
 8004b12:	f000 f83d 	bl	8004b90 <_sbrk_r>
 8004b16:	6020      	str	r0, [r4, #0]
 8004b18:	4629      	mov	r1, r5
 8004b1a:	4630      	mov	r0, r6
 8004b1c:	f000 f838 	bl	8004b90 <_sbrk_r>
 8004b20:	1c43      	adds	r3, r0, #1
 8004b22:	d124      	bne.n	8004b6e <_malloc_r+0x92>
 8004b24:	230c      	movs	r3, #12
 8004b26:	6033      	str	r3, [r6, #0]
 8004b28:	4630      	mov	r0, r6
 8004b2a:	f000 fea1 	bl	8005870 <__malloc_unlock>
 8004b2e:	e7e4      	b.n	8004afa <_malloc_r+0x1e>
 8004b30:	680b      	ldr	r3, [r1, #0]
 8004b32:	1b5b      	subs	r3, r3, r5
 8004b34:	d418      	bmi.n	8004b68 <_malloc_r+0x8c>
 8004b36:	2b0b      	cmp	r3, #11
 8004b38:	d90f      	bls.n	8004b5a <_malloc_r+0x7e>
 8004b3a:	600b      	str	r3, [r1, #0]
 8004b3c:	50cd      	str	r5, [r1, r3]
 8004b3e:	18cc      	adds	r4, r1, r3
 8004b40:	4630      	mov	r0, r6
 8004b42:	f000 fe95 	bl	8005870 <__malloc_unlock>
 8004b46:	f104 000b 	add.w	r0, r4, #11
 8004b4a:	1d23      	adds	r3, r4, #4
 8004b4c:	f020 0007 	bic.w	r0, r0, #7
 8004b50:	1ac3      	subs	r3, r0, r3
 8004b52:	d0d3      	beq.n	8004afc <_malloc_r+0x20>
 8004b54:	425a      	negs	r2, r3
 8004b56:	50e2      	str	r2, [r4, r3]
 8004b58:	e7d0      	b.n	8004afc <_malloc_r+0x20>
 8004b5a:	428c      	cmp	r4, r1
 8004b5c:	684b      	ldr	r3, [r1, #4]
 8004b5e:	bf16      	itet	ne
 8004b60:	6063      	strne	r3, [r4, #4]
 8004b62:	6013      	streq	r3, [r2, #0]
 8004b64:	460c      	movne	r4, r1
 8004b66:	e7eb      	b.n	8004b40 <_malloc_r+0x64>
 8004b68:	460c      	mov	r4, r1
 8004b6a:	6849      	ldr	r1, [r1, #4]
 8004b6c:	e7cc      	b.n	8004b08 <_malloc_r+0x2c>
 8004b6e:	1cc4      	adds	r4, r0, #3
 8004b70:	f024 0403 	bic.w	r4, r4, #3
 8004b74:	42a0      	cmp	r0, r4
 8004b76:	d005      	beq.n	8004b84 <_malloc_r+0xa8>
 8004b78:	1a21      	subs	r1, r4, r0
 8004b7a:	4630      	mov	r0, r6
 8004b7c:	f000 f808 	bl	8004b90 <_sbrk_r>
 8004b80:	3001      	adds	r0, #1
 8004b82:	d0cf      	beq.n	8004b24 <_malloc_r+0x48>
 8004b84:	6025      	str	r5, [r4, #0]
 8004b86:	e7db      	b.n	8004b40 <_malloc_r+0x64>
 8004b88:	20000094 	.word	0x20000094
 8004b8c:	20000098 	.word	0x20000098

08004b90 <_sbrk_r>:
 8004b90:	b538      	push	{r3, r4, r5, lr}
 8004b92:	4c06      	ldr	r4, [pc, #24]	; (8004bac <_sbrk_r+0x1c>)
 8004b94:	2300      	movs	r3, #0
 8004b96:	4605      	mov	r5, r0
 8004b98:	4608      	mov	r0, r1
 8004b9a:	6023      	str	r3, [r4, #0]
 8004b9c:	f7fc fdfe 	bl	800179c <_sbrk>
 8004ba0:	1c43      	adds	r3, r0, #1
 8004ba2:	d102      	bne.n	8004baa <_sbrk_r+0x1a>
 8004ba4:	6823      	ldr	r3, [r4, #0]
 8004ba6:	b103      	cbz	r3, 8004baa <_sbrk_r+0x1a>
 8004ba8:	602b      	str	r3, [r5, #0]
 8004baa:	bd38      	pop	{r3, r4, r5, pc}
 8004bac:	20000184 	.word	0x20000184

08004bb0 <strcpy>:
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004bb6:	f803 2b01 	strb.w	r2, [r3], #1
 8004bba:	2a00      	cmp	r2, #0
 8004bbc:	d1f9      	bne.n	8004bb2 <strcpy+0x2>
 8004bbe:	4770      	bx	lr

08004bc0 <quorem>:
 8004bc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bc4:	6903      	ldr	r3, [r0, #16]
 8004bc6:	690c      	ldr	r4, [r1, #16]
 8004bc8:	42a3      	cmp	r3, r4
 8004bca:	4680      	mov	r8, r0
 8004bcc:	f2c0 8082 	blt.w	8004cd4 <quorem+0x114>
 8004bd0:	3c01      	subs	r4, #1
 8004bd2:	f101 0714 	add.w	r7, r1, #20
 8004bd6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004bda:	f100 0614 	add.w	r6, r0, #20
 8004bde:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004be2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004be6:	eb06 030c 	add.w	r3, r6, ip
 8004bea:	3501      	adds	r5, #1
 8004bec:	eb07 090c 	add.w	r9, r7, ip
 8004bf0:	9301      	str	r3, [sp, #4]
 8004bf2:	fbb0 f5f5 	udiv	r5, r0, r5
 8004bf6:	b395      	cbz	r5, 8004c5e <quorem+0x9e>
 8004bf8:	f04f 0a00 	mov.w	sl, #0
 8004bfc:	4638      	mov	r0, r7
 8004bfe:	46b6      	mov	lr, r6
 8004c00:	46d3      	mov	fp, sl
 8004c02:	f850 2b04 	ldr.w	r2, [r0], #4
 8004c06:	b293      	uxth	r3, r2
 8004c08:	fb05 a303 	mla	r3, r5, r3, sl
 8004c0c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	ebab 0303 	sub.w	r3, fp, r3
 8004c16:	0c12      	lsrs	r2, r2, #16
 8004c18:	f8de b000 	ldr.w	fp, [lr]
 8004c1c:	fb05 a202 	mla	r2, r5, r2, sl
 8004c20:	fa13 f38b 	uxtah	r3, r3, fp
 8004c24:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004c28:	fa1f fb82 	uxth.w	fp, r2
 8004c2c:	f8de 2000 	ldr.w	r2, [lr]
 8004c30:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004c34:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004c3e:	4581      	cmp	r9, r0
 8004c40:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004c44:	f84e 3b04 	str.w	r3, [lr], #4
 8004c48:	d2db      	bcs.n	8004c02 <quorem+0x42>
 8004c4a:	f856 300c 	ldr.w	r3, [r6, ip]
 8004c4e:	b933      	cbnz	r3, 8004c5e <quorem+0x9e>
 8004c50:	9b01      	ldr	r3, [sp, #4]
 8004c52:	3b04      	subs	r3, #4
 8004c54:	429e      	cmp	r6, r3
 8004c56:	461a      	mov	r2, r3
 8004c58:	d330      	bcc.n	8004cbc <quorem+0xfc>
 8004c5a:	f8c8 4010 	str.w	r4, [r8, #16]
 8004c5e:	4640      	mov	r0, r8
 8004c60:	f7ff fe4a 	bl	80048f8 <__mcmp>
 8004c64:	2800      	cmp	r0, #0
 8004c66:	db25      	blt.n	8004cb4 <quorem+0xf4>
 8004c68:	3501      	adds	r5, #1
 8004c6a:	4630      	mov	r0, r6
 8004c6c:	f04f 0c00 	mov.w	ip, #0
 8004c70:	f857 2b04 	ldr.w	r2, [r7], #4
 8004c74:	f8d0 e000 	ldr.w	lr, [r0]
 8004c78:	b293      	uxth	r3, r2
 8004c7a:	ebac 0303 	sub.w	r3, ip, r3
 8004c7e:	0c12      	lsrs	r2, r2, #16
 8004c80:	fa13 f38e 	uxtah	r3, r3, lr
 8004c84:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004c88:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004c92:	45b9      	cmp	r9, r7
 8004c94:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004c98:	f840 3b04 	str.w	r3, [r0], #4
 8004c9c:	d2e8      	bcs.n	8004c70 <quorem+0xb0>
 8004c9e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004ca2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8004ca6:	b92a      	cbnz	r2, 8004cb4 <quorem+0xf4>
 8004ca8:	3b04      	subs	r3, #4
 8004caa:	429e      	cmp	r6, r3
 8004cac:	461a      	mov	r2, r3
 8004cae:	d30b      	bcc.n	8004cc8 <quorem+0x108>
 8004cb0:	f8c8 4010 	str.w	r4, [r8, #16]
 8004cb4:	4628      	mov	r0, r5
 8004cb6:	b003      	add	sp, #12
 8004cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cbc:	6812      	ldr	r2, [r2, #0]
 8004cbe:	3b04      	subs	r3, #4
 8004cc0:	2a00      	cmp	r2, #0
 8004cc2:	d1ca      	bne.n	8004c5a <quorem+0x9a>
 8004cc4:	3c01      	subs	r4, #1
 8004cc6:	e7c5      	b.n	8004c54 <quorem+0x94>
 8004cc8:	6812      	ldr	r2, [r2, #0]
 8004cca:	3b04      	subs	r3, #4
 8004ccc:	2a00      	cmp	r2, #0
 8004cce:	d1ef      	bne.n	8004cb0 <quorem+0xf0>
 8004cd0:	3c01      	subs	r4, #1
 8004cd2:	e7ea      	b.n	8004caa <quorem+0xea>
 8004cd4:	2000      	movs	r0, #0
 8004cd6:	e7ee      	b.n	8004cb6 <quorem+0xf6>

08004cd8 <_dtoa_r>:
 8004cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cdc:	ec57 6b10 	vmov	r6, r7, d0
 8004ce0:	b097      	sub	sp, #92	; 0x5c
 8004ce2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004ce4:	9106      	str	r1, [sp, #24]
 8004ce6:	4604      	mov	r4, r0
 8004ce8:	920b      	str	r2, [sp, #44]	; 0x2c
 8004cea:	9312      	str	r3, [sp, #72]	; 0x48
 8004cec:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004cf0:	e9cd 6700 	strd	r6, r7, [sp]
 8004cf4:	b93d      	cbnz	r5, 8004d06 <_dtoa_r+0x2e>
 8004cf6:	2010      	movs	r0, #16
 8004cf8:	f000 fda6 	bl	8005848 <malloc>
 8004cfc:	6260      	str	r0, [r4, #36]	; 0x24
 8004cfe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004d02:	6005      	str	r5, [r0, #0]
 8004d04:	60c5      	str	r5, [r0, #12]
 8004d06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d08:	6819      	ldr	r1, [r3, #0]
 8004d0a:	b151      	cbz	r1, 8004d22 <_dtoa_r+0x4a>
 8004d0c:	685a      	ldr	r2, [r3, #4]
 8004d0e:	604a      	str	r2, [r1, #4]
 8004d10:	2301      	movs	r3, #1
 8004d12:	4093      	lsls	r3, r2
 8004d14:	608b      	str	r3, [r1, #8]
 8004d16:	4620      	mov	r0, r4
 8004d18:	f7ff fc0c 	bl	8004534 <_Bfree>
 8004d1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d1e:	2200      	movs	r2, #0
 8004d20:	601a      	str	r2, [r3, #0]
 8004d22:	1e3b      	subs	r3, r7, #0
 8004d24:	bfbb      	ittet	lt
 8004d26:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004d2a:	9301      	strlt	r3, [sp, #4]
 8004d2c:	2300      	movge	r3, #0
 8004d2e:	2201      	movlt	r2, #1
 8004d30:	bfac      	ite	ge
 8004d32:	f8c8 3000 	strge.w	r3, [r8]
 8004d36:	f8c8 2000 	strlt.w	r2, [r8]
 8004d3a:	4baf      	ldr	r3, [pc, #700]	; (8004ff8 <_dtoa_r+0x320>)
 8004d3c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004d40:	ea33 0308 	bics.w	r3, r3, r8
 8004d44:	d114      	bne.n	8004d70 <_dtoa_r+0x98>
 8004d46:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004d48:	f242 730f 	movw	r3, #9999	; 0x270f
 8004d4c:	6013      	str	r3, [r2, #0]
 8004d4e:	9b00      	ldr	r3, [sp, #0]
 8004d50:	b923      	cbnz	r3, 8004d5c <_dtoa_r+0x84>
 8004d52:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8004d56:	2800      	cmp	r0, #0
 8004d58:	f000 8542 	beq.w	80057e0 <_dtoa_r+0xb08>
 8004d5c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004d5e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800500c <_dtoa_r+0x334>
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	f000 8544 	beq.w	80057f0 <_dtoa_r+0xb18>
 8004d68:	f10b 0303 	add.w	r3, fp, #3
 8004d6c:	f000 bd3e 	b.w	80057ec <_dtoa_r+0xb14>
 8004d70:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004d74:	2200      	movs	r2, #0
 8004d76:	2300      	movs	r3, #0
 8004d78:	4630      	mov	r0, r6
 8004d7a:	4639      	mov	r1, r7
 8004d7c:	f7fb fe50 	bl	8000a20 <__aeabi_dcmpeq>
 8004d80:	4681      	mov	r9, r0
 8004d82:	b168      	cbz	r0, 8004da0 <_dtoa_r+0xc8>
 8004d84:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004d86:	2301      	movs	r3, #1
 8004d88:	6013      	str	r3, [r2, #0]
 8004d8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	f000 8524 	beq.w	80057da <_dtoa_r+0xb02>
 8004d92:	4b9a      	ldr	r3, [pc, #616]	; (8004ffc <_dtoa_r+0x324>)
 8004d94:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004d96:	f103 3bff 	add.w	fp, r3, #4294967295
 8004d9a:	6013      	str	r3, [r2, #0]
 8004d9c:	f000 bd28 	b.w	80057f0 <_dtoa_r+0xb18>
 8004da0:	aa14      	add	r2, sp, #80	; 0x50
 8004da2:	a915      	add	r1, sp, #84	; 0x54
 8004da4:	ec47 6b10 	vmov	d0, r6, r7
 8004da8:	4620      	mov	r0, r4
 8004daa:	f7ff fe1c 	bl	80049e6 <__d2b>
 8004dae:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004db2:	9004      	str	r0, [sp, #16]
 8004db4:	2d00      	cmp	r5, #0
 8004db6:	d07c      	beq.n	8004eb2 <_dtoa_r+0x1da>
 8004db8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004dbc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8004dc0:	46b2      	mov	sl, r6
 8004dc2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8004dc6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004dca:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8004dce:	2200      	movs	r2, #0
 8004dd0:	4b8b      	ldr	r3, [pc, #556]	; (8005000 <_dtoa_r+0x328>)
 8004dd2:	4650      	mov	r0, sl
 8004dd4:	4659      	mov	r1, fp
 8004dd6:	f7fb fa03 	bl	80001e0 <__aeabi_dsub>
 8004dda:	a381      	add	r3, pc, #516	; (adr r3, 8004fe0 <_dtoa_r+0x308>)
 8004ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de0:	f7fb fbb6 	bl	8000550 <__aeabi_dmul>
 8004de4:	a380      	add	r3, pc, #512	; (adr r3, 8004fe8 <_dtoa_r+0x310>)
 8004de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dea:	f7fb f9fb 	bl	80001e4 <__adddf3>
 8004dee:	4606      	mov	r6, r0
 8004df0:	4628      	mov	r0, r5
 8004df2:	460f      	mov	r7, r1
 8004df4:	f7fb fb42 	bl	800047c <__aeabi_i2d>
 8004df8:	a37d      	add	r3, pc, #500	; (adr r3, 8004ff0 <_dtoa_r+0x318>)
 8004dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dfe:	f7fb fba7 	bl	8000550 <__aeabi_dmul>
 8004e02:	4602      	mov	r2, r0
 8004e04:	460b      	mov	r3, r1
 8004e06:	4630      	mov	r0, r6
 8004e08:	4639      	mov	r1, r7
 8004e0a:	f7fb f9eb 	bl	80001e4 <__adddf3>
 8004e0e:	4606      	mov	r6, r0
 8004e10:	460f      	mov	r7, r1
 8004e12:	f7fb fe37 	bl	8000a84 <__aeabi_d2iz>
 8004e16:	2200      	movs	r2, #0
 8004e18:	4682      	mov	sl, r0
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	4630      	mov	r0, r6
 8004e1e:	4639      	mov	r1, r7
 8004e20:	f7fb fe08 	bl	8000a34 <__aeabi_dcmplt>
 8004e24:	b148      	cbz	r0, 8004e3a <_dtoa_r+0x162>
 8004e26:	4650      	mov	r0, sl
 8004e28:	f7fb fb28 	bl	800047c <__aeabi_i2d>
 8004e2c:	4632      	mov	r2, r6
 8004e2e:	463b      	mov	r3, r7
 8004e30:	f7fb fdf6 	bl	8000a20 <__aeabi_dcmpeq>
 8004e34:	b908      	cbnz	r0, 8004e3a <_dtoa_r+0x162>
 8004e36:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004e3a:	f1ba 0f16 	cmp.w	sl, #22
 8004e3e:	d859      	bhi.n	8004ef4 <_dtoa_r+0x21c>
 8004e40:	4970      	ldr	r1, [pc, #448]	; (8005004 <_dtoa_r+0x32c>)
 8004e42:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8004e46:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004e4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e4e:	f7fb fe0f 	bl	8000a70 <__aeabi_dcmpgt>
 8004e52:	2800      	cmp	r0, #0
 8004e54:	d050      	beq.n	8004ef8 <_dtoa_r+0x220>
 8004e56:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	930f      	str	r3, [sp, #60]	; 0x3c
 8004e5e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004e60:	1b5d      	subs	r5, r3, r5
 8004e62:	f1b5 0801 	subs.w	r8, r5, #1
 8004e66:	bf49      	itett	mi
 8004e68:	f1c5 0301 	rsbmi	r3, r5, #1
 8004e6c:	2300      	movpl	r3, #0
 8004e6e:	9305      	strmi	r3, [sp, #20]
 8004e70:	f04f 0800 	movmi.w	r8, #0
 8004e74:	bf58      	it	pl
 8004e76:	9305      	strpl	r3, [sp, #20]
 8004e78:	f1ba 0f00 	cmp.w	sl, #0
 8004e7c:	db3e      	blt.n	8004efc <_dtoa_r+0x224>
 8004e7e:	2300      	movs	r3, #0
 8004e80:	44d0      	add	r8, sl
 8004e82:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004e86:	9307      	str	r3, [sp, #28]
 8004e88:	9b06      	ldr	r3, [sp, #24]
 8004e8a:	2b09      	cmp	r3, #9
 8004e8c:	f200 8090 	bhi.w	8004fb0 <_dtoa_r+0x2d8>
 8004e90:	2b05      	cmp	r3, #5
 8004e92:	bfc4      	itt	gt
 8004e94:	3b04      	subgt	r3, #4
 8004e96:	9306      	strgt	r3, [sp, #24]
 8004e98:	9b06      	ldr	r3, [sp, #24]
 8004e9a:	f1a3 0302 	sub.w	r3, r3, #2
 8004e9e:	bfcc      	ite	gt
 8004ea0:	2500      	movgt	r5, #0
 8004ea2:	2501      	movle	r5, #1
 8004ea4:	2b03      	cmp	r3, #3
 8004ea6:	f200 808f 	bhi.w	8004fc8 <_dtoa_r+0x2f0>
 8004eaa:	e8df f003 	tbb	[pc, r3]
 8004eae:	7f7d      	.short	0x7f7d
 8004eb0:	7131      	.short	0x7131
 8004eb2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8004eb6:	441d      	add	r5, r3
 8004eb8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8004ebc:	2820      	cmp	r0, #32
 8004ebe:	dd13      	ble.n	8004ee8 <_dtoa_r+0x210>
 8004ec0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8004ec4:	9b00      	ldr	r3, [sp, #0]
 8004ec6:	fa08 f800 	lsl.w	r8, r8, r0
 8004eca:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8004ece:	fa23 f000 	lsr.w	r0, r3, r0
 8004ed2:	ea48 0000 	orr.w	r0, r8, r0
 8004ed6:	f7fb fac1 	bl	800045c <__aeabi_ui2d>
 8004eda:	2301      	movs	r3, #1
 8004edc:	4682      	mov	sl, r0
 8004ede:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8004ee2:	3d01      	subs	r5, #1
 8004ee4:	9313      	str	r3, [sp, #76]	; 0x4c
 8004ee6:	e772      	b.n	8004dce <_dtoa_r+0xf6>
 8004ee8:	9b00      	ldr	r3, [sp, #0]
 8004eea:	f1c0 0020 	rsb	r0, r0, #32
 8004eee:	fa03 f000 	lsl.w	r0, r3, r0
 8004ef2:	e7f0      	b.n	8004ed6 <_dtoa_r+0x1fe>
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e7b1      	b.n	8004e5c <_dtoa_r+0x184>
 8004ef8:	900f      	str	r0, [sp, #60]	; 0x3c
 8004efa:	e7b0      	b.n	8004e5e <_dtoa_r+0x186>
 8004efc:	9b05      	ldr	r3, [sp, #20]
 8004efe:	eba3 030a 	sub.w	r3, r3, sl
 8004f02:	9305      	str	r3, [sp, #20]
 8004f04:	f1ca 0300 	rsb	r3, sl, #0
 8004f08:	9307      	str	r3, [sp, #28]
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	930e      	str	r3, [sp, #56]	; 0x38
 8004f0e:	e7bb      	b.n	8004e88 <_dtoa_r+0x1b0>
 8004f10:	2301      	movs	r3, #1
 8004f12:	930a      	str	r3, [sp, #40]	; 0x28
 8004f14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	dd59      	ble.n	8004fce <_dtoa_r+0x2f6>
 8004f1a:	9302      	str	r3, [sp, #8]
 8004f1c:	4699      	mov	r9, r3
 8004f1e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004f20:	2200      	movs	r2, #0
 8004f22:	6072      	str	r2, [r6, #4]
 8004f24:	2204      	movs	r2, #4
 8004f26:	f102 0014 	add.w	r0, r2, #20
 8004f2a:	4298      	cmp	r0, r3
 8004f2c:	6871      	ldr	r1, [r6, #4]
 8004f2e:	d953      	bls.n	8004fd8 <_dtoa_r+0x300>
 8004f30:	4620      	mov	r0, r4
 8004f32:	f7ff facb 	bl	80044cc <_Balloc>
 8004f36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f38:	6030      	str	r0, [r6, #0]
 8004f3a:	f1b9 0f0e 	cmp.w	r9, #14
 8004f3e:	f8d3 b000 	ldr.w	fp, [r3]
 8004f42:	f200 80e6 	bhi.w	8005112 <_dtoa_r+0x43a>
 8004f46:	2d00      	cmp	r5, #0
 8004f48:	f000 80e3 	beq.w	8005112 <_dtoa_r+0x43a>
 8004f4c:	ed9d 7b00 	vldr	d7, [sp]
 8004f50:	f1ba 0f00 	cmp.w	sl, #0
 8004f54:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8004f58:	dd74      	ble.n	8005044 <_dtoa_r+0x36c>
 8004f5a:	4a2a      	ldr	r2, [pc, #168]	; (8005004 <_dtoa_r+0x32c>)
 8004f5c:	f00a 030f 	and.w	r3, sl, #15
 8004f60:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004f64:	ed93 7b00 	vldr	d7, [r3]
 8004f68:	ea4f 162a 	mov.w	r6, sl, asr #4
 8004f6c:	06f0      	lsls	r0, r6, #27
 8004f6e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8004f72:	d565      	bpl.n	8005040 <_dtoa_r+0x368>
 8004f74:	4b24      	ldr	r3, [pc, #144]	; (8005008 <_dtoa_r+0x330>)
 8004f76:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004f7a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004f7e:	f7fb fc11 	bl	80007a4 <__aeabi_ddiv>
 8004f82:	e9cd 0100 	strd	r0, r1, [sp]
 8004f86:	f006 060f 	and.w	r6, r6, #15
 8004f8a:	2503      	movs	r5, #3
 8004f8c:	4f1e      	ldr	r7, [pc, #120]	; (8005008 <_dtoa_r+0x330>)
 8004f8e:	e04c      	b.n	800502a <_dtoa_r+0x352>
 8004f90:	2301      	movs	r3, #1
 8004f92:	930a      	str	r3, [sp, #40]	; 0x28
 8004f94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f96:	4453      	add	r3, sl
 8004f98:	f103 0901 	add.w	r9, r3, #1
 8004f9c:	9302      	str	r3, [sp, #8]
 8004f9e:	464b      	mov	r3, r9
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	bfb8      	it	lt
 8004fa4:	2301      	movlt	r3, #1
 8004fa6:	e7ba      	b.n	8004f1e <_dtoa_r+0x246>
 8004fa8:	2300      	movs	r3, #0
 8004faa:	e7b2      	b.n	8004f12 <_dtoa_r+0x23a>
 8004fac:	2300      	movs	r3, #0
 8004fae:	e7f0      	b.n	8004f92 <_dtoa_r+0x2ba>
 8004fb0:	2501      	movs	r5, #1
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	9306      	str	r3, [sp, #24]
 8004fb6:	950a      	str	r5, [sp, #40]	; 0x28
 8004fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8004fbc:	9302      	str	r3, [sp, #8]
 8004fbe:	4699      	mov	r9, r3
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	2312      	movs	r3, #18
 8004fc4:	920b      	str	r2, [sp, #44]	; 0x2c
 8004fc6:	e7aa      	b.n	8004f1e <_dtoa_r+0x246>
 8004fc8:	2301      	movs	r3, #1
 8004fca:	930a      	str	r3, [sp, #40]	; 0x28
 8004fcc:	e7f4      	b.n	8004fb8 <_dtoa_r+0x2e0>
 8004fce:	2301      	movs	r3, #1
 8004fd0:	9302      	str	r3, [sp, #8]
 8004fd2:	4699      	mov	r9, r3
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	e7f5      	b.n	8004fc4 <_dtoa_r+0x2ec>
 8004fd8:	3101      	adds	r1, #1
 8004fda:	6071      	str	r1, [r6, #4]
 8004fdc:	0052      	lsls	r2, r2, #1
 8004fde:	e7a2      	b.n	8004f26 <_dtoa_r+0x24e>
 8004fe0:	636f4361 	.word	0x636f4361
 8004fe4:	3fd287a7 	.word	0x3fd287a7
 8004fe8:	8b60c8b3 	.word	0x8b60c8b3
 8004fec:	3fc68a28 	.word	0x3fc68a28
 8004ff0:	509f79fb 	.word	0x509f79fb
 8004ff4:	3fd34413 	.word	0x3fd34413
 8004ff8:	7ff00000 	.word	0x7ff00000
 8004ffc:	080059b2 	.word	0x080059b2
 8005000:	3ff80000 	.word	0x3ff80000
 8005004:	080058d0 	.word	0x080058d0
 8005008:	080058a8 	.word	0x080058a8
 800500c:	080059ad 	.word	0x080059ad
 8005010:	07f1      	lsls	r1, r6, #31
 8005012:	d508      	bpl.n	8005026 <_dtoa_r+0x34e>
 8005014:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005018:	e9d7 2300 	ldrd	r2, r3, [r7]
 800501c:	f7fb fa98 	bl	8000550 <__aeabi_dmul>
 8005020:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005024:	3501      	adds	r5, #1
 8005026:	1076      	asrs	r6, r6, #1
 8005028:	3708      	adds	r7, #8
 800502a:	2e00      	cmp	r6, #0
 800502c:	d1f0      	bne.n	8005010 <_dtoa_r+0x338>
 800502e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005032:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005036:	f7fb fbb5 	bl	80007a4 <__aeabi_ddiv>
 800503a:	e9cd 0100 	strd	r0, r1, [sp]
 800503e:	e01a      	b.n	8005076 <_dtoa_r+0x39e>
 8005040:	2502      	movs	r5, #2
 8005042:	e7a3      	b.n	8004f8c <_dtoa_r+0x2b4>
 8005044:	f000 80a0 	beq.w	8005188 <_dtoa_r+0x4b0>
 8005048:	f1ca 0600 	rsb	r6, sl, #0
 800504c:	4b9f      	ldr	r3, [pc, #636]	; (80052cc <_dtoa_r+0x5f4>)
 800504e:	4fa0      	ldr	r7, [pc, #640]	; (80052d0 <_dtoa_r+0x5f8>)
 8005050:	f006 020f 	and.w	r2, r6, #15
 8005054:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800505c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005060:	f7fb fa76 	bl	8000550 <__aeabi_dmul>
 8005064:	e9cd 0100 	strd	r0, r1, [sp]
 8005068:	1136      	asrs	r6, r6, #4
 800506a:	2300      	movs	r3, #0
 800506c:	2502      	movs	r5, #2
 800506e:	2e00      	cmp	r6, #0
 8005070:	d17f      	bne.n	8005172 <_dtoa_r+0x49a>
 8005072:	2b00      	cmp	r3, #0
 8005074:	d1e1      	bne.n	800503a <_dtoa_r+0x362>
 8005076:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005078:	2b00      	cmp	r3, #0
 800507a:	f000 8087 	beq.w	800518c <_dtoa_r+0x4b4>
 800507e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005082:	2200      	movs	r2, #0
 8005084:	4b93      	ldr	r3, [pc, #588]	; (80052d4 <_dtoa_r+0x5fc>)
 8005086:	4630      	mov	r0, r6
 8005088:	4639      	mov	r1, r7
 800508a:	f7fb fcd3 	bl	8000a34 <__aeabi_dcmplt>
 800508e:	2800      	cmp	r0, #0
 8005090:	d07c      	beq.n	800518c <_dtoa_r+0x4b4>
 8005092:	f1b9 0f00 	cmp.w	r9, #0
 8005096:	d079      	beq.n	800518c <_dtoa_r+0x4b4>
 8005098:	9b02      	ldr	r3, [sp, #8]
 800509a:	2b00      	cmp	r3, #0
 800509c:	dd35      	ble.n	800510a <_dtoa_r+0x432>
 800509e:	f10a 33ff 	add.w	r3, sl, #4294967295
 80050a2:	9308      	str	r3, [sp, #32]
 80050a4:	4639      	mov	r1, r7
 80050a6:	2200      	movs	r2, #0
 80050a8:	4b8b      	ldr	r3, [pc, #556]	; (80052d8 <_dtoa_r+0x600>)
 80050aa:	4630      	mov	r0, r6
 80050ac:	f7fb fa50 	bl	8000550 <__aeabi_dmul>
 80050b0:	e9cd 0100 	strd	r0, r1, [sp]
 80050b4:	9f02      	ldr	r7, [sp, #8]
 80050b6:	3501      	adds	r5, #1
 80050b8:	4628      	mov	r0, r5
 80050ba:	f7fb f9df 	bl	800047c <__aeabi_i2d>
 80050be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80050c2:	f7fb fa45 	bl	8000550 <__aeabi_dmul>
 80050c6:	2200      	movs	r2, #0
 80050c8:	4b84      	ldr	r3, [pc, #528]	; (80052dc <_dtoa_r+0x604>)
 80050ca:	f7fb f88b 	bl	80001e4 <__adddf3>
 80050ce:	4605      	mov	r5, r0
 80050d0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80050d4:	2f00      	cmp	r7, #0
 80050d6:	d15d      	bne.n	8005194 <_dtoa_r+0x4bc>
 80050d8:	2200      	movs	r2, #0
 80050da:	4b81      	ldr	r3, [pc, #516]	; (80052e0 <_dtoa_r+0x608>)
 80050dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80050e0:	f7fb f87e 	bl	80001e0 <__aeabi_dsub>
 80050e4:	462a      	mov	r2, r5
 80050e6:	4633      	mov	r3, r6
 80050e8:	e9cd 0100 	strd	r0, r1, [sp]
 80050ec:	f7fb fcc0 	bl	8000a70 <__aeabi_dcmpgt>
 80050f0:	2800      	cmp	r0, #0
 80050f2:	f040 8288 	bne.w	8005606 <_dtoa_r+0x92e>
 80050f6:	462a      	mov	r2, r5
 80050f8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80050fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005100:	f7fb fc98 	bl	8000a34 <__aeabi_dcmplt>
 8005104:	2800      	cmp	r0, #0
 8005106:	f040 827c 	bne.w	8005602 <_dtoa_r+0x92a>
 800510a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800510e:	e9cd 2300 	strd	r2, r3, [sp]
 8005112:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005114:	2b00      	cmp	r3, #0
 8005116:	f2c0 8150 	blt.w	80053ba <_dtoa_r+0x6e2>
 800511a:	f1ba 0f0e 	cmp.w	sl, #14
 800511e:	f300 814c 	bgt.w	80053ba <_dtoa_r+0x6e2>
 8005122:	4b6a      	ldr	r3, [pc, #424]	; (80052cc <_dtoa_r+0x5f4>)
 8005124:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005128:	ed93 7b00 	vldr	d7, [r3]
 800512c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800512e:	2b00      	cmp	r3, #0
 8005130:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005134:	f280 80d8 	bge.w	80052e8 <_dtoa_r+0x610>
 8005138:	f1b9 0f00 	cmp.w	r9, #0
 800513c:	f300 80d4 	bgt.w	80052e8 <_dtoa_r+0x610>
 8005140:	f040 825e 	bne.w	8005600 <_dtoa_r+0x928>
 8005144:	2200      	movs	r2, #0
 8005146:	4b66      	ldr	r3, [pc, #408]	; (80052e0 <_dtoa_r+0x608>)
 8005148:	ec51 0b17 	vmov	r0, r1, d7
 800514c:	f7fb fa00 	bl	8000550 <__aeabi_dmul>
 8005150:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005154:	f7fb fc82 	bl	8000a5c <__aeabi_dcmpge>
 8005158:	464f      	mov	r7, r9
 800515a:	464e      	mov	r6, r9
 800515c:	2800      	cmp	r0, #0
 800515e:	f040 8234 	bne.w	80055ca <_dtoa_r+0x8f2>
 8005162:	2331      	movs	r3, #49	; 0x31
 8005164:	f10b 0501 	add.w	r5, fp, #1
 8005168:	f88b 3000 	strb.w	r3, [fp]
 800516c:	f10a 0a01 	add.w	sl, sl, #1
 8005170:	e22f      	b.n	80055d2 <_dtoa_r+0x8fa>
 8005172:	07f2      	lsls	r2, r6, #31
 8005174:	d505      	bpl.n	8005182 <_dtoa_r+0x4aa>
 8005176:	e9d7 2300 	ldrd	r2, r3, [r7]
 800517a:	f7fb f9e9 	bl	8000550 <__aeabi_dmul>
 800517e:	3501      	adds	r5, #1
 8005180:	2301      	movs	r3, #1
 8005182:	1076      	asrs	r6, r6, #1
 8005184:	3708      	adds	r7, #8
 8005186:	e772      	b.n	800506e <_dtoa_r+0x396>
 8005188:	2502      	movs	r5, #2
 800518a:	e774      	b.n	8005076 <_dtoa_r+0x39e>
 800518c:	f8cd a020 	str.w	sl, [sp, #32]
 8005190:	464f      	mov	r7, r9
 8005192:	e791      	b.n	80050b8 <_dtoa_r+0x3e0>
 8005194:	4b4d      	ldr	r3, [pc, #308]	; (80052cc <_dtoa_r+0x5f4>)
 8005196:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800519a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800519e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d047      	beq.n	8005234 <_dtoa_r+0x55c>
 80051a4:	4602      	mov	r2, r0
 80051a6:	460b      	mov	r3, r1
 80051a8:	2000      	movs	r0, #0
 80051aa:	494e      	ldr	r1, [pc, #312]	; (80052e4 <_dtoa_r+0x60c>)
 80051ac:	f7fb fafa 	bl	80007a4 <__aeabi_ddiv>
 80051b0:	462a      	mov	r2, r5
 80051b2:	4633      	mov	r3, r6
 80051b4:	f7fb f814 	bl	80001e0 <__aeabi_dsub>
 80051b8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80051bc:	465d      	mov	r5, fp
 80051be:	e9dd 0100 	ldrd	r0, r1, [sp]
 80051c2:	f7fb fc5f 	bl	8000a84 <__aeabi_d2iz>
 80051c6:	4606      	mov	r6, r0
 80051c8:	f7fb f958 	bl	800047c <__aeabi_i2d>
 80051cc:	4602      	mov	r2, r0
 80051ce:	460b      	mov	r3, r1
 80051d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80051d4:	f7fb f804 	bl	80001e0 <__aeabi_dsub>
 80051d8:	3630      	adds	r6, #48	; 0x30
 80051da:	f805 6b01 	strb.w	r6, [r5], #1
 80051de:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80051e2:	e9cd 0100 	strd	r0, r1, [sp]
 80051e6:	f7fb fc25 	bl	8000a34 <__aeabi_dcmplt>
 80051ea:	2800      	cmp	r0, #0
 80051ec:	d163      	bne.n	80052b6 <_dtoa_r+0x5de>
 80051ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80051f2:	2000      	movs	r0, #0
 80051f4:	4937      	ldr	r1, [pc, #220]	; (80052d4 <_dtoa_r+0x5fc>)
 80051f6:	f7fa fff3 	bl	80001e0 <__aeabi_dsub>
 80051fa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80051fe:	f7fb fc19 	bl	8000a34 <__aeabi_dcmplt>
 8005202:	2800      	cmp	r0, #0
 8005204:	f040 80b7 	bne.w	8005376 <_dtoa_r+0x69e>
 8005208:	eba5 030b 	sub.w	r3, r5, fp
 800520c:	429f      	cmp	r7, r3
 800520e:	f77f af7c 	ble.w	800510a <_dtoa_r+0x432>
 8005212:	2200      	movs	r2, #0
 8005214:	4b30      	ldr	r3, [pc, #192]	; (80052d8 <_dtoa_r+0x600>)
 8005216:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800521a:	f7fb f999 	bl	8000550 <__aeabi_dmul>
 800521e:	2200      	movs	r2, #0
 8005220:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005224:	4b2c      	ldr	r3, [pc, #176]	; (80052d8 <_dtoa_r+0x600>)
 8005226:	e9dd 0100 	ldrd	r0, r1, [sp]
 800522a:	f7fb f991 	bl	8000550 <__aeabi_dmul>
 800522e:	e9cd 0100 	strd	r0, r1, [sp]
 8005232:	e7c4      	b.n	80051be <_dtoa_r+0x4e6>
 8005234:	462a      	mov	r2, r5
 8005236:	4633      	mov	r3, r6
 8005238:	f7fb f98a 	bl	8000550 <__aeabi_dmul>
 800523c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005240:	eb0b 0507 	add.w	r5, fp, r7
 8005244:	465e      	mov	r6, fp
 8005246:	e9dd 0100 	ldrd	r0, r1, [sp]
 800524a:	f7fb fc1b 	bl	8000a84 <__aeabi_d2iz>
 800524e:	4607      	mov	r7, r0
 8005250:	f7fb f914 	bl	800047c <__aeabi_i2d>
 8005254:	3730      	adds	r7, #48	; 0x30
 8005256:	4602      	mov	r2, r0
 8005258:	460b      	mov	r3, r1
 800525a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800525e:	f7fa ffbf 	bl	80001e0 <__aeabi_dsub>
 8005262:	f806 7b01 	strb.w	r7, [r6], #1
 8005266:	42ae      	cmp	r6, r5
 8005268:	e9cd 0100 	strd	r0, r1, [sp]
 800526c:	f04f 0200 	mov.w	r2, #0
 8005270:	d126      	bne.n	80052c0 <_dtoa_r+0x5e8>
 8005272:	4b1c      	ldr	r3, [pc, #112]	; (80052e4 <_dtoa_r+0x60c>)
 8005274:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005278:	f7fa ffb4 	bl	80001e4 <__adddf3>
 800527c:	4602      	mov	r2, r0
 800527e:	460b      	mov	r3, r1
 8005280:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005284:	f7fb fbf4 	bl	8000a70 <__aeabi_dcmpgt>
 8005288:	2800      	cmp	r0, #0
 800528a:	d174      	bne.n	8005376 <_dtoa_r+0x69e>
 800528c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005290:	2000      	movs	r0, #0
 8005292:	4914      	ldr	r1, [pc, #80]	; (80052e4 <_dtoa_r+0x60c>)
 8005294:	f7fa ffa4 	bl	80001e0 <__aeabi_dsub>
 8005298:	4602      	mov	r2, r0
 800529a:	460b      	mov	r3, r1
 800529c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80052a0:	f7fb fbc8 	bl	8000a34 <__aeabi_dcmplt>
 80052a4:	2800      	cmp	r0, #0
 80052a6:	f43f af30 	beq.w	800510a <_dtoa_r+0x432>
 80052aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80052ae:	2b30      	cmp	r3, #48	; 0x30
 80052b0:	f105 32ff 	add.w	r2, r5, #4294967295
 80052b4:	d002      	beq.n	80052bc <_dtoa_r+0x5e4>
 80052b6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80052ba:	e04a      	b.n	8005352 <_dtoa_r+0x67a>
 80052bc:	4615      	mov	r5, r2
 80052be:	e7f4      	b.n	80052aa <_dtoa_r+0x5d2>
 80052c0:	4b05      	ldr	r3, [pc, #20]	; (80052d8 <_dtoa_r+0x600>)
 80052c2:	f7fb f945 	bl	8000550 <__aeabi_dmul>
 80052c6:	e9cd 0100 	strd	r0, r1, [sp]
 80052ca:	e7bc      	b.n	8005246 <_dtoa_r+0x56e>
 80052cc:	080058d0 	.word	0x080058d0
 80052d0:	080058a8 	.word	0x080058a8
 80052d4:	3ff00000 	.word	0x3ff00000
 80052d8:	40240000 	.word	0x40240000
 80052dc:	401c0000 	.word	0x401c0000
 80052e0:	40140000 	.word	0x40140000
 80052e4:	3fe00000 	.word	0x3fe00000
 80052e8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80052ec:	465d      	mov	r5, fp
 80052ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80052f2:	4630      	mov	r0, r6
 80052f4:	4639      	mov	r1, r7
 80052f6:	f7fb fa55 	bl	80007a4 <__aeabi_ddiv>
 80052fa:	f7fb fbc3 	bl	8000a84 <__aeabi_d2iz>
 80052fe:	4680      	mov	r8, r0
 8005300:	f7fb f8bc 	bl	800047c <__aeabi_i2d>
 8005304:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005308:	f7fb f922 	bl	8000550 <__aeabi_dmul>
 800530c:	4602      	mov	r2, r0
 800530e:	460b      	mov	r3, r1
 8005310:	4630      	mov	r0, r6
 8005312:	4639      	mov	r1, r7
 8005314:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8005318:	f7fa ff62 	bl	80001e0 <__aeabi_dsub>
 800531c:	f805 6b01 	strb.w	r6, [r5], #1
 8005320:	eba5 060b 	sub.w	r6, r5, fp
 8005324:	45b1      	cmp	r9, r6
 8005326:	4602      	mov	r2, r0
 8005328:	460b      	mov	r3, r1
 800532a:	d139      	bne.n	80053a0 <_dtoa_r+0x6c8>
 800532c:	f7fa ff5a 	bl	80001e4 <__adddf3>
 8005330:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005334:	4606      	mov	r6, r0
 8005336:	460f      	mov	r7, r1
 8005338:	f7fb fb9a 	bl	8000a70 <__aeabi_dcmpgt>
 800533c:	b9c8      	cbnz	r0, 8005372 <_dtoa_r+0x69a>
 800533e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005342:	4630      	mov	r0, r6
 8005344:	4639      	mov	r1, r7
 8005346:	f7fb fb6b 	bl	8000a20 <__aeabi_dcmpeq>
 800534a:	b110      	cbz	r0, 8005352 <_dtoa_r+0x67a>
 800534c:	f018 0f01 	tst.w	r8, #1
 8005350:	d10f      	bne.n	8005372 <_dtoa_r+0x69a>
 8005352:	9904      	ldr	r1, [sp, #16]
 8005354:	4620      	mov	r0, r4
 8005356:	f7ff f8ed 	bl	8004534 <_Bfree>
 800535a:	2300      	movs	r3, #0
 800535c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800535e:	702b      	strb	r3, [r5, #0]
 8005360:	f10a 0301 	add.w	r3, sl, #1
 8005364:	6013      	str	r3, [r2, #0]
 8005366:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005368:	2b00      	cmp	r3, #0
 800536a:	f000 8241 	beq.w	80057f0 <_dtoa_r+0xb18>
 800536e:	601d      	str	r5, [r3, #0]
 8005370:	e23e      	b.n	80057f0 <_dtoa_r+0xb18>
 8005372:	f8cd a020 	str.w	sl, [sp, #32]
 8005376:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800537a:	2a39      	cmp	r2, #57	; 0x39
 800537c:	f105 33ff 	add.w	r3, r5, #4294967295
 8005380:	d108      	bne.n	8005394 <_dtoa_r+0x6bc>
 8005382:	459b      	cmp	fp, r3
 8005384:	d10a      	bne.n	800539c <_dtoa_r+0x6c4>
 8005386:	9b08      	ldr	r3, [sp, #32]
 8005388:	3301      	adds	r3, #1
 800538a:	9308      	str	r3, [sp, #32]
 800538c:	2330      	movs	r3, #48	; 0x30
 800538e:	f88b 3000 	strb.w	r3, [fp]
 8005392:	465b      	mov	r3, fp
 8005394:	781a      	ldrb	r2, [r3, #0]
 8005396:	3201      	adds	r2, #1
 8005398:	701a      	strb	r2, [r3, #0]
 800539a:	e78c      	b.n	80052b6 <_dtoa_r+0x5de>
 800539c:	461d      	mov	r5, r3
 800539e:	e7ea      	b.n	8005376 <_dtoa_r+0x69e>
 80053a0:	2200      	movs	r2, #0
 80053a2:	4b9b      	ldr	r3, [pc, #620]	; (8005610 <_dtoa_r+0x938>)
 80053a4:	f7fb f8d4 	bl	8000550 <__aeabi_dmul>
 80053a8:	2200      	movs	r2, #0
 80053aa:	2300      	movs	r3, #0
 80053ac:	4606      	mov	r6, r0
 80053ae:	460f      	mov	r7, r1
 80053b0:	f7fb fb36 	bl	8000a20 <__aeabi_dcmpeq>
 80053b4:	2800      	cmp	r0, #0
 80053b6:	d09a      	beq.n	80052ee <_dtoa_r+0x616>
 80053b8:	e7cb      	b.n	8005352 <_dtoa_r+0x67a>
 80053ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80053bc:	2a00      	cmp	r2, #0
 80053be:	f000 808b 	beq.w	80054d8 <_dtoa_r+0x800>
 80053c2:	9a06      	ldr	r2, [sp, #24]
 80053c4:	2a01      	cmp	r2, #1
 80053c6:	dc6e      	bgt.n	80054a6 <_dtoa_r+0x7ce>
 80053c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80053ca:	2a00      	cmp	r2, #0
 80053cc:	d067      	beq.n	800549e <_dtoa_r+0x7c6>
 80053ce:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80053d2:	9f07      	ldr	r7, [sp, #28]
 80053d4:	9d05      	ldr	r5, [sp, #20]
 80053d6:	9a05      	ldr	r2, [sp, #20]
 80053d8:	2101      	movs	r1, #1
 80053da:	441a      	add	r2, r3
 80053dc:	4620      	mov	r0, r4
 80053de:	9205      	str	r2, [sp, #20]
 80053e0:	4498      	add	r8, r3
 80053e2:	f7ff f947 	bl	8004674 <__i2b>
 80053e6:	4606      	mov	r6, r0
 80053e8:	2d00      	cmp	r5, #0
 80053ea:	dd0c      	ble.n	8005406 <_dtoa_r+0x72e>
 80053ec:	f1b8 0f00 	cmp.w	r8, #0
 80053f0:	dd09      	ble.n	8005406 <_dtoa_r+0x72e>
 80053f2:	4545      	cmp	r5, r8
 80053f4:	9a05      	ldr	r2, [sp, #20]
 80053f6:	462b      	mov	r3, r5
 80053f8:	bfa8      	it	ge
 80053fa:	4643      	movge	r3, r8
 80053fc:	1ad2      	subs	r2, r2, r3
 80053fe:	9205      	str	r2, [sp, #20]
 8005400:	1aed      	subs	r5, r5, r3
 8005402:	eba8 0803 	sub.w	r8, r8, r3
 8005406:	9b07      	ldr	r3, [sp, #28]
 8005408:	b1eb      	cbz	r3, 8005446 <_dtoa_r+0x76e>
 800540a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800540c:	2b00      	cmp	r3, #0
 800540e:	d067      	beq.n	80054e0 <_dtoa_r+0x808>
 8005410:	b18f      	cbz	r7, 8005436 <_dtoa_r+0x75e>
 8005412:	4631      	mov	r1, r6
 8005414:	463a      	mov	r2, r7
 8005416:	4620      	mov	r0, r4
 8005418:	f7ff f9cc 	bl	80047b4 <__pow5mult>
 800541c:	9a04      	ldr	r2, [sp, #16]
 800541e:	4601      	mov	r1, r0
 8005420:	4606      	mov	r6, r0
 8005422:	4620      	mov	r0, r4
 8005424:	f7ff f92f 	bl	8004686 <__multiply>
 8005428:	9904      	ldr	r1, [sp, #16]
 800542a:	9008      	str	r0, [sp, #32]
 800542c:	4620      	mov	r0, r4
 800542e:	f7ff f881 	bl	8004534 <_Bfree>
 8005432:	9b08      	ldr	r3, [sp, #32]
 8005434:	9304      	str	r3, [sp, #16]
 8005436:	9b07      	ldr	r3, [sp, #28]
 8005438:	1bda      	subs	r2, r3, r7
 800543a:	d004      	beq.n	8005446 <_dtoa_r+0x76e>
 800543c:	9904      	ldr	r1, [sp, #16]
 800543e:	4620      	mov	r0, r4
 8005440:	f7ff f9b8 	bl	80047b4 <__pow5mult>
 8005444:	9004      	str	r0, [sp, #16]
 8005446:	2101      	movs	r1, #1
 8005448:	4620      	mov	r0, r4
 800544a:	f7ff f913 	bl	8004674 <__i2b>
 800544e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005450:	4607      	mov	r7, r0
 8005452:	2b00      	cmp	r3, #0
 8005454:	f000 81d0 	beq.w	80057f8 <_dtoa_r+0xb20>
 8005458:	461a      	mov	r2, r3
 800545a:	4601      	mov	r1, r0
 800545c:	4620      	mov	r0, r4
 800545e:	f7ff f9a9 	bl	80047b4 <__pow5mult>
 8005462:	9b06      	ldr	r3, [sp, #24]
 8005464:	2b01      	cmp	r3, #1
 8005466:	4607      	mov	r7, r0
 8005468:	dc40      	bgt.n	80054ec <_dtoa_r+0x814>
 800546a:	9b00      	ldr	r3, [sp, #0]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d139      	bne.n	80054e4 <_dtoa_r+0x80c>
 8005470:	9b01      	ldr	r3, [sp, #4]
 8005472:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005476:	2b00      	cmp	r3, #0
 8005478:	d136      	bne.n	80054e8 <_dtoa_r+0x810>
 800547a:	9b01      	ldr	r3, [sp, #4]
 800547c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005480:	0d1b      	lsrs	r3, r3, #20
 8005482:	051b      	lsls	r3, r3, #20
 8005484:	b12b      	cbz	r3, 8005492 <_dtoa_r+0x7ba>
 8005486:	9b05      	ldr	r3, [sp, #20]
 8005488:	3301      	adds	r3, #1
 800548a:	9305      	str	r3, [sp, #20]
 800548c:	f108 0801 	add.w	r8, r8, #1
 8005490:	2301      	movs	r3, #1
 8005492:	9307      	str	r3, [sp, #28]
 8005494:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005496:	2b00      	cmp	r3, #0
 8005498:	d12a      	bne.n	80054f0 <_dtoa_r+0x818>
 800549a:	2001      	movs	r0, #1
 800549c:	e030      	b.n	8005500 <_dtoa_r+0x828>
 800549e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80054a0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80054a4:	e795      	b.n	80053d2 <_dtoa_r+0x6fa>
 80054a6:	9b07      	ldr	r3, [sp, #28]
 80054a8:	f109 37ff 	add.w	r7, r9, #4294967295
 80054ac:	42bb      	cmp	r3, r7
 80054ae:	bfbf      	itttt	lt
 80054b0:	9b07      	ldrlt	r3, [sp, #28]
 80054b2:	9707      	strlt	r7, [sp, #28]
 80054b4:	1afa      	sublt	r2, r7, r3
 80054b6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80054b8:	bfbb      	ittet	lt
 80054ba:	189b      	addlt	r3, r3, r2
 80054bc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80054be:	1bdf      	subge	r7, r3, r7
 80054c0:	2700      	movlt	r7, #0
 80054c2:	f1b9 0f00 	cmp.w	r9, #0
 80054c6:	bfb5      	itete	lt
 80054c8:	9b05      	ldrlt	r3, [sp, #20]
 80054ca:	9d05      	ldrge	r5, [sp, #20]
 80054cc:	eba3 0509 	sublt.w	r5, r3, r9
 80054d0:	464b      	movge	r3, r9
 80054d2:	bfb8      	it	lt
 80054d4:	2300      	movlt	r3, #0
 80054d6:	e77e      	b.n	80053d6 <_dtoa_r+0x6fe>
 80054d8:	9f07      	ldr	r7, [sp, #28]
 80054da:	9d05      	ldr	r5, [sp, #20]
 80054dc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80054de:	e783      	b.n	80053e8 <_dtoa_r+0x710>
 80054e0:	9a07      	ldr	r2, [sp, #28]
 80054e2:	e7ab      	b.n	800543c <_dtoa_r+0x764>
 80054e4:	2300      	movs	r3, #0
 80054e6:	e7d4      	b.n	8005492 <_dtoa_r+0x7ba>
 80054e8:	9b00      	ldr	r3, [sp, #0]
 80054ea:	e7d2      	b.n	8005492 <_dtoa_r+0x7ba>
 80054ec:	2300      	movs	r3, #0
 80054ee:	9307      	str	r3, [sp, #28]
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80054f6:	6918      	ldr	r0, [r3, #16]
 80054f8:	f7ff f86e 	bl	80045d8 <__hi0bits>
 80054fc:	f1c0 0020 	rsb	r0, r0, #32
 8005500:	4440      	add	r0, r8
 8005502:	f010 001f 	ands.w	r0, r0, #31
 8005506:	d047      	beq.n	8005598 <_dtoa_r+0x8c0>
 8005508:	f1c0 0320 	rsb	r3, r0, #32
 800550c:	2b04      	cmp	r3, #4
 800550e:	dd3b      	ble.n	8005588 <_dtoa_r+0x8b0>
 8005510:	9b05      	ldr	r3, [sp, #20]
 8005512:	f1c0 001c 	rsb	r0, r0, #28
 8005516:	4403      	add	r3, r0
 8005518:	9305      	str	r3, [sp, #20]
 800551a:	4405      	add	r5, r0
 800551c:	4480      	add	r8, r0
 800551e:	9b05      	ldr	r3, [sp, #20]
 8005520:	2b00      	cmp	r3, #0
 8005522:	dd05      	ble.n	8005530 <_dtoa_r+0x858>
 8005524:	461a      	mov	r2, r3
 8005526:	9904      	ldr	r1, [sp, #16]
 8005528:	4620      	mov	r0, r4
 800552a:	f7ff f991 	bl	8004850 <__lshift>
 800552e:	9004      	str	r0, [sp, #16]
 8005530:	f1b8 0f00 	cmp.w	r8, #0
 8005534:	dd05      	ble.n	8005542 <_dtoa_r+0x86a>
 8005536:	4639      	mov	r1, r7
 8005538:	4642      	mov	r2, r8
 800553a:	4620      	mov	r0, r4
 800553c:	f7ff f988 	bl	8004850 <__lshift>
 8005540:	4607      	mov	r7, r0
 8005542:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005544:	b353      	cbz	r3, 800559c <_dtoa_r+0x8c4>
 8005546:	4639      	mov	r1, r7
 8005548:	9804      	ldr	r0, [sp, #16]
 800554a:	f7ff f9d5 	bl	80048f8 <__mcmp>
 800554e:	2800      	cmp	r0, #0
 8005550:	da24      	bge.n	800559c <_dtoa_r+0x8c4>
 8005552:	2300      	movs	r3, #0
 8005554:	220a      	movs	r2, #10
 8005556:	9904      	ldr	r1, [sp, #16]
 8005558:	4620      	mov	r0, r4
 800555a:	f7ff f802 	bl	8004562 <__multadd>
 800555e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005560:	9004      	str	r0, [sp, #16]
 8005562:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005566:	2b00      	cmp	r3, #0
 8005568:	f000 814d 	beq.w	8005806 <_dtoa_r+0xb2e>
 800556c:	2300      	movs	r3, #0
 800556e:	4631      	mov	r1, r6
 8005570:	220a      	movs	r2, #10
 8005572:	4620      	mov	r0, r4
 8005574:	f7fe fff5 	bl	8004562 <__multadd>
 8005578:	9b02      	ldr	r3, [sp, #8]
 800557a:	2b00      	cmp	r3, #0
 800557c:	4606      	mov	r6, r0
 800557e:	dc4f      	bgt.n	8005620 <_dtoa_r+0x948>
 8005580:	9b06      	ldr	r3, [sp, #24]
 8005582:	2b02      	cmp	r3, #2
 8005584:	dd4c      	ble.n	8005620 <_dtoa_r+0x948>
 8005586:	e011      	b.n	80055ac <_dtoa_r+0x8d4>
 8005588:	d0c9      	beq.n	800551e <_dtoa_r+0x846>
 800558a:	9a05      	ldr	r2, [sp, #20]
 800558c:	331c      	adds	r3, #28
 800558e:	441a      	add	r2, r3
 8005590:	9205      	str	r2, [sp, #20]
 8005592:	441d      	add	r5, r3
 8005594:	4498      	add	r8, r3
 8005596:	e7c2      	b.n	800551e <_dtoa_r+0x846>
 8005598:	4603      	mov	r3, r0
 800559a:	e7f6      	b.n	800558a <_dtoa_r+0x8b2>
 800559c:	f1b9 0f00 	cmp.w	r9, #0
 80055a0:	dc38      	bgt.n	8005614 <_dtoa_r+0x93c>
 80055a2:	9b06      	ldr	r3, [sp, #24]
 80055a4:	2b02      	cmp	r3, #2
 80055a6:	dd35      	ble.n	8005614 <_dtoa_r+0x93c>
 80055a8:	f8cd 9008 	str.w	r9, [sp, #8]
 80055ac:	9b02      	ldr	r3, [sp, #8]
 80055ae:	b963      	cbnz	r3, 80055ca <_dtoa_r+0x8f2>
 80055b0:	4639      	mov	r1, r7
 80055b2:	2205      	movs	r2, #5
 80055b4:	4620      	mov	r0, r4
 80055b6:	f7fe ffd4 	bl	8004562 <__multadd>
 80055ba:	4601      	mov	r1, r0
 80055bc:	4607      	mov	r7, r0
 80055be:	9804      	ldr	r0, [sp, #16]
 80055c0:	f7ff f99a 	bl	80048f8 <__mcmp>
 80055c4:	2800      	cmp	r0, #0
 80055c6:	f73f adcc 	bgt.w	8005162 <_dtoa_r+0x48a>
 80055ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055cc:	465d      	mov	r5, fp
 80055ce:	ea6f 0a03 	mvn.w	sl, r3
 80055d2:	f04f 0900 	mov.w	r9, #0
 80055d6:	4639      	mov	r1, r7
 80055d8:	4620      	mov	r0, r4
 80055da:	f7fe ffab 	bl	8004534 <_Bfree>
 80055de:	2e00      	cmp	r6, #0
 80055e0:	f43f aeb7 	beq.w	8005352 <_dtoa_r+0x67a>
 80055e4:	f1b9 0f00 	cmp.w	r9, #0
 80055e8:	d005      	beq.n	80055f6 <_dtoa_r+0x91e>
 80055ea:	45b1      	cmp	r9, r6
 80055ec:	d003      	beq.n	80055f6 <_dtoa_r+0x91e>
 80055ee:	4649      	mov	r1, r9
 80055f0:	4620      	mov	r0, r4
 80055f2:	f7fe ff9f 	bl	8004534 <_Bfree>
 80055f6:	4631      	mov	r1, r6
 80055f8:	4620      	mov	r0, r4
 80055fa:	f7fe ff9b 	bl	8004534 <_Bfree>
 80055fe:	e6a8      	b.n	8005352 <_dtoa_r+0x67a>
 8005600:	2700      	movs	r7, #0
 8005602:	463e      	mov	r6, r7
 8005604:	e7e1      	b.n	80055ca <_dtoa_r+0x8f2>
 8005606:	f8dd a020 	ldr.w	sl, [sp, #32]
 800560a:	463e      	mov	r6, r7
 800560c:	e5a9      	b.n	8005162 <_dtoa_r+0x48a>
 800560e:	bf00      	nop
 8005610:	40240000 	.word	0x40240000
 8005614:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005616:	f8cd 9008 	str.w	r9, [sp, #8]
 800561a:	2b00      	cmp	r3, #0
 800561c:	f000 80fa 	beq.w	8005814 <_dtoa_r+0xb3c>
 8005620:	2d00      	cmp	r5, #0
 8005622:	dd05      	ble.n	8005630 <_dtoa_r+0x958>
 8005624:	4631      	mov	r1, r6
 8005626:	462a      	mov	r2, r5
 8005628:	4620      	mov	r0, r4
 800562a:	f7ff f911 	bl	8004850 <__lshift>
 800562e:	4606      	mov	r6, r0
 8005630:	9b07      	ldr	r3, [sp, #28]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d04c      	beq.n	80056d0 <_dtoa_r+0x9f8>
 8005636:	6871      	ldr	r1, [r6, #4]
 8005638:	4620      	mov	r0, r4
 800563a:	f7fe ff47 	bl	80044cc <_Balloc>
 800563e:	6932      	ldr	r2, [r6, #16]
 8005640:	3202      	adds	r2, #2
 8005642:	4605      	mov	r5, r0
 8005644:	0092      	lsls	r2, r2, #2
 8005646:	f106 010c 	add.w	r1, r6, #12
 800564a:	300c      	adds	r0, #12
 800564c:	f000 f904 	bl	8005858 <memcpy>
 8005650:	2201      	movs	r2, #1
 8005652:	4629      	mov	r1, r5
 8005654:	4620      	mov	r0, r4
 8005656:	f7ff f8fb 	bl	8004850 <__lshift>
 800565a:	9b00      	ldr	r3, [sp, #0]
 800565c:	f8cd b014 	str.w	fp, [sp, #20]
 8005660:	f003 0301 	and.w	r3, r3, #1
 8005664:	46b1      	mov	r9, r6
 8005666:	9307      	str	r3, [sp, #28]
 8005668:	4606      	mov	r6, r0
 800566a:	4639      	mov	r1, r7
 800566c:	9804      	ldr	r0, [sp, #16]
 800566e:	f7ff faa7 	bl	8004bc0 <quorem>
 8005672:	4649      	mov	r1, r9
 8005674:	4605      	mov	r5, r0
 8005676:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800567a:	9804      	ldr	r0, [sp, #16]
 800567c:	f7ff f93c 	bl	80048f8 <__mcmp>
 8005680:	4632      	mov	r2, r6
 8005682:	9000      	str	r0, [sp, #0]
 8005684:	4639      	mov	r1, r7
 8005686:	4620      	mov	r0, r4
 8005688:	f7ff f950 	bl	800492c <__mdiff>
 800568c:	68c3      	ldr	r3, [r0, #12]
 800568e:	4602      	mov	r2, r0
 8005690:	bb03      	cbnz	r3, 80056d4 <_dtoa_r+0x9fc>
 8005692:	4601      	mov	r1, r0
 8005694:	9008      	str	r0, [sp, #32]
 8005696:	9804      	ldr	r0, [sp, #16]
 8005698:	f7ff f92e 	bl	80048f8 <__mcmp>
 800569c:	9a08      	ldr	r2, [sp, #32]
 800569e:	4603      	mov	r3, r0
 80056a0:	4611      	mov	r1, r2
 80056a2:	4620      	mov	r0, r4
 80056a4:	9308      	str	r3, [sp, #32]
 80056a6:	f7fe ff45 	bl	8004534 <_Bfree>
 80056aa:	9b08      	ldr	r3, [sp, #32]
 80056ac:	b9a3      	cbnz	r3, 80056d8 <_dtoa_r+0xa00>
 80056ae:	9a06      	ldr	r2, [sp, #24]
 80056b0:	b992      	cbnz	r2, 80056d8 <_dtoa_r+0xa00>
 80056b2:	9a07      	ldr	r2, [sp, #28]
 80056b4:	b982      	cbnz	r2, 80056d8 <_dtoa_r+0xa00>
 80056b6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80056ba:	d029      	beq.n	8005710 <_dtoa_r+0xa38>
 80056bc:	9b00      	ldr	r3, [sp, #0]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	dd01      	ble.n	80056c6 <_dtoa_r+0x9ee>
 80056c2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80056c6:	9b05      	ldr	r3, [sp, #20]
 80056c8:	1c5d      	adds	r5, r3, #1
 80056ca:	f883 8000 	strb.w	r8, [r3]
 80056ce:	e782      	b.n	80055d6 <_dtoa_r+0x8fe>
 80056d0:	4630      	mov	r0, r6
 80056d2:	e7c2      	b.n	800565a <_dtoa_r+0x982>
 80056d4:	2301      	movs	r3, #1
 80056d6:	e7e3      	b.n	80056a0 <_dtoa_r+0x9c8>
 80056d8:	9a00      	ldr	r2, [sp, #0]
 80056da:	2a00      	cmp	r2, #0
 80056dc:	db04      	blt.n	80056e8 <_dtoa_r+0xa10>
 80056de:	d125      	bne.n	800572c <_dtoa_r+0xa54>
 80056e0:	9a06      	ldr	r2, [sp, #24]
 80056e2:	bb1a      	cbnz	r2, 800572c <_dtoa_r+0xa54>
 80056e4:	9a07      	ldr	r2, [sp, #28]
 80056e6:	bb0a      	cbnz	r2, 800572c <_dtoa_r+0xa54>
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	ddec      	ble.n	80056c6 <_dtoa_r+0x9ee>
 80056ec:	2201      	movs	r2, #1
 80056ee:	9904      	ldr	r1, [sp, #16]
 80056f0:	4620      	mov	r0, r4
 80056f2:	f7ff f8ad 	bl	8004850 <__lshift>
 80056f6:	4639      	mov	r1, r7
 80056f8:	9004      	str	r0, [sp, #16]
 80056fa:	f7ff f8fd 	bl	80048f8 <__mcmp>
 80056fe:	2800      	cmp	r0, #0
 8005700:	dc03      	bgt.n	800570a <_dtoa_r+0xa32>
 8005702:	d1e0      	bne.n	80056c6 <_dtoa_r+0x9ee>
 8005704:	f018 0f01 	tst.w	r8, #1
 8005708:	d0dd      	beq.n	80056c6 <_dtoa_r+0x9ee>
 800570a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800570e:	d1d8      	bne.n	80056c2 <_dtoa_r+0x9ea>
 8005710:	9b05      	ldr	r3, [sp, #20]
 8005712:	9a05      	ldr	r2, [sp, #20]
 8005714:	1c5d      	adds	r5, r3, #1
 8005716:	2339      	movs	r3, #57	; 0x39
 8005718:	7013      	strb	r3, [r2, #0]
 800571a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800571e:	2b39      	cmp	r3, #57	; 0x39
 8005720:	f105 32ff 	add.w	r2, r5, #4294967295
 8005724:	d04f      	beq.n	80057c6 <_dtoa_r+0xaee>
 8005726:	3301      	adds	r3, #1
 8005728:	7013      	strb	r3, [r2, #0]
 800572a:	e754      	b.n	80055d6 <_dtoa_r+0x8fe>
 800572c:	9a05      	ldr	r2, [sp, #20]
 800572e:	2b00      	cmp	r3, #0
 8005730:	f102 0501 	add.w	r5, r2, #1
 8005734:	dd06      	ble.n	8005744 <_dtoa_r+0xa6c>
 8005736:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800573a:	d0e9      	beq.n	8005710 <_dtoa_r+0xa38>
 800573c:	f108 0801 	add.w	r8, r8, #1
 8005740:	9b05      	ldr	r3, [sp, #20]
 8005742:	e7c2      	b.n	80056ca <_dtoa_r+0x9f2>
 8005744:	9a02      	ldr	r2, [sp, #8]
 8005746:	f805 8c01 	strb.w	r8, [r5, #-1]
 800574a:	eba5 030b 	sub.w	r3, r5, fp
 800574e:	4293      	cmp	r3, r2
 8005750:	d021      	beq.n	8005796 <_dtoa_r+0xabe>
 8005752:	2300      	movs	r3, #0
 8005754:	220a      	movs	r2, #10
 8005756:	9904      	ldr	r1, [sp, #16]
 8005758:	4620      	mov	r0, r4
 800575a:	f7fe ff02 	bl	8004562 <__multadd>
 800575e:	45b1      	cmp	r9, r6
 8005760:	9004      	str	r0, [sp, #16]
 8005762:	f04f 0300 	mov.w	r3, #0
 8005766:	f04f 020a 	mov.w	r2, #10
 800576a:	4649      	mov	r1, r9
 800576c:	4620      	mov	r0, r4
 800576e:	d105      	bne.n	800577c <_dtoa_r+0xaa4>
 8005770:	f7fe fef7 	bl	8004562 <__multadd>
 8005774:	4681      	mov	r9, r0
 8005776:	4606      	mov	r6, r0
 8005778:	9505      	str	r5, [sp, #20]
 800577a:	e776      	b.n	800566a <_dtoa_r+0x992>
 800577c:	f7fe fef1 	bl	8004562 <__multadd>
 8005780:	4631      	mov	r1, r6
 8005782:	4681      	mov	r9, r0
 8005784:	2300      	movs	r3, #0
 8005786:	220a      	movs	r2, #10
 8005788:	4620      	mov	r0, r4
 800578a:	f7fe feea 	bl	8004562 <__multadd>
 800578e:	4606      	mov	r6, r0
 8005790:	e7f2      	b.n	8005778 <_dtoa_r+0xaa0>
 8005792:	f04f 0900 	mov.w	r9, #0
 8005796:	2201      	movs	r2, #1
 8005798:	9904      	ldr	r1, [sp, #16]
 800579a:	4620      	mov	r0, r4
 800579c:	f7ff f858 	bl	8004850 <__lshift>
 80057a0:	4639      	mov	r1, r7
 80057a2:	9004      	str	r0, [sp, #16]
 80057a4:	f7ff f8a8 	bl	80048f8 <__mcmp>
 80057a8:	2800      	cmp	r0, #0
 80057aa:	dcb6      	bgt.n	800571a <_dtoa_r+0xa42>
 80057ac:	d102      	bne.n	80057b4 <_dtoa_r+0xadc>
 80057ae:	f018 0f01 	tst.w	r8, #1
 80057b2:	d1b2      	bne.n	800571a <_dtoa_r+0xa42>
 80057b4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80057b8:	2b30      	cmp	r3, #48	; 0x30
 80057ba:	f105 32ff 	add.w	r2, r5, #4294967295
 80057be:	f47f af0a 	bne.w	80055d6 <_dtoa_r+0x8fe>
 80057c2:	4615      	mov	r5, r2
 80057c4:	e7f6      	b.n	80057b4 <_dtoa_r+0xadc>
 80057c6:	4593      	cmp	fp, r2
 80057c8:	d105      	bne.n	80057d6 <_dtoa_r+0xafe>
 80057ca:	2331      	movs	r3, #49	; 0x31
 80057cc:	f10a 0a01 	add.w	sl, sl, #1
 80057d0:	f88b 3000 	strb.w	r3, [fp]
 80057d4:	e6ff      	b.n	80055d6 <_dtoa_r+0x8fe>
 80057d6:	4615      	mov	r5, r2
 80057d8:	e79f      	b.n	800571a <_dtoa_r+0xa42>
 80057da:	f8df b064 	ldr.w	fp, [pc, #100]	; 8005840 <_dtoa_r+0xb68>
 80057de:	e007      	b.n	80057f0 <_dtoa_r+0xb18>
 80057e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80057e2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8005844 <_dtoa_r+0xb6c>
 80057e6:	b11b      	cbz	r3, 80057f0 <_dtoa_r+0xb18>
 80057e8:	f10b 0308 	add.w	r3, fp, #8
 80057ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80057ee:	6013      	str	r3, [r2, #0]
 80057f0:	4658      	mov	r0, fp
 80057f2:	b017      	add	sp, #92	; 0x5c
 80057f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057f8:	9b06      	ldr	r3, [sp, #24]
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	f77f ae35 	ble.w	800546a <_dtoa_r+0x792>
 8005800:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005802:	9307      	str	r3, [sp, #28]
 8005804:	e649      	b.n	800549a <_dtoa_r+0x7c2>
 8005806:	9b02      	ldr	r3, [sp, #8]
 8005808:	2b00      	cmp	r3, #0
 800580a:	dc03      	bgt.n	8005814 <_dtoa_r+0xb3c>
 800580c:	9b06      	ldr	r3, [sp, #24]
 800580e:	2b02      	cmp	r3, #2
 8005810:	f73f aecc 	bgt.w	80055ac <_dtoa_r+0x8d4>
 8005814:	465d      	mov	r5, fp
 8005816:	4639      	mov	r1, r7
 8005818:	9804      	ldr	r0, [sp, #16]
 800581a:	f7ff f9d1 	bl	8004bc0 <quorem>
 800581e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005822:	f805 8b01 	strb.w	r8, [r5], #1
 8005826:	9a02      	ldr	r2, [sp, #8]
 8005828:	eba5 030b 	sub.w	r3, r5, fp
 800582c:	429a      	cmp	r2, r3
 800582e:	ddb0      	ble.n	8005792 <_dtoa_r+0xaba>
 8005830:	2300      	movs	r3, #0
 8005832:	220a      	movs	r2, #10
 8005834:	9904      	ldr	r1, [sp, #16]
 8005836:	4620      	mov	r0, r4
 8005838:	f7fe fe93 	bl	8004562 <__multadd>
 800583c:	9004      	str	r0, [sp, #16]
 800583e:	e7ea      	b.n	8005816 <_dtoa_r+0xb3e>
 8005840:	080059b1 	.word	0x080059b1
 8005844:	080059a4 	.word	0x080059a4

08005848 <malloc>:
 8005848:	4b02      	ldr	r3, [pc, #8]	; (8005854 <malloc+0xc>)
 800584a:	4601      	mov	r1, r0
 800584c:	6818      	ldr	r0, [r3, #0]
 800584e:	f7ff b945 	b.w	8004adc <_malloc_r>
 8005852:	bf00      	nop
 8005854:	2000000c 	.word	0x2000000c

08005858 <memcpy>:
 8005858:	b510      	push	{r4, lr}
 800585a:	1e43      	subs	r3, r0, #1
 800585c:	440a      	add	r2, r1
 800585e:	4291      	cmp	r1, r2
 8005860:	d100      	bne.n	8005864 <memcpy+0xc>
 8005862:	bd10      	pop	{r4, pc}
 8005864:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005868:	f803 4f01 	strb.w	r4, [r3, #1]!
 800586c:	e7f7      	b.n	800585e <memcpy+0x6>

0800586e <__malloc_lock>:
 800586e:	4770      	bx	lr

08005870 <__malloc_unlock>:
 8005870:	4770      	bx	lr
	...

08005874 <_init>:
 8005874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005876:	bf00      	nop
 8005878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800587a:	bc08      	pop	{r3}
 800587c:	469e      	mov	lr, r3
 800587e:	4770      	bx	lr

08005880 <_fini>:
 8005880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005882:	bf00      	nop
 8005884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005886:	bc08      	pop	{r3}
 8005888:	469e      	mov	lr, r3
 800588a:	4770      	bx	lr
